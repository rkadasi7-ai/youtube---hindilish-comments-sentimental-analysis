{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SENTIMENTAL ANALYSIS ON KABITHA KITCHEN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>commentText</th>\n",
       "      <th>Labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ugy_CBm-_CKA3YqrzcB4AaABAg</td>\n",
       "      <td>Pudina ptta nhi dalu to</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ugy9mx9nuTWJu4dRac14AaABAg</td>\n",
       "      <td>Chiken kacha tu ni rhy ga sis</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ugz8T2MKLYucL3dM9nh4AaABAg</td>\n",
       "      <td>Hello mam, I love your all recipes.... ðð...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ugx_1cCjRbCaDgL0FLF4AaABAg</td>\n",
       "      <td>Its awesome recipe plzz make handi chicken in ...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>UgzLhKVAJ6NN3nZXyjN4AaABAg</td>\n",
       "      <td>Yeh jo measurement hai.........kitne logon ke ...</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           id  \\\n",
       "0  Ugy_CBm-_CKA3YqrzcB4AaABAg   \n",
       "1  Ugy9mx9nuTWJu4dRac14AaABAg   \n",
       "2  Ugz8T2MKLYucL3dM9nh4AaABAg   \n",
       "3  Ugx_1cCjRbCaDgL0FLF4AaABAg   \n",
       "4  UgzLhKVAJ6NN3nZXyjN4AaABAg   \n",
       "\n",
       "                                         commentText  Labels  \n",
       "0                            Pudina ptta nhi dalu to       7  \n",
       "1                      Chiken kacha tu ni rhy ga sis       7  \n",
       "2  Hello mam, I love your all recipes.... ðð...       4  \n",
       "3  Its awesome recipe plzz make handi chicken in ...       2  \n",
       "4  Yeh jo measurement hai.........kitne logon ke ...       7  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Here we are going to nltk package for sentimental anlaysis and also install the required packages for preprocessing\n",
    "#Then the kabita kitchen dataset is read using .csv\n",
    "\n",
    "import nltk\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import string \n",
    "import re\n",
    "stopwords = nltk.corpus.stopwords.words('english')\n",
    "ps = nltk.PorterStemmer()\n",
    "dataset_kb = pd.read_csv(\"kabitakitchen.csv\", encoding='latin-1')\n",
    "dataset_kb.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CLEAN TEXT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# As we can see from the above displayed dataset ,it contains stop words punctations ,upper case \n",
    "# letters such features slow the model so the dataset should go some preproccesing\n",
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "# we create a corpus which  contains the clean text and we will be using for vectorization\n",
    "corpus = []\n",
    "for i in range(0,4900):\n",
    "    review = re.sub('[^a-zA-Z]', ' ', dataset_kb['commentText'][i]) #removes all the numbers, symbols it keeps only the alphabets\n",
    "    review = review.lower() #it converts all the alphabets into lower case\n",
    "    review = review.split()\n",
    "    ps = PorterStemmer()  #it is used for stemming\n",
    "    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n",
    "    review = ' '.join(review)\n",
    "    corpus.append(review)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CREATING COUNT VECTORIZER FOR KABITHA KTCHEN DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#we now import count vectorizer from sklearn.freature extraction\n",
    "from sklearn.feature_extraction.text import CountVectorizer \n",
    "cv_K = CountVectorizer() # creating count vectorizer\n",
    "Xk_c = cv_K.fit_transform(corpus).toarray() #fitting the count vectorizer to the dataset\n",
    "yk_c = dataset_kb.iloc[:,2].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4900, 4092)\n"
     ]
    }
   ],
   "source": [
    "print(Xk_c.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pudina ptta nhi dalu',\n",
       " 'chiken kacha tu ni rhi ga si',\n",
       " 'hello mam love recip ingredi easili avail way explain good',\n",
       " 'awesom recip plzz make handi chicken handi',\n",
       " 'yeh jo measur hai kitn logon ke liy hai',\n",
       " 'kabita mam tri ur egg biryani everyon hous love thank much delici ur recip',\n",
       " 'cooker kar sakt na',\n",
       " 'mujh bhot ach lagi apki respi mene subscrib kardia bhot ach',\n",
       " 'mam dahi k jgh p kuch use kr skte h kya',\n",
       " 'wooooooo yummmmmm love',\n",
       " 'perfect biryani recip apko follow kar k banaya acchi bani biryani',\n",
       " 'hi didi alway curiou biryani made thank much put detail video weekend tri serv famili realli motivati',\n",
       " 'thanx respect madam appn tel nahi dala',\n",
       " 'made tast awesom thank kabita ji',\n",
       " 'amaz',\n",
       " 'nice video',\n",
       " 'aur kya recip ko cokar bana sakt hepleas zarur repli kijiy ga',\n",
       " 'aur mam ism aap chawal kitn k g use kiya',\n",
       " 'rice oil dale chalega',\n",
       " 'masha allah yummi main thing u like video way u show step one one way u cook realli look beauti',\n",
       " 'thank friend post video make chicken biryani like thank u much love u friend dubai',\n",
       " 'curd ko skip kar sakt h maa sahi bariyani masala chicken masala ensabko skip kar sakt h maa',\n",
       " 'u show make merin chicken',\n",
       " 'hi kabita agar briyani ki quantiti jyada ho bhi kya cook time rahegi',\n",
       " 'u r awesom kabita ji',\n",
       " 'chicken marinett oil ya ghee ni daleng wo ji bartan hum bna rahe h usk nich chipkegi nahi kya pl bttaiy na mujh bnani h',\n",
       " 'love recip',\n",
       " 'kabita didi plz tell us brand basmati rice use plz',\n",
       " 'measur rice water',\n",
       " 'u r sweet even get mani view comment read everyon comment respond gestur',\n",
       " 'alreadi tri egg biryani time chicken mam master',\n",
       " 'delici',\n",
       " 'aap mujh bahut pasand ho mam',\n",
       " 'though unabl follow languag step step prepar clear easi simpl method prepar dum briyani definit tri',\n",
       " 'mast',\n",
       " 'ap boht achi hain apki recip bhi kamal ki hai',\n",
       " 'wao nice recip',\n",
       " 'abhi tak isko baar bana chuki hu unexpress par comment pahli baar kar rahi hu',\n",
       " 'good',\n",
       " 'made today ur biryani receip tasti nd nice',\n",
       " 'nice recip yummi',\n",
       " 'nice recip',\n",
       " 'well explain hit home prepar mani time n everyon love superb mam keep',\n",
       " 'superb mam',\n",
       " 'nice',\n",
       " 'mam wheh mix rose water',\n",
       " 'kewda water bhi use krte h kya ism',\n",
       " 'simplest way cook biryani tri thank video',\n",
       " 'brand shahi biryani masala chicken masala differ brand differ flavour pl advic',\n",
       " 'agr dhi pudina na ho',\n",
       " 'skip mint leav',\n",
       " 'hi didi mujh puchna tha ki jo dahi apna dala oo kesa tha mene last time dahi dala dahi khata tha toh chiken gravi khata ho geya',\n",
       " 'thank',\n",
       " 'oooooh',\n",
       " 'kya tamatar nahi dalna hai',\n",
       " 'tast',\n",
       " 'chicken ko freez mein nehi rakhn se koi prblm ho gaya kya di',\n",
       " 'tri ur recip dum biryani good n tasti chicken got burnt littl avoid pleas give suggest',\n",
       " 'shahi chicken masala combin yahan pe shahi masala nahi milta pl repli mam',\n",
       " 'big process',\n",
       " 'tri today came delici ad kade masala ingredi time kg chicken kg gm basmathi rice follow everi step came realli well famili love recip thank u share recip',\n",
       " 'kitn log khayeng',\n",
       " 'ab ye javitri kya hota hai',\n",
       " 'mene ye tri kiya delici thnkuu love recip mam',\n",
       " 'nice kabita si madurai tamil nadu',\n",
       " 'nice present',\n",
       " 'wow nice',\n",
       " 'kg chiken main kitna dahi cahiy',\n",
       " 'agar rice chicken ka quantiti kam ho time rahega',\n",
       " 'mene app ki biryani tri ki bahot achi bani sab ko achi lagi lekin muje agar jada grevi chahiy kya kare thank',\n",
       " 'maam kya ghe ke jagah batter use kar sakt kya',\n",
       " 'much time cook stove make beef',\n",
       " 'u r best chef youtub mam',\n",
       " 'mam aapn kitn chawal kitna pani liya pakan ke liy kyuki jb bhi mai banati hu tb chawal sahj se cook hote hi nhi plzz mam ek baar sahi se bata dijiy',\n",
       " 'super recip mam tri awesom thank lot super keep go',\n",
       " 'amaz recip best',\n",
       " 'mam chikn ke pi kacch nahi raheng pl mere qustion ka aanswer dena pl',\n",
       " 'hai dear kerala big fan hyderabadi biriyani doubt non stick pan case type vessel use dum step',\n",
       " 'thank',\n",
       " 'tri testi',\n",
       " 'cook neat clean',\n",
       " 'world best briyani move canada crave mom biryani tast exactli like thank much must tryyyyi',\n",
       " 'hii maam question ask u taken g chicken di biryani time accord vari amount chicken time stil vl chang time pl help',\n",
       " 'bhauji agar mutton kg aur chawal kg ho time kya hoga',\n",
       " 'itna aata zayaah krna dum dene k lye himaqat nahi',\n",
       " 'pahl mai sochta tha doctor se hi sadi karunga iss video ko dekhn ke bad lagta hai hotel manag best hogi mere liy husband realli lucki wish someday wife coock',\n",
       " 'tri yummi thank u kabita mam',\n",
       " 'perfect recip chicken dum biriyani simpli follow step biriyani awsum first tri thank share describ video',\n",
       " 'hello kabita ji good day dubai cook today biryani cook delici thank much',\n",
       " 'made exactli u knw insan awesom best ever restaur thank much ms kabita',\n",
       " 'nice recip',\n",
       " 'kukar ni bna skte',\n",
       " 'hyderabadi khachi ghost ki biryani',\n",
       " 'hello mam tri biryani recip today turn amaz thank alot delici biryani india cook channel kabita kitchen',\n",
       " 'hi mam tri mani receip upma pea nut chutney phoa dosa biryani recip turn good appreci thank u much clear explain ur recip god bless keep',\n",
       " 'madam ye rice kitn rs waal ha',\n",
       " 'oh wow simpl yet delici tri',\n",
       " 'bhai koy tri mat karna ne tri kiya ra pura chikan jalgaya',\n",
       " 'tri great job',\n",
       " 'hi kabita tri biriyani tasti lot water collect bottom vessel solv',\n",
       " 'madam chicken dahi daln se chicken khata nahi hota hai na',\n",
       " 'madam simpl wale chawal bna skte hai kya',\n",
       " 'madam chiken kaun sa legn leg piec wala ki jo dukan pr kaat kr dete hai',\n",
       " 'madam shahi biryani masala kaisey banay ya phir bahar karidley',\n",
       " 'measur pretti accur simpl step step explan best wish malaysia',\n",
       " 'agar kg chaval lege kitna dahi lena hai plz pti',\n",
       " 'sahi use aap jyda mere hai',\n",
       " 'nice kabitaji easi inform',\n",
       " 'raam chicken b j p walo se bach ke rahiyo mulaa ghosit kar deng sorri joke',\n",
       " 'way cook good recip fantast tri biryani saunday pleas upload recip chicken momo love u much kabita dii',\n",
       " 'nice awesom',\n",
       " 'atta k dough crack aa ja rha aur pressur releas ho ja rhe solut',\n",
       " 'kabita mam reason learn cook made cook hobbi bachelor roommat alway wait come offic make someth credit goe mam realli awesom',\n",
       " 'hello mam tri recip today awesom never tast biryani restaur earlier',\n",
       " 'nice',\n",
       " 'u r magician ju love everi recip',\n",
       " 'yummi recip nice tri tasti',\n",
       " 'bht achchi bani thi chicken dum biryani thanku much kabita di',\n",
       " 'sorri u pleas cook time mani minut',\n",
       " 'mam aapki recip bahut achha laga aur aapka bathan ka tarika bhi bahuti achha hai mam mera ek sawal hai aapn usko seal kark banaya hai agar mai iss beiyani ko pressur cooker banan se kaisa rahega pl mam aap bathayeng',\n",
       " 'go first cook ever life',\n",
       " 'delici kabita mam u realli great',\n",
       " 'nice recip',\n",
       " 'apn aata bataya hi nahi',\n",
       " 'low medium flame either wud b low medium',\n",
       " 'delici time consum',\n",
       " 'never cook biryani look video tri look ever nice',\n",
       " 'perfect recip mam thank lot keep good work',\n",
       " 'tri today hope come gud',\n",
       " 'oil bilkul daala hi nahi aap ne',\n",
       " 'mani peopl serv want tri tomorrow',\n",
       " 'bahut hi achhi recip hai mujh bahut pasand hai hmesa market hi khane jana padta tha lekin ab ye problem bhi door ho gyi thank mam',\n",
       " 'nice cook style',\n",
       " 'biryani awesom made home major problem face make biryani bottom use get burn way u said noth got burn one thing add tabl spoon oil marin chicken even give tast',\n",
       " 'wonder chef instructor keep good work',\n",
       " 'u ad cook oil wil work',\n",
       " 'pl learn telugu',\n",
       " 'jab ghee dalt hai uska tast ya smell aata hai kya kyu ki mujh ghee kewal roti k saath hi aacha lagta hai',\n",
       " 'biryani pan ki jgah cookar bna skte h kya',\n",
       " 'want dum biriyani want normal one seal edg pan answer pleas',\n",
       " 'tq sister amaz tri superb sister',\n",
       " 'make kg chicken biryani time',\n",
       " 'hi thank u',\n",
       " 'super recip amaz',\n",
       " 'hello mam plzz want recip biryani masala powder plzzz',\n",
       " 'thank',\n",
       " 'nice recip',\n",
       " 'good mam nice recip',\n",
       " 'today tri recip awesom husband love thank alot make day',\n",
       " 'time explain kijiy plzzzzz',\n",
       " 'biryani ka time nhi samjha',\n",
       " 'kitina bhi jayada biriyani ho time rahega na plz repli maam',\n",
       " 'agar tawa nahi hai direct heat kar sakt hai',\n",
       " 'hii mam mera biryani bht acha bna bt chckn hlka sa lg jata h aisa q hota h',\n",
       " 'bahot best',\n",
       " 'thanx mam ur biryani superb famili love much',\n",
       " 'pudina patta na ho kadi ptta use kr sakt h',\n",
       " 'man dahi ko replac kark kuch aur nhi daal sakt',\n",
       " 'awesom recip thank much',\n",
       " 'love content keep good work',\n",
       " 'hi mam peopl ke liy kitna amount rice chicken use krna chahiy plzzzzz repli mam',\n",
       " 'ye meri rd tym h aapki recip follow karti hnu ye toh restaur ki biriyani se v bahat bahat bahat acha h juzz lv well done mam',\n",
       " 'see peopl posit comment definit make want tri recip give go weekend thank share recip',\n",
       " 'mam nest chef',\n",
       " 'kesar na ho madam',\n",
       " 'pleas app fri chicken biriyani recip ki video baaniy',\n",
       " 'pleas never forget write ingredi descript',\n",
       " 'explain well even cook hous make biryani well soooo yumm yumm one best biryani ever tast thank good recip biryani home',\n",
       " 'itn der tak biryani banan se accha bahar se hi order kar lo',\n",
       " 'kitchen king acha sabji poudar masala bataiy na',\n",
       " 'nice biryani',\n",
       " 'maam one nicest youtub countri keep good work go',\n",
       " 'chicken masala lagakar fridg kitna samai tak rakh sakht hai',\n",
       " 'agar thora masal dar chay kya kre',\n",
       " 'u great mam cute',\n",
       " 'india live germani ur recip life saver thankyu',\n",
       " 'marin chicken cook put rice',\n",
       " 'hi kavita tire ur recip delici one problem rice dri pleas suggest make rice soft thank',\n",
       " 'mam mujh nai khana bana ke itna lamba prose kuch chhota aasan sa btaiy plzz',\n",
       " 'skip curd mam',\n",
       " 'brand basmati recommend recip recommend parboil basmati sela seila regular basmati',\n",
       " 'pudina ko skip nhi kar skte kya qki ye local market avail nhi hote',\n",
       " 'calori one go',\n",
       " 'mam agar aloo bokhar daln ho tho wo chicken ke andar daal dene h jo marin kart howe kya chicken ko pehl cook nei kar sakt ese darr lagta h ke chicken pakk naa yaa jal na jae pleas repli',\n",
       " 'mam chiken ko ach saaf krlijiy gnda h jb chiken itna gnda h biryani ka test kais acha ho akta plz agli recipi chiken ko ach saaf kriyega safai pr dhiyan de',\n",
       " 'tri recip today chicken cook beauti well rice masala got burn n stuck bottom due littl steam pass dum dough two leakag spot',\n",
       " 'nice recip tri',\n",
       " 'hi kabita tri biryani home tast good use flour seal pot seal got leak middl biryani got burn bottom idea properli seal pot',\n",
       " 'hi dear made biryani yesterday per instruct lower chicken got burn ruin whole dish',\n",
       " 'kg chicken biryani much time requir cook chicken say pleas',\n",
       " 'thick pot ki jagah par kya use kar sakt h',\n",
       " 'meat look uncook',\n",
       " 'make shahi biryani masala',\n",
       " 'kabita ji apki recip bohot simpl hai ap jesh bol kar kart hai bhot acha hai',\n",
       " 'mam oil kab dalna hai',\n",
       " 'take time',\n",
       " 'tri sure thank',\n",
       " 'superb mam',\n",
       " 'much spiciy',\n",
       " 'also tri recip multipl time realli yummi recip anyon beginn u check cooker biryani recip easi quick delici',\n",
       " 'chicken pak jaayega ais',\n",
       " 'maam kia hum chicken ki layr laga skate hai',\n",
       " 'iss achchi meri mumma bnati h',\n",
       " 'aap master chef ho',\n",
       " 'oh wow',\n",
       " 'ye kachi dum biriyani',\n",
       " 'tri n realli soo yummi mam thank lot upload delici receip',\n",
       " 'galti sy mint low ker dia ab kia keron',\n",
       " 'chicken',\n",
       " 'love',\n",
       " 'superb',\n",
       " 'nice',\n",
       " 'hello mam super',\n",
       " 'maam ye jo apn banaya hai vo kitn lg ke liy hai tamatar nai use krna hota hai',\n",
       " 'kabitaji main aapki recip last year banayi thi bahut mast bani thi bacchonko ab tak yaad hai ab savan ka mahina chalu hone se pahal banani hai isliy vapa aapki ye haidrabadi biryani ki video dekh rahi hoon thank kabitaji aapka recip bataneka tarika itna acchha hai ki sab aasan ho jata hai',\n",
       " 'mam apn oil nehi dala chicken marin',\n",
       " 'today first time prepar biryani turn realli well thank',\n",
       " 'like recip recip use',\n",
       " 'steam toh nikla hi nehi end mein iski cbi jaanch honi chahiy',\n",
       " 'pehl khood sikho phir sab ko sikha',\n",
       " 'love recip chicken dam biryani kabita mam realli awesom mashaa allah deffin tri recip whenev made biryani home everi time got confus rice quantiti biryani look like lott masala insiden less rice pleas give tip correct rice quantiti',\n",
       " 'love way explain nice fast tri excel',\n",
       " 'mam chicken rubber jaisa cook hota hai mere se make soft chicken',\n",
       " 'tri rspi realli nice cook biryani thnqq keep share ur rspi',\n",
       " 'agar shahi biryani masala na ho kya kru',\n",
       " 'yummi mam ham tomato dal sakt h',\n",
       " 'yummi',\n",
       " 'thank share cant wait make',\n",
       " 'rice ko kitn time ubal',\n",
       " 'easi tasti recip thank',\n",
       " 'agar refriger naho',\n",
       " 'thank share recipi',\n",
       " 'superbbb',\n",
       " 'mam ays pakan se kiya chiken acchi tarha pak jayga',\n",
       " 'curd mix karn pe chicken agar jyda khatta ho gya',\n",
       " 'franc video help thank much love food',\n",
       " 'love darl',\n",
       " 'nice tast',\n",
       " 'mam mein jb v bant hu ye jal jata h aap kuch tip doo taki n jale',\n",
       " 'wonder',\n",
       " 'hey dear kabita thank u make soooooo easi tast like tandoor biryani big fan love u lot',\n",
       " 'u r super sister',\n",
       " 'today make recip yummi thank u much',\n",
       " 'har chiz ko bhut hi simpl bna deti ho mam aap',\n",
       " 'superb',\n",
       " 'kabita mene apki recip se biryani bnai bahut hi tasti bni thank nicerecip',\n",
       " 'biryani ban jane ke baad turant dhakkan hatana zaroori hai kya agar hum ghant baad hatayeng kya tast mein fark padega',\n",
       " 'use cooker',\n",
       " 'good',\n",
       " 'ye ham pardesh walon k liy kafi qeemti hai thank maim',\n",
       " 'thank',\n",
       " 'nice briyani kabita',\n",
       " 'wow nice',\n",
       " 'wow best home made biryani ever thank lot kabita didi',\n",
       " 'mam ghee k jgha refin oil use kr skte hai',\n",
       " 'tri yesterday bhot delici bani dahi phat gya main aapki recip step step follow ki thi phir kya galti ho sakti hai',\n",
       " 'tumhari recip tast kais kareng',\n",
       " 'much time cook kg biryani',\n",
       " 'could cook meat first layer rice',\n",
       " 'sister aapka video dekhn ke baad mene life first time biryani banai aur jab biryani ban gayi toh gharwal ungliya chatat reh gay thank sister',\n",
       " 'agr chicken gram le aur rice b gram kya masalo aur sbhi ingredi ka measur itna hi rkh skte h',\n",
       " 'agar rice chicken ki quantiti aap jo dikhay hain uss doubl ho kya biriyani cook krne ki time bhi doubl hogi yaa phir jitna time apn bataya utn mee hi ho jayega plz an mee jaldi mujh yeh suggest ki bohot jarurat hai',\n",
       " 'nice recip mam maja agya',\n",
       " 'pyaz barik kate hue nice recip',\n",
       " 'hello kabita aaj main aapn bataya huy tarik se biryani banayi bahut acchi bani thi thank share recep us',\n",
       " 'tast superb satisfi',\n",
       " 'awwsom recip',\n",
       " 'hiee di how uh hope fine naa bdw told uh yesterday made biriyani n truli work wonder lucki charm thank di god bless luv u load',\n",
       " 'wahh mam apka koi jabab nhi bahut hi achh se har ek chij batati h ap',\n",
       " 'best',\n",
       " 'never tri biriyani except made tri n know turn well coz u lucki charm alway ur dish help grow luv uu di b bless',\n",
       " 'recip best',\n",
       " 'best',\n",
       " 'get ghee',\n",
       " 'maam log k liy bnane se cook time rahega ya tym lagega',\n",
       " 'soak rice',\n",
       " 'non stick cookwar still prep wud remain',\n",
       " 'mam ghee ki jgh refin oil use kr skte',\n",
       " 'mam mujh ek doubt hai kya chicken sach accha pak jayega qki usual chicken bnane jyada time lagta hai aur chicken accha nahi hota',\n",
       " 'wow nice chicken biriyani recip mam tasti',\n",
       " 'instead ghee use oil',\n",
       " 'mam ghee ki jagah tel use kr sakt h kya',\n",
       " 'like u bcoz ur cook process clear finis first time cook video subscib ur site keep best luck',\n",
       " 'hello kabita made biryani came realli well thank share recip',\n",
       " 'hi mam tri make biryani bit dri may know would went wrong n also masala becam less tell solut thing thank mam',\n",
       " 'kya kesar dalna jaruri h usk jgh pr jldi ni use kr skte',\n",
       " 'hi mam mene aaj chicken dum biryani banay sab ko bhut pasand aay yummi yummi thank sooooo much',\n",
       " 'nice',\n",
       " 'mam mani piec come gram chicken cut cut big piec',\n",
       " 'woow',\n",
       " 'dahi mandatori',\n",
       " 'nice recip question much total time taken readi biryani',\n",
       " 'tasti dear mam',\n",
       " 'ur voic resembl like air hostess explain plane',\n",
       " 'reali tasti tri thank u show show fri chicken kabab',\n",
       " 'kabita mam chang add cashew nut almond past almost tblspn opinion',\n",
       " 'yr video help lot kitchen thanx give us love video',\n",
       " 'humko fri chiken biriyani batayiy',\n",
       " 'kabita ji suppppper',\n",
       " 'mam import question mam apn esmai water nahi dala aur lagabhag mint cook kiya nich jo chiken hai wo jaal jayega aur baki chiz sahi se paak v nahi payega aur hamn ese pack v kar diya ho sakta hai ye blast kar jay kyounki mai jaha v apn samn chiken ya matan ki biryani pakt dekha hai usmai gravi hoti hai apn nahi dala koi v gravi ya water eska kya trick hai plz mam give detail',\n",
       " 'also make like',\n",
       " 'easi n delici learn frm u',\n",
       " 'nice',\n",
       " 'mam pleas upload haleem recip',\n",
       " 'hello sister ingredi use gm chicken make instanc g chicken doubl ingredi base amount meat amount ingredi remain',\n",
       " 'hello sorri watch video earlier love recip wonder cook hand contain magic tell',\n",
       " 'mam hie nivedita main kaun se brand ka basmati chawal use karun mere biryani chawal achh nae hote main india gate basmati use karti',\n",
       " 'good recip tri',\n",
       " 'didi app reshma ji math bolo jt reshma bolna',\n",
       " 'didi app aisach new rcpi post karo hum app ka har ek vdo hmara frd ko jarur share karagay',\n",
       " 'tqqq didi muja repli daynay ka khaliea',\n",
       " 'kabitha didi ek doubt appko katnay recip cook karsakthi',\n",
       " 'kabitha mam appki lookg cuteeeeee',\n",
       " 'ye chicken nicha oli one layer dalna kya g',\n",
       " 'wow',\n",
       " 'delici recip cook cooker',\n",
       " 'need go latin indian korean groceri store collect ingredi still guarante find everyth',\n",
       " 'tri recepi soo delici thanku soo much',\n",
       " 'amaz mam',\n",
       " 'good',\n",
       " 'smell kaisi khatamkaron',\n",
       " 'kesar dalni sy smell q ati hai',\n",
       " 'pakan kitna time lagega',\n",
       " 'love cook style u know aapki cook bilkul wais hi hoti h jaisa mugh pasand hai',\n",
       " 'tri awesom tasti di love much',\n",
       " 'mam aupka languag bahut acha lagta hai',\n",
       " 'hi use yoghurt instead curd',\n",
       " 'much testi',\n",
       " 'tri biryani home see video super tasti',\n",
       " 'didi kayea may kesor ko pani na vigo saktay hu plz answar q may aj app e recip bannung plzzzzzz answar',\n",
       " 'mam mere ghar dum biriyani banan pr usm halka sa meetha flavour rha tha yesa kyu mam pleas repli',\n",
       " 'learnt cook video',\n",
       " 'mama mere adh kilo chicken ke pais upper se mera time mere ko waapi chahiy',\n",
       " 'ise bekar biryani ni dekhi pyaj jal gya upar adh chawal b colour ni aya',\n",
       " 'nice recip',\n",
       " 'cute voic killer',\n",
       " 'tri yesterday tasti thank u much',\n",
       " 'mam main kg chiken ki biriyani banana chahti hu kya main tarah bana sakti hu ki time',\n",
       " 'food colour nahi dene se vi hoga kya',\n",
       " 'long video cut describ whole step nice watch video anyon fall love mam thank glad subscrib',\n",
       " 'apko chicken acch se saf krna chaiy',\n",
       " 'watch ur chicken biryani recip realli miss hostel sure tri go home',\n",
       " 'u knw unhealthi ur biriyani becom u add food colour store bought chicken nd biriyani masala u drain ur rice plastic contain seen ur video u alway use non stick mostli everyon still extrem danger',\n",
       " 'khaak coma chalijaa',\n",
       " 'kg chckn much rice need maam',\n",
       " 'tri follow ur step came delici thank u much recip mam',\n",
       " 'hi karnataka bhut hi easi recip hai ek bt hai kya chicken puri tarah se pak jayega kyunki aap ne chicken ko kisi b level pakaya nhi marin kiya hai aur jab last aapn jo low flame rakha kya chicken poori tarah se pakega',\n",
       " 'yeh main tri ki bhut hi laziz bani easi bhi lagi thankyou much mam',\n",
       " 'thank beauti recipe use maida instead wheat flour wrape around handi',\n",
       " 'didi boil rice ghee kyun dalt hain',\n",
       " 'cooker main bana sakt hain kya',\n",
       " 'time consum recip job wala cant give much time prepar',\n",
       " 'mam mettha attar nahi diya apn',\n",
       " 'yeh miytha ya khatta dahi tha mam',\n",
       " 'nice',\n",
       " 'thank maam',\n",
       " 'aur aapn chicken kaccha rkha',\n",
       " 'use instead biryani masala skip',\n",
       " 'tooo gud everyon like thank kabita wonder recip',\n",
       " 'today prepar let see tast',\n",
       " 'chawal kitna daleng',\n",
       " 'food colour dal sakt hai na kaser k bdle',\n",
       " 'kaun sa oil dalu',\n",
       " 'oil kauna sa daleng',\n",
       " 'kyon makhan shi nhi rhega',\n",
       " 'ghee k bdle makhan dal sakt h kya',\n",
       " 'mam main ne tri ki aap ke batay gay tarik se par masala jal gaya puri pate ko chipak gaya q aisa man plz bataiy',\n",
       " 'wow',\n",
       " 'woooooow',\n",
       " 'wao',\n",
       " 'masla jal gya kya kru',\n",
       " 'mam apn pan mei bnai hair pl tell name utensil',\n",
       " 'mam use chicken curri msala instead chicken msala',\n",
       " 'kabita ji thoda bataiy chicken biriyani banan keliy agar hum aluminum pot use kareng kitna total kitna minut ga k uper bithayeng',\n",
       " 'kevda essenc',\n",
       " 'dont like',\n",
       " 'prawn biriyani recip',\n",
       " 'nice',\n",
       " 'sooooper',\n",
       " 'nice',\n",
       " 'hi kabita look yummi suppos use big crockpot make good advic thank share knowledg appreci video',\n",
       " 'show make biryani masala',\n",
       " 'biryani look good think put much garam masala chicken',\n",
       " 'thank u mam',\n",
       " 'mem apki smile',\n",
       " 'biriyani khanek liy adha kilo ata fekana padega isiliy hamko pasand nehi aya',\n",
       " 'ad boneless chicken make differ tast cook method',\n",
       " 'apn alu nahi dala aur chicken ko sirf marin kar ke usa dum mea dal diya apn tu chicken ko marin ke baad fri nahi kiya pleas bhut confus hai next video mea achha se explain karya ga agar koy suggest dena hai tu repli mea de digia ga',\n",
       " 'jal gaya tha',\n",
       " 'kg chiken ke liy kitta rice curd kitta gram lgega',\n",
       " 'kabita mam tri home tast super love delici recip ankita best chef ever',\n",
       " 'easi biryani recip',\n",
       " 'hungri nice biryani',\n",
       " 'mam aapki sari recip mst h',\n",
       " 'hi kabita cook cooker',\n",
       " 'dont pot make layer n cook dt pressur cooker plz suggest utensil thn di pot',\n",
       " 'chicken biryani thank mam',\n",
       " 'tasti biryani',\n",
       " 'jharkhand',\n",
       " 'nyc',\n",
       " 'tri menu piec much time cook',\n",
       " 'plz put recip seeg biryani',\n",
       " 'u make shahi biryani masala',\n",
       " 'kabitaji kg biryani ka ingredi batayiy pleas',\n",
       " 'thank share video',\n",
       " 'ok mast welcom',\n",
       " 'waw nice thank yammi realli',\n",
       " 'mam ye dough toh wast ho jaega',\n",
       " 'cow ghee gagan vanaspati ghee',\n",
       " 'bohat acchi biryani lag rahi hai aaj hi banaungi',\n",
       " 'nice mam',\n",
       " 'use yellow food colour',\n",
       " 'get shahi biriyani masala also chicken masala pleas let know',\n",
       " 'nice video mam',\n",
       " 'super',\n",
       " 'best',\n",
       " 'tste',\n",
       " 'mam biryani ko aur jyada masaledar krne keliy kya krna chahiy',\n",
       " 'like recip',\n",
       " 'chicken gal hi nahi raha esa ku',\n",
       " 'nice mam main banaya bhut testi bani thank',\n",
       " 'nice',\n",
       " 'yummi',\n",
       " 'tasti thank kabita ji',\n",
       " 'yummi',\n",
       " 'mam agr itta tym tk chikn ko naa chlaau wo pan chipkega n',\n",
       " 'thank u sekhani ka liy allah mngheban',\n",
       " 'bhaut easi se mam aap ni bataya',\n",
       " 'hi mam good morn mujh aaj chicken biryani banana hai peopl pl give proport rice curd chicken day made chicken biryani awesom tast love today make biryani guest pl repli',\n",
       " 'aap recip acha banati ho',\n",
       " 'madam briyani ke rice mai shahi jira hota hai',\n",
       " 'hyderabadi biriyani ki koi jawab nehi koi uska samna nehi kar sakta',\n",
       " 'like cook time heat precaut best',\n",
       " 'record video phone camer',\n",
       " 'hello kabita tri chiken biryane',\n",
       " 'super',\n",
       " 'mam ye jo ate ko doug se isko dhakan ke charo taraf lagaya achhes set rakha ne k lia ham kya pressur cooker use nehi kar sakt aur non stick pan k badal normal pan use kareng chiken nich lagega nehi na plz an mam',\n",
       " 'mam bina kesar k ni bn skta kya ghee ki jagah oil use ho skta h kya',\n",
       " 'thank much',\n",
       " 'supop',\n",
       " 'love ur grt cook big fan ur',\n",
       " 'chiken kacha e dal dey gye mai smell aye gi chiken ki mujhi pasnd nai ayi',\n",
       " 'kabita ji chicken uncook hi reh jayega chicken fri place',\n",
       " 'mam much cup gram basmati rice mani piec come gram chicken mention cut chicken piec larg piec mean mani piec come gram cut larg piec',\n",
       " 'khatta dahi add krna h ya meetha dahi',\n",
       " 'ossam mam',\n",
       " 'briyani got popular inlaw credit goe dear thanku much share kepp rock like oli',\n",
       " 'ism konsa flavour ka lagta hai colour',\n",
       " 'tri yummm mam person k liy chaawl chicken dahi piyaz kitna lage ga kitna time cook krna pade ga',\n",
       " 'maem ky hm ise pan k jaga cooker n bna skte',\n",
       " 'pleas tell us use artifici color food recip',\n",
       " 'hello aap k sab recip hm tri krte sab bahut tasti banti thank u much',\n",
       " 'aap ka jawab nahi',\n",
       " 'mumma ne tri kiya tha',\n",
       " 'best recip mam',\n",
       " 'behan pyaz ko fri karna pehl seek lo plz biryani ka mazak mat maro',\n",
       " 'apn rose water screw pine nhi dala',\n",
       " 'colour dalna complsari hai kya',\n",
       " 'mam aalu dalna hua kais daleng',\n",
       " 'kabita mam make chicken biryani follow recip alway came wonder question use proport curd almost gm kg chicken appear lot could suggest much curd rice consid kg chicken',\n",
       " 'video got view red colour rice',\n",
       " 'naaam bada darshan chota satisfi recip lot mistak',\n",
       " 'nice video',\n",
       " 'tri make bt bottom layer get burn tip avoid pleas help',\n",
       " 'pleas advis cook pressur cooker lid cover instead pan air lock dough use heat time cook pressur cooker',\n",
       " 'mam aapki dish hameesha heh bahut aachchi rehti hai',\n",
       " 'badiya nice',\n",
       " 'biggest fan cook kabita sister',\n",
       " 'kabi mayri post ka bhi answer day dia karo dear sister',\n",
       " 'kabita ji wan tri recip chicken masala readi made shayad koi particular name ho haray han agar recip hy bata dain plz masala ki plz waitinf',\n",
       " 'rice use',\n",
       " 'tri hubbi love thank kabita',\n",
       " 'nice',\n",
       " 'quantiti jyada ho dam krne ka tymng rhega ya jyada',\n",
       " 'nice',\n",
       " 'wow tri delici thank',\n",
       " 'kikar thi biryani mai banaya',\n",
       " 'tarik mujh nahi lagta masala aur chiken pak gaya hoga',\n",
       " 'thank much realli help',\n",
       " 'rrt',\n",
       " 'mam plzz make chicken chilli',\n",
       " 'kabita mam nail shukriya ais hi receipi upload kart rahiy',\n",
       " 'use pressur cooker cook rice',\n",
       " 'tasti',\n",
       " 'use cooker instead pan',\n",
       " 'aap log keser use kart hain karo lakin koi aap logo jaisa itna amir nahi hota ki itni mehengi sij kharid sake aap logo ko paisa milta hain hame kiya milega meri gurajih hain ki simpl tarik se khna bani usm jyada atcha hain age se mehengi sij mat batay kyonki sab lob amir nahi hota',\n",
       " 'tri chicken burn bad tri',\n",
       " 'mam mene bhi banai thi ye meri biryani nich se jal gai thi',\n",
       " 'shahi biryani masala',\n",
       " 'kitn log mare ye biryani kha k hehe',\n",
       " 'mam presur cooker',\n",
       " 'wish u wife p',\n",
       " 'sister food color z nt gd fa hlth',\n",
       " 'deserv subscrib mam',\n",
       " 'realli like recip bcz simpl easi quick tasti inde use mace powder instead whole mace',\n",
       " 'nice',\n",
       " 'superb superb chicken biyrin',\n",
       " 'kiti chaan banvali biryani',\n",
       " 'wow',\n",
       " 'awesom easi prepar di',\n",
       " 'kya jada pyaj daln se kuch problem hoga',\n",
       " 'ag kesar nai dale',\n",
       " 'one best outcom wht ive made watch video ju follow wht say done love kabita thank recip',\n",
       " 'tri cook tomorrow',\n",
       " 'nich oil nay daala chicken k toh nich jalega nay chicken',\n",
       " 'wow',\n",
       " 'eat',\n",
       " 'u show u cook n record shoot time wo b itna perfectli',\n",
       " 'way cook hyderabad',\n",
       " 'voic good',\n",
       " 'ook',\n",
       " 'vari nice',\n",
       " 'nice recip',\n",
       " 'mam layer kartr waqt bina kuchh ghee laga k krne se nich nhi lag jayega kya chicken k piec n ham ek layer chicken nek layer rice fie ek layer chicken ek layer rice ais nhi kar sakt kya',\n",
       " 'big fan keep post recip lot love',\n",
       " 'thank u biryani liy',\n",
       " 'keep overnight freez fir marin',\n",
       " 'infreez',\n",
       " 'good recip',\n",
       " 'make without curd shahi biryani masala',\n",
       " 'husband say jadu agaya h tumhr hatho bcoz ur receip thank u much mam lot love',\n",
       " 'nice mam tri thanku itni acchi easi resip ko share kiya',\n",
       " 'ek baat bataiy main suna hai ki non vej se dudh dahi ghi ko dur rakha jata hai aur khane ke se ghant baad hi dudh dahi ghi khana chahiy warna charm rog hota hai aap daal bhi rahi hain sath bat kaha tak sachchai hai',\n",
       " 'mam saffron import',\n",
       " 'mam pleas app ne jo colour use kia hae bo kaha milta hae uska price kya hae bataei',\n",
       " 'kabita mam ur best',\n",
       " 'kabita mam mai aap ki subscrib hu aur aap bahot achchi hai mujh aap ke video dekhna mujh bahot pasant hai like kabita kichan',\n",
       " 'nice plzz telm chicken khucha nai hoga kyunki mein suna tha chicken fri karna hota hai plzzz mera confus dorr karoo',\n",
       " 'ap ki sab recip achi hi hote h',\n",
       " 'mam ur fan',\n",
       " 'love ur biryani made twice everyon love thank u ur wonder recip',\n",
       " 'mam aap ne oil use nhi kya base bhi oil nhi liya plz rep mam',\n",
       " 'time yummi u get',\n",
       " 'layer step want ue microven dum toh mujha kya karni hogi cz ga layer ka band mujha dare lagthi jal na ka plz help microwav dum kais karu',\n",
       " 'descript box lekhna nahi aata lekha kara nah',\n",
       " 'tnx tasti n chicken poora pak gaya tnx love',\n",
       " 'c result baba ji pl meri birayani ban jay thik thik',\n",
       " 'accord good chef',\n",
       " 'yummmmyyyyyyi',\n",
       " 'chicken pakk gayaa hai puri tarah pl tell mam',\n",
       " 'aap ko modi pakoda malum hai anti jii',\n",
       " 'love chicken mam ap chiku ki aur v recip jarur bnay hame btay',\n",
       " 'oil use nhi kyea apna',\n",
       " 'use pressur cooker instead cover top dough',\n",
       " 'niceeeeee',\n",
       " 'nice tri best hyderabadi biryani world famou',\n",
       " 'thank mam',\n",
       " 'easi mam l tri definitli',\n",
       " 'mam biryani dahi skip kar sakt h mere bacch ko dahi se allergi h biryani bina dahi ke ban sakti h kya ya dahi ka koi option h',\n",
       " 'hi tri way littl bit steam come ok done someth rong plz repli st time cook',\n",
       " 'superb',\n",
       " 'ok',\n",
       " 'mam tamatu nibbu yuz nahi krte',\n",
       " 'good',\n",
       " 'hi use sour curd food curd normal sweet curd sorri know noth cook want surpris wife anniversari',\n",
       " 'yummi',\n",
       " 'madam mujh aapki biryani bnane ki trick achhi lagi par video ko kese download karuu',\n",
       " 'tri process today delici bt rice becom dri wonder el cud make rice dri plz suggest',\n",
       " 'main thing make recip look easi',\n",
       " 'use ke ora water pleas repli',\n",
       " 'wife follow recip last night came good ask make tonight',\n",
       " 'kavita madam main toh exactli kiya jais aap dikhay likh mera biryani jaal gaya aisa kiu hua',\n",
       " 'yummi',\n",
       " 'mention ingredi descript box pleas',\n",
       " 'today mom gave tri went unsuccess rice cook well shown video chicken peic complet burnt chicken turn coal heat biryani exact time exact flame shown video spoil plan mayb day',\n",
       " 'tri last month yummi chicken got burnt avoid',\n",
       " 'excel present clean cook keep post n good luck',\n",
       " 'delici kabita ji thank u soo much',\n",
       " 'hi kabita today made chicken briyani per ur video came realli outstand yummi husband love much u made day ur delici yummi tasti briyani love much thnkuuu thnkuuu',\n",
       " 'time enough make chicken tender al dent type',\n",
       " 'marin main oil nahi add karna',\n",
       " 'madam ji chicken mix karn ka tariqa wrong h',\n",
       " 'hello kabita watch video video realli amaz way cook realli appreci keep best luck',\n",
       " 'superb fan cook',\n",
       " 'ghee k badl oil use kar sakt hain kya',\n",
       " 'nice chicken biryani thank video ko bhejn ke liy kavita',\n",
       " 'love u r cook style',\n",
       " 'good biryani made today style',\n",
       " 'gem much love',\n",
       " 'mem ism kesar use krna zruri',\n",
       " 'kabita mam follow u regularli n ur dish nvr fail get appreciaion mother',\n",
       " 'thank share mam',\n",
       " 'pz mam rice ko boil krni ka time batin persent kitna time main boil hoga mra rice kbi ziyada kbi kam soft hota pz batin rice kitna time main boil hoga',\n",
       " 'hungri kabita ji',\n",
       " 'u make everi dish simpl make fall love cook u r bless',\n",
       " 'amaz sure tri tawa cook without dn much longer increas flame non stick pan work',\n",
       " 'agar kg n biryani banay toh time chang hoga ya rahega',\n",
       " 'add instead biryani masala',\n",
       " 'owowwo nice one mam madam parson chiken biryani dum qanti ketna chiya',\n",
       " 'thank recip wonder want add potato step add',\n",
       " 'awesom',\n",
       " 'mam bataiy na ki biryani essenc rose water kewra water marinad karth waqt tsp aur rice ko banath waqt tsp dal sakhti hu pleas mam mera doubt bataiy',\n",
       " 'wow mam nice video thank much',\n",
       " 'mam freez rakhna jaruri kya',\n",
       " 'basmati rice use rose water brand',\n",
       " 'definit gonna tri one last time cook slightli differ recip ad kewra rose water someth went wrong smell overpow aroma biryani mayb misjudg quantiti rose water ad kewra water made tast like agarbatti use rose kewra water essenc',\n",
       " 'kuch oil nehi lagana chahiy masala jal nehi jayega',\n",
       " 'aapn kons brand ka basmati rice use kiya hai',\n",
       " 'kabita u r sch amaz cook',\n",
       " 'mam agar chicken ho toh kaisay bansakhtay hai aur agar zaida banai ho matlab ppl kay liy',\n",
       " 'ye pak chuki hogi madam chicken piec',\n",
       " 'hey kabita aap kaunsa brnd ka pan aur vessel use krtihe',\n",
       " 'kya hum biryani ko pressur cooker bana sakt hai',\n",
       " 'chicken cook well pretti sour tast due curd tast like shit',\n",
       " 'nice ji',\n",
       " 'kabita ji apki recip dekhn pehl like kr diy apki sari recip achhi hoti h',\n",
       " 'nice prepar tri nirmal',\n",
       " 'kabita mam went recip chicken dum briyani earlier ad briyani essenc kewra water rose water briyani add put much add marinad cook rice',\n",
       " 'hii kabita didi mein aaj aapki yeh recip tri ki hai bohot sundar dikh rahi hai abhi todo ter mein readi ho jayegi fir tast kark aapko repli deti happi makar sankranti',\n",
       " 'skip black cardamom chang tastr',\n",
       " 'yammmi',\n",
       " 'sara blood lga tha dhekhn k bad hme chicken bireyani se nafarat ho gai',\n",
       " 'mam apn chiken dhoya ni',\n",
       " 'thanku di',\n",
       " 'wowwwww super mam tri tomorrow',\n",
       " 'bhabhi mere liy ek plet parsal kardo n pleas',\n",
       " 'mam agar last mein rice mein thodi si kasar kani reh jay mean kach reh jayein wat wud solut',\n",
       " 'nice',\n",
       " 'aapki voic bohut achhi hai',\n",
       " 'mam agar nonstick pan na ho tho chicken jalega na',\n",
       " 'acha banaya apn madam',\n",
       " 'cute',\n",
       " 'nice kabita ji',\n",
       " 'zam zam biryani dikhay na',\n",
       " 'ais banti biryani',\n",
       " 'chicken biryani recip',\n",
       " 'mam plz chicken corma ki recip baty',\n",
       " 'nice',\n",
       " 'yummmmyy',\n",
       " 'mine aaj banai biryani',\n",
       " 'u r tip r realli good',\n",
       " 'link recip pleas',\n",
       " 'mem agar kg biryani banay kitna kitna dalna padega sab chiz',\n",
       " 'mam kya mein biryani essenc rose water kewra water sab tsp marin karth waqt aur rice baneth waqt tsp dal sakhti hu aur dhakad phool marinad karth waqt aur rice baneth use kar sakhti hu aur agar use kar sakhti hu tho kina dhaakad phool use karu mam pleas repli',\n",
       " 'mam alway see ur recip realli like ur recip',\n",
       " 'didi mera nich sab jal gya aaj tri ki di jal gya sab',\n",
       " 'mam ur chicken biryani outstandig like ur recipi',\n",
       " 'dislik comment',\n",
       " 'didi mujh biryani ki dukan kholni h har baar chicken jal jata h aachi tarah seal karn ka tareeka batayein jiss bhaap bahar na nikl pleas bhut zaroori h',\n",
       " 'gram chiken se jada nahi bana shaktya key',\n",
       " 'k thank mam',\n",
       " 'welcom mam',\n",
       " 'ye pressur cooker ho skta h kya',\n",
       " 'hii mam ye biryani hum aluminim jarmal ke bhagon bana sakt hai kya plz repli',\n",
       " 'ye nich se chipkega nai',\n",
       " 'tri recip everyon like thank kabita',\n",
       " 'hello mam aap ki har recip bhut bdhiya hoti hai',\n",
       " 'mam ek question hei chicken ko cook nhi korna hei',\n",
       " 'infreez cant wr keep room temp',\n",
       " 'thank video biryani amaz expect tast guy plzzz watch video u r prepar',\n",
       " 'gaavran chicken use kar sakt kya',\n",
       " 'cook rice two time think need cook rice cook chicken cook yet know could somebodi tell like mayb basmati rice strong differ smell anyway love pakistani food',\n",
       " 'thank much video',\n",
       " 'omg best recip mom cook togeth follow recip turn good finger like good make sure share channel friend famili thank much recip pleas upload video like',\n",
       " 'kavita mam apn direct chicken marin kar k biriyani banayi ism chicken achha se boil hoga na aur chawal jal ni jayega',\n",
       " 'thanku mam apk ai recip bohot help hai thanku',\n",
       " 'aami ki ektu oil use kort pari',\n",
       " 'ei biriyani tee kono oil use nei',\n",
       " 'ami ajk banacch ei ta',\n",
       " 'good',\n",
       " 'superb kabita',\n",
       " 'wow',\n",
       " 'wow mom home tri biryani',\n",
       " 'add black chilli',\n",
       " 'mam mu karithili je pita lagila',\n",
       " 'use aluminium foil instead flour',\n",
       " 'aaataa lagaan k badl agr biriyan coocker dam ko rakh tho kaisa hai',\n",
       " 'like cook',\n",
       " 'pleas mam bataiy',\n",
       " 'mam ism curd milana jruri hai',\n",
       " 'yammi',\n",
       " 'agar chicken pakayng nhi kacchha nhi lgega',\n",
       " 'mam kya mein tsp tandoori chicken masala dal sakhti hu tast',\n",
       " 'christma pakka nd sister make biryani',\n",
       " '',\n",
       " 'nice video',\n",
       " 'kabita neat perfect recip love hope get recip mainli chicken mutton egg fish',\n",
       " 'kabita mem tank aj tri kiya',\n",
       " 'mam chicken nich lag jaati koi trick hain jiss wo nech lage nai',\n",
       " 'like style',\n",
       " 'thankyou mam prepar dish wife',\n",
       " 'thank aunti',\n",
       " 'nice recip',\n",
       " 'zaiqa e yasmin also good',\n",
       " 'kya ism rose water dal sakt h',\n",
       " 'nice',\n",
       " 'kavita main bhi tri kiya mere famili guest ko paasand ayi main ye recip sab kay sath share kee',\n",
       " 'nice thank much',\n",
       " 'good',\n",
       " 'aata kya vo wast ho jaega',\n",
       " 'nice biryani mam',\n",
       " 'mam shahi biryani masala ki jagah chicken biryani masala use kr sakti',\n",
       " 'mujh question puchna ha aap kitna litr ka pot ye biryani banayi ha mera pot cover karn ke liy glass lid diya gaya ha kya biryani ko dum dene ke liy glass lid ko aata se cover kar sakta hu kya iss biryani pudina use nhi karn se chalega mean use nahi karn se tast kharab nhi hoga na kindli repli',\n",
       " 'agar biriyani jal jayaga hum kaya kara',\n",
       " 'superb',\n",
       " 'fridg mean defridg',\n",
       " 'mere pa pudinapatta nehi hein koi kuch dal sakti hun bataiye kal morn mein banungi',\n",
       " 'thank u much give nice idea make biryani',\n",
       " 'nice way make dum biryani',\n",
       " 'awesom made dish today turn tasit thank lot',\n",
       " 'kabita mam kya mein black jeera tsp marinad kart waqt aur rice banat waqt tsp use kar sakhti hu',\n",
       " 'thank advis k liy age tri karungi',\n",
       " 'good',\n",
       " 'kesar kon wala h eag kesar use kr skte h kya',\n",
       " 'tank',\n",
       " 'confus',\n",
       " 'mam rice ki quatiti cup mai tell kari plz kitnay cup rice leay apnay cup size plz',\n",
       " 'sorri kavita ji bura mat maniy jo mera experi wo share kiya pura ghar pareshan ho gaya bhuk se abhi khayi pura ghar dantn laga k apn ye kya bana diya',\n",
       " 'pata ni kesi biryani itna time lag gaya biryani jal gayi nich se sari ki sari ism photo option ni warna apko daal deta chicken pata hi ni kaha gaya sara jal gaya',\n",
       " 'wow',\n",
       " 'steam nikla',\n",
       " 'superrr mam',\n",
       " 'hello aunti pleas adopt',\n",
       " 'look tasti make today',\n",
       " 'mam kya mein green chilli ka past use kar sakhti hu',\n",
       " 'nice one',\n",
       " 'mam thand k mosam bina freez rakh v marin ho skta h kya',\n",
       " 'like ur reciepi nd gud job di',\n",
       " 'nice',\n",
       " 'kabita ji ur small littl fan',\n",
       " 'superb',\n",
       " 'behan piyaj kiya hota hao',\n",
       " 'super mam',\n",
       " 'use steel pan ye stop chicken get burnt',\n",
       " 'mane banaya tha habbi huya tha',\n",
       " 'mam mene ek baar banaya color konsa use karna hoga',\n",
       " 'nice',\n",
       " 'hungri',\n",
       " 'hello aap ki recip follow ker ti hu ye briyani bani per meri briyani chicken jal gya nich se time asa hua time jo aap ne batya hai wo hi kiya tha',\n",
       " 'aap bht piyari lagti hai awr bht meetha bolti hain',\n",
       " 'mam itni time main ey jalega toh nahi na nich se',\n",
       " 'good',\n",
       " 'v v v v good',\n",
       " 'nice thank',\n",
       " 'love u yar',\n",
       " 'didnt know put ghee moistur rice',\n",
       " 'hydrabadi bryani lemon juic b daltey hai briyani dum denay pahlay humloag',\n",
       " 'pl write ingredi',\n",
       " 'pagal ho kya aap kuch bhi bnati ho aap jb chiken kacha hai rice pakka huwa hai jb usko hum payeng tb chawal gal jayenga samjhi aap meri bahan ji',\n",
       " 'kavita mam kya ham khade masalo ko grinder mix kark daal sakt hai',\n",
       " 'marin chicken overnight soft tast would odd',\n",
       " 'tri',\n",
       " 'mujh nhi aata tha kuch v bana apk video se mai bahot ach se bana pai nice',\n",
       " 'food colour naaa',\n",
       " 'majedar biryani definit go make sure love u thank u much mam',\n",
       " 'nice recip like',\n",
       " 'yummi tri',\n",
       " 'mam kya mein hour ke liy chicken ko marinad kar sakthi hu',\n",
       " 'hello mam aaj humn pehel bar ehi recip banai thi realli mam awsm n yummi',\n",
       " 'meri maa ne kaha ki tel mat kharab kar gst ke baad mehga ho gaya hai',\n",
       " 'gajab ek bani',\n",
       " 'favorit perfect',\n",
       " 'cook use pressur cooker without whistl chicken cook',\n",
       " 'wow kabita mam tasti',\n",
       " 'leav note appreci biryani recip big hit home much stop order biryani look forward recip',\n",
       " 'hello kabita best job recip perfect good keep go best luck',\n",
       " 'nice',\n",
       " 'jab itni der tak paka rahe tab oil nahi pani kuch vi nahi dya chicken aur rice k nich masala aur chicken jal nahi jayega pleas repli',\n",
       " 'mam ye biryani jo apn banaya hain ye kitn logo keliy hain',\n",
       " 'made biryani yesterday turn like ur actual masala chicken lot co like gravi use less dahi rice pl tell',\n",
       " 'wow',\n",
       " 'mei hostel rhta hu waha fridg ni h aisa jruri h kya k chiken ko marin krne k bad usko fridg rkhna jruri h plz let know',\n",
       " 'perfect',\n",
       " 'hiii mam meri biryani niches jal gayi thi kya kare mean kya krne ka',\n",
       " 'tri tonight websit link forgotten add salt chicken marin guess rectifi',\n",
       " 'mashaallah bhot umda',\n",
       " 'kabila ji great recip thank',\n",
       " 'hello kabita mam prepar shahi biryani masala powder get outsid',\n",
       " 'thaq kabitha ji',\n",
       " 'salaam kabeta ne apko subscrib kyia thank much',\n",
       " 'bht hi zda tast bani thi bryni mai bi ap jaisa dikhay waisa hi banayi thi mere hsbnd ko bht zda psnd ayi bht khush huw mere hsbnd thnk u much di',\n",
       " 'kabita mam kya mein chicken masala garam masala shahi biryani masala jeera powder coriand powder nutmeg powder ke saath black pepper powder add kar sakth hain kyunki mujh best hyderabadi style chicken dum biryani ka flavour chahiy pleas mam repli',\n",
       " 'meri biryani hamesa nich se jaljata hai kyu plz repli',\n",
       " 'chiken mai dahi daln se kya hota hai aunti',\n",
       " 'nice voic',\n",
       " 'best mam million view still count keep mam',\n",
       " 'chan',\n",
       " 'want tri di',\n",
       " 'ghee kon sa deshi',\n",
       " 'hi kabita nice recip pleas tell brand kadai use fri onion like design',\n",
       " 'kabita mam import keep tava keep stove top low flame plz repli',\n",
       " 'mam zruri ni hy na k shahi biryani masala dalna agar na ho',\n",
       " 'st time abl make yummi chicken dum biryani earlier made sever unsuccess attempt thank much',\n",
       " 'nice',\n",
       " 'thanxx mam mei tri krugi',\n",
       " 'mam kesar compulsori hai kya',\n",
       " 'made biryani awesom everyon home like realli much thank much keep post',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'horribl tri bt hmko pasnd nhi ayi chiken ws cook get cook oil dont like apki saro recip bshut acchi hoti h bt yeh wali tri krne k bad feel k soch smjh k banay',\n",
       " 'plz repli',\n",
       " 'hmm biryani look yummi',\n",
       " 'fb par ka name ha',\n",
       " 'kavita mam agar rice n chicken ki quantiti zada le dum k lie time kitna dena hoga',\n",
       " 'mujh aap ki recip achi lagi hai fb par kya naam hai',\n",
       " 'kabita mam marinad karth waqt kitna spoon salt add karna hain',\n",
       " 'nice',\n",
       " 'hi',\n",
       " 'tri biryani recip kabita ji realli appreci hard work',\n",
       " 'nice',\n",
       " 'di ye chicken biyani bhagol bana sakt h plz give an',\n",
       " 'mam hyderabadi recip mein thoda sa lime juic dalth hain tho hyderabadi flavour mein thoda sa lime juic tho dal sakthi hu mam bataiy na pleas ki kitna spoon lime juic dal sakhti hu kindli repli bahut import doubt hain kabita mam',\n",
       " 'thanku mam aap good ho',\n",
       " 'mam spoon ghee matlab tblspn tsp',\n",
       " 'kabita mam put bay leaf marinad',\n",
       " 'tho marinad karth waqt chicken ginger garlicpast pudina coriand leav black elichi green elichi cinnamon clove javitri curd green chilli salt haldi chilli powder garam masala coriand powder jeera powder shahi biryani masala tsp nutmeg powder ke saath spoon ghee aur onion dalthi hu',\n",
       " 'kabita mam mein kitna spoon ghee dalu marin karth waqt aur kitn onion dalu marin karth waqt',\n",
       " 'r u sure chicken paak jayega ussay rice ki tarha pehlay thoda pakkanay ki jarurat toh nahi hai',\n",
       " 'kabita mam superb recip clear video clearli explain origin hyderabadi biryani recip',\n",
       " 'mam mein kitna spoon nutmeg powder add karu pleas bataiy',\n",
       " 'nic',\n",
       " 'mam kya hum thoda sa nutmeg powder dal sakth hain matlab apka opinion kya hain matlab coriand powder garam masala powder aur jeera powder ke saath acha lagega ya tast spoil hoga apka opinion kya hain',\n",
       " 'biryani masala kais bnaat hai market kbhi mila nhi',\n",
       " 'hi mme kind water u use make dough cold warm',\n",
       " 'hello mme r u nice briani ask u someth u mind u put water cook stick pan without water',\n",
       " 'apn video bht hi detail se sab btaya hai',\n",
       " 'yummi',\n",
       " 'super mam',\n",
       " 'wow great recip thank video',\n",
       " 'kilo biryani ke liy masala kitna lage ga',\n",
       " 'mam tho mein coriand powder jeera powder garam masala powder sab tsp dalu pleas bataiy',\n",
       " 'mam aur jyada matlab tsp chalega mam apka opinion kya kitn spoon dalu pleas bataiy',\n",
       " 'mam apn ghee tblspn use kiya har layer mein tho mein tsp use karu matlab apn bola na ki aada quantiti use kijiy tho tsp dalu',\n",
       " 'mam mein patanjali cow ghee use kar sakthi hu',\n",
       " 'mam kya hum cow ka ghee ghar per bana sakth hain kyunki bahar ka qualiti acha nahin hain',\n",
       " 'seal karn cooker blast hoga kon zimmedaar hoga',\n",
       " 'tri right wish luck',\n",
       " 'dewsi ghee mean cow ghee',\n",
       " 'doodh mein kesar full night tk bhigok rkhna hai yaa instant',\n",
       " 'make shahi biryaani masala',\n",
       " 'kouc test nai hai wat video',\n",
       " 'kya ghee import hain',\n",
       " 'perfect receip',\n",
       " 'waaaw tasti biryani myney aaj banaya hey tast yummmm',\n",
       " 'sorri comment',\n",
       " 'asi chicken kachi rhygi',\n",
       " 'apni chicken pakya e ni',\n",
       " 'chicken andar kaccha nehi raheha',\n",
       " 'good',\n",
       " 'kounsa chawal achha rahegaa matlab long grain rice ka name jo aap',\n",
       " 'awesom recip',\n",
       " 'mujh aap ki help chahiy mam mujh yeh biriyani person k liy banana hai pl batayeng sare ingredi ka kitna kitna measur rahega iss dushera guest aayeng ghar pe plss bataiyeh k kais yeh jyada achha banega',\n",
       " 'kewra water aur rose water add karn ke baadh mein saffron milk aur orang colour add kar sakthi hu pleas bataiy kabita mam kyunki kewra water aur colour ka chemic reaction tho nahin hoga',\n",
       " 'aur hame kitna spoon coriand powder aur jeera powder aur garam masala powder add karna hain',\n",
       " 'kya hum normal rice use kar sakt mam pleas bataiya kyunki hame apk recip ko dekhkar sabs best christma dish banana hain',\n",
       " 'kya mein coriand powder jeera powder ke saath garam masala bhi add kar sakthi hu marinad karth waqt pleas bataiy kabita mam',\n",
       " 'like cook',\n",
       " 'thank god subtitl look pretti easi thank',\n",
       " 'hi mam saw recip channel name dark moon entertain thought tell u',\n",
       " 'ooh ok',\n",
       " 'aap non veg dish mat banaya kro veg veg jayada tasti hota hai',\n",
       " 'kya mein dhania powder aur jeera powder marinad karn ke liya use kar sakt hun ya biryani ka tast spoil hoga',\n",
       " 'awesom biryani mam',\n",
       " 'great resipi',\n",
       " 'bakwash',\n",
       " 'nice',\n",
       " 'iam done enjoy',\n",
       " 'thank kavita share di yummi recip made today n made delici thank',\n",
       " 'nice',\n",
       " 'bt great video',\n",
       " 'mujh sirf khaan maza aata hai',\n",
       " 'agar pudina patta na ho uski jagah kya use karna hai kyuki humar yaha ye easili market may nai milta hai plz advic',\n",
       " 'first time ever cook biryani treat mom follow everyth said n cook best biryani ever tast thank perfect recepi instruct',\n",
       " 'competit tast ye briyani achi hai ya appki pressur cooker wali achi hai plz repli fast muje sunday ko banani hai',\n",
       " 'kya badi elichi import hain kyunki yaha shop mein avail nahi hain',\n",
       " 'kabita love biriyani thank u idea',\n",
       " 'hello kavita mam tri recip follow ur step step instruct biriyani turn awesom thank wonder recip detail',\n",
       " 'woow maam need thank lot ye bahot asan lg tha ab definit tri',\n",
       " 'wow tasti',\n",
       " 'reali awesom testi tha biriyani thank lot mam',\n",
       " 'osmmmm',\n",
       " 'definit tri',\n",
       " 'wow nice n ur explan made easi maam need fri chicken directli put marin chicken',\n",
       " 'thank madam',\n",
       " 'nice',\n",
       " 'love cook find best chef youtub trust u r best chef among chef',\n",
       " 'super duper',\n",
       " 'thank ji',\n",
       " 'hn saari biryaani jala di dikh rha hai vo nikalt time',\n",
       " 'madam use plastic stainer plastic tool hot food',\n",
       " 'use doubl dose saffron skip orang color also stand fresh coriand leav make sick tast like stink bug use parsley',\n",
       " 'kabita di aapki bhut bdi fan hu aaps milna chahti hu kolkata v kolkata se hi hu di',\n",
       " 'nice',\n",
       " 'aap koun si chawal use kartehain mam',\n",
       " 'main tri kiya tha',\n",
       " 'thxz kavita mam im frm punjan india tri definetli tri thxz fr video',\n",
       " 'hi kavita today tri ur biryani recip realli yummi thank',\n",
       " 'nice yummi',\n",
       " 'normal flame chicken kais paka madam tumhara bet chicken paka hi nahi hogaa tumhara',\n",
       " 'ok ty mam',\n",
       " 'like dish',\n",
       " 'cook biryani sinc long see recepi tri unfortun chicken bottom layer get burnt stick step still abl come issu could pleas suggest exactli may go wrong',\n",
       " 'nice recip mam tasti',\n",
       " 'compani basmati rice use',\n",
       " 'thank actual show recip dum style peopl mix rice chicken fulli cook call dum biryani',\n",
       " 'tri soon',\n",
       " 'ghee se zyada moistur hogya tha oil daln se kam hota h kya',\n",
       " 'freez chicken ni rkhe kya kr skte h usk jgh plz say',\n",
       " 'ok kavita ji thank much',\n",
       " 'kuch samajh nahi aya',\n",
       " 'khala ap ne aloo tu dalay hi ni',\n",
       " 'kavita ji main saudi main hu ye sari cheez main kaha se lao jo aap ne batayi hai',\n",
       " 'thank u mam',\n",
       " 'chhota bada chamach ka size hous hous differ karta h plz aap quantiti jab batat h tab spoon size ko dikha digiy video',\n",
       " 'mujh khana hai ye biryani par mujh banan nahi aata',\n",
       " 'profi thank inform',\n",
       " 'marin chicken night keep fridg',\n",
       " 'mam biriyani hi hoto iski serv kiyni hongi',\n",
       " 'much quantiti want make one person',\n",
       " 'tri son ask everi sunday',\n",
       " 'made tast awsm gr easi recipi',\n",
       " 'color mandatori',\n",
       " 'hi kabita tri recip today turn awesom everyon famili like thank',\n",
       " 'vri nice',\n",
       " 'pleas make video zam zam pulao search tasti zam zam pulao recip mani day get suitabl recip wait zam zam pulao recip mam',\n",
       " 'hous veryyyyyyyyyyyyyyyyyyyyyyyy beauti',\n",
       " 'kg ka bane se itna hi time ho ga',\n",
       " 'agr ism potato bhi add krna ho usko chicken ke saath marin krke daleng plz btay',\n",
       " 'last part dough cap od like liter u need part',\n",
       " 'chiii mene tri ki ghr pr biryani ki naam ki insult h ye plzz guy koi tri mt krna ghr pr',\n",
       " 'cook today chicken dum biryani cook fast time awesom think help wapsid',\n",
       " 'plz mem shahi paneer daal makhni bna sakt ho kya',\n",
       " 'mam ham kaleji deal sakt h',\n",
       " 'also tri recip nice',\n",
       " 'meri birayani achhi bani thank kabita nice recip',\n",
       " 'main abhi bana rahi hun',\n",
       " 'cook today',\n",
       " 'eg n yummi rcp mam thank',\n",
       " 'tasti like',\n",
       " 'mam want tri chicken kchcha ni rhega ya koi smell ni aaegi plz tell',\n",
       " 'thank madam ji',\n",
       " 'mashaallah',\n",
       " 'use coriand powder biryani requir',\n",
       " 'aapn jo rd stage main layer main kya mujh ghee ya oil dalna hain chicken daaln se pehl apn nahi daala im confus pleas help',\n",
       " 'hey tri super se upar thanx ton keep shine',\n",
       " 'good video sorri say hyderabadi chicken biryani',\n",
       " 'javtre',\n",
       " 'actual ek doubt yahan pe chicken aches pakta nhi hoga kyun ki marin k bad direct rice dal rahe ho app u pleas explain mam',\n",
       " 'nice real video',\n",
       " 'yu r good mam apki recepi ko explain krne k way bhot acha hai',\n",
       " 'nice tasti recepi',\n",
       " 'dish awsom',\n",
       " 'mene aaj banai awesom realli tasti',\n",
       " 'nice',\n",
       " 'sorri sweet',\n",
       " 'good',\n",
       " 'look yakhni biryani recip find',\n",
       " 'like biriyani',\n",
       " 'bina pani ka jal jayega',\n",
       " 'yummmmmi',\n",
       " 'ok biriyani ka jo atar mitha atar hota hai usko ap nahi diya jism se bgiriyani ka orgin cent atehai',\n",
       " 'agar fridg na ho kese banayeng',\n",
       " 'kukar ka istem kr skte hai kya',\n",
       " 'mam curd sour lena hai pleas reapli an mam',\n",
       " 'tooooo yummmmmmmmmyyyyyyyyyy',\n",
       " 'awesom',\n",
       " 'aap ne oil tho dala hi nahi',\n",
       " 'lolllll yeh biryani hai ya sabji ese todhi na banti hai pagal biryani',\n",
       " 'watch middl night mcdonald option guess',\n",
       " 'kesar necessari food colour',\n",
       " 'ingredi use high compar briyani made good',\n",
       " 'mast h mam tri today',\n",
       " 'nice one',\n",
       " 'v nice',\n",
       " 'main aaj tri ki bohot tasti bani thi thank alot',\n",
       " 'main tri kiya ye last friday ko n delici n awsm',\n",
       " 'kabita ji aapn khosboo k liy kuch use nahi kiya',\n",
       " 'kabita ji want tri pleas aap mujh batayeng chawal long aur fluffi kais banega main jitna bhi high qualiti ka basmati rice liya magar wo restaur jaisa long fluffi nahi banta ha pleas repli',\n",
       " 'thankyou kabita kitchen',\n",
       " 'kg chicken ke liy aur kitni quantiti masal add karna padega aur rice k bhi kitni quantiti badani padegi',\n",
       " 'easi process mam thank',\n",
       " 'owsom',\n",
       " 'nice biryani',\n",
       " 'maza aagaya kasam se sanjita',\n",
       " 'surelli tri shraavan',\n",
       " 'mam boneless chicken use karna ho kitni der pakana hai kyun ki bahut jaldi gal basra hai',\n",
       " 'fridg vegetarian',\n",
       " 'hello kabita mam ghee vanaspati pure ghee pleas repli quickli',\n",
       " 'love kabita aunti kitchen',\n",
       " 'muze aisi biwi chahiy jo sirf khana achcha banan wali ho baki samhal lunga',\n",
       " 'mam pleas kg biryani ke liy video banao',\n",
       " 'mam chahwal ko bhogona adha ghntta ya sirf ubalna',\n",
       " 'hai',\n",
       " 'help thank recip cook today yummi',\n",
       " 'nice mam thank u',\n",
       " 'u make khichda plz',\n",
       " 'nice',\n",
       " 'mam ba hr marin krke nd fir ba dum pe chadha k chicken pakk jayega kachha reh gya',\n",
       " 'vo jo chicken k badhey piec h vo jalt ni h proper cook ho jate h',\n",
       " 'mam chicken biryani tast coriand biryani take risk recip hydrabadi',\n",
       " 'kabita ji kya dahi dalna zrori',\n",
       " 'javitri matlab',\n",
       " 'ohhhhhhhhhhhhhh nice',\n",
       " 'aap cook bahut acchi karti hai aap apna naam batay kyuki mujh aaps biryi sikni hai',\n",
       " 'bahut bariki se aapn batya hai mam',\n",
       " 'hi kabita today tri chicken biryani recipi first time life cook recipi tell absolut fantast shocj wish could tast thank wonder recipi tc gd bless',\n",
       " 'osm',\n",
       " 'thank lot recip never knew first tri would success',\n",
       " 'first briyani trust awesom big thank kabita kitchen',\n",
       " 'jst cook biryani trust guy realli good jst follow process step step told u end super tasti lip smack biryani kabita didi ur best thank u much',\n",
       " ...]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# APPLYING THE FOLLOWING PARAMETRIC AND NON PARAMETRIC MACHINE LEARNING MODELS "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LIST OF MACHINE LEARNING MODELS APPLIED\n",
    "\n",
    "1)GAUSSIAN NAIVE BAYES (PARAMETRIC)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2)BERNOULLI NAIVE BAYES (PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3)SUPPORT VECTOR MACHINE WITH LINEAR KERNAL (PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4)SUPPORT VECTOR MACHINE WITH POLYNOMIAL KERNEL (PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5)SUPPORT VECTOR MACHINE WITH GAUSSIAN KERNEL (PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6)RANDOM FOREST (NON PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7)DECISION TREE (NON PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8)LOGESTIC REGRESSION (PARAMETRIC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GAUSIAN NAIVE BAYES MODEL USING COUNT VECTORIZER (KB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the dataset into the Training Set and Testing Set\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train_cv1, X_test_cv1, y_train_cv1, y_test_cv1 = train_test_split(Xk_c,yk_c,test_size = 0.2,\n",
    "                                                   random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None, var_smoothing=1e-09)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training the Naive Bayes model on the Training set\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "nbk = GaussianNB()\n",
    "nbk.fit(X_train_cv1, y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.43367347, 0.46938776, 0.52806122, 0.44897959, 0.46173469,\n",
       "       0.42091837, 0.44897959, 0.43367347, 0.4744898 , 0.48214286])"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_nb_cv = cross_val_score(estimator=nbk, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_nb_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 7, 3, 4, 4, 3, 2, 2, 2, 4, 7, 4, 4, 3, 1, 3, 2, 4, 1, 6, 1, 7,\n",
       "       6, 5, 2, 3, 1, 3, 1, 1, 1, 5, 4, 2, 7, 3, 3, 6, 3, 1, 5, 7, 5, 6,\n",
       "       1, 1, 2, 4, 7, 1, 7, 2, 5, 3, 2, 1, 3, 1, 3, 4, 1, 5, 1, 7, 6, 2,\n",
       "       2, 1, 4, 2, 2, 2, 3, 2, 2, 7, 6, 3, 2, 1, 1, 3, 3, 2, 4, 3, 3, 6,\n",
       "       6, 3, 4, 3, 4, 2, 4, 7, 4, 1, 4, 5, 6, 7, 2, 5, 2, 2, 5, 5, 6, 2,\n",
       "       2, 2, 7, 5, 1, 4, 3, 4, 1, 4, 5, 3, 7, 1, 2, 4, 3, 5, 2, 7, 7, 1,\n",
       "       5, 7, 6, 5, 2, 6, 2, 3, 4, 3, 3, 1, 1, 5, 4, 5, 6, 1, 1, 2, 1, 2,\n",
       "       6, 7, 2, 5, 5, 5, 1, 2, 1, 2, 2, 5, 1, 3, 1, 6, 3, 2, 7, 1, 6, 4,\n",
       "       2, 3, 6, 3, 2, 6, 2, 7, 1, 6, 5, 4, 7, 6, 7, 2, 3, 2, 1, 6, 1, 1,\n",
       "       2, 1, 1, 7, 7, 7, 1, 1, 2, 7, 2, 2, 1, 7, 5, 7, 4, 1, 3, 2, 7, 5,\n",
       "       3, 3, 1, 2, 1, 6, 1, 7, 2, 1, 2, 2, 7, 3, 5, 7, 1, 1, 3, 1, 3, 1,\n",
       "       4, 1, 3, 6, 1, 1, 3, 2, 2, 2, 3, 4, 2, 2, 2, 2, 1, 3, 6, 3, 3, 3,\n",
       "       1, 3, 7, 2, 6, 1, 1, 2, 4, 1, 1, 5, 7, 2, 5, 2, 1, 2, 1, 2, 3, 2,\n",
       "       3, 6, 4, 5, 3, 2, 3, 6, 4, 5, 3, 4, 6, 4, 4, 1, 4, 2, 1, 2, 6, 3,\n",
       "       6, 3, 7, 2, 3, 2, 5, 3, 2, 5, 2, 2, 2, 7, 3, 1, 5, 5, 4, 1, 2, 7,\n",
       "       4, 2, 3, 5, 6, 7, 3, 1, 5, 3, 6, 2, 3, 7, 1, 1, 5, 1, 7, 5, 2, 5,\n",
       "       1, 1, 3, 2, 5, 2, 3, 2, 7, 2, 1, 3, 7, 2, 4, 7, 2, 4, 6, 2, 2, 6,\n",
       "       7, 1, 6, 2, 3, 2, 3, 1, 7, 5, 7, 6, 4, 5, 3, 3, 3, 4, 2, 3, 1, 1,\n",
       "       1, 6, 3, 7, 5, 7, 3, 6, 5, 3, 2, 2, 5, 2, 7, 5, 1, 2, 6, 1, 7, 7,\n",
       "       4, 3, 3, 1, 1, 4, 1, 2, 7, 5, 4, 3, 2, 3, 1, 6, 2, 5, 5, 2, 7, 4,\n",
       "       5, 3, 2, 2, 3, 2, 3, 2, 6, 4, 3, 3, 3, 2, 7, 2, 3, 7, 3, 1, 3, 7,\n",
       "       3, 1, 3, 2, 4, 3, 1, 7, 3, 1, 2, 1, 7, 4, 5, 2, 2, 2, 3, 4, 2, 6,\n",
       "       4, 1, 1, 7, 3, 1, 5, 5, 2, 1, 4, 2, 2, 5, 3, 2, 3, 5, 1, 2, 7, 1,\n",
       "       2, 1, 5, 3, 2, 2, 1, 3, 7, 4, 6, 7, 5, 2, 5, 2, 7, 3, 7, 4, 7, 3,\n",
       "       3, 1, 1, 1, 5, 7, 5, 6, 3, 3, 1, 3, 7, 6, 1, 2, 1, 2, 2, 6, 3, 3,\n",
       "       7, 2, 7, 3, 2, 3, 5, 3, 2, 2, 1, 1, 3, 2, 3, 1, 7, 7, 5, 2, 3, 6,\n",
       "       3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 1, 6, 4, 2, 2, 3, 7, 2, 7, 7, 4, 3,\n",
       "       2, 1, 2, 3, 5, 7, 6, 2, 2, 1, 3, 2, 2, 7, 2, 1, 2, 4, 3, 5, 4, 7,\n",
       "       1, 4, 3, 7, 3, 6, 3, 7, 3, 2, 2, 1, 3, 1, 2, 4, 1, 1, 1, 3, 5, 3,\n",
       "       2, 4, 2, 3, 1, 1, 3, 1, 5, 3, 7, 3, 7, 6, 3, 7, 3, 2, 2, 5, 1, 2,\n",
       "       3, 5, 3, 5, 1, 3, 3, 1, 3, 5, 1, 2, 1, 6, 7, 5, 2, 6, 7, 2, 1, 3,\n",
       "       4, 2, 2, 1, 5, 2, 7, 1, 3, 3, 1, 2, 5, 5, 7, 5, 4, 3, 1, 3, 3, 1,\n",
       "       3, 7, 3, 1, 5, 7, 3, 5, 2, 3, 3, 1, 1, 5, 7, 1, 3, 4, 1, 5, 2, 2,\n",
       "       2, 2, 2, 1, 2, 1, 1, 3, 5, 5, 2, 7, 4, 2, 3, 5, 3, 4, 3, 4, 6, 1,\n",
       "       2, 7, 7, 4, 1, 5, 7, 4, 1, 1, 3, 1, 2, 3, 4, 7, 3, 3, 3, 4, 2, 5,\n",
       "       2, 4, 2, 2, 3, 5, 1, 2, 4, 3, 3, 5, 2, 5, 5, 3, 4, 4, 2, 4, 5, 7,\n",
       "       2, 3, 7, 2, 1, 6, 3, 1, 4, 3, 5, 2, 2, 1, 5, 5, 2, 1, 1, 3, 6, 7,\n",
       "       3, 3, 2, 4, 6, 3, 3, 2, 3, 1, 1, 2, 3, 3, 7, 6, 2, 4, 5, 1, 2, 5,\n",
       "       5, 3, 3, 3, 2, 5, 3, 3, 1, 3, 5, 3, 2, 3, 2, 5, 6, 5, 5, 1, 2, 1,\n",
       "       1, 1, 1, 5, 1, 3, 2, 3, 1, 4, 4, 3, 1, 3, 7, 3, 3, 1, 1, 5, 2, 2,\n",
       "       7, 4, 4, 2, 5, 3, 5, 3, 3, 3, 6, 7, 6, 5, 2, 1, 2, 1, 4, 5, 7, 1,\n",
       "       7, 2, 1, 2, 2, 2, 1, 3, 7, 3, 3, 3, 1, 2, 2, 7, 5, 2, 7, 1, 3, 1,\n",
       "       2, 5, 4, 2, 2, 7, 6, 3, 1, 4, 3, 4, 5, 1, 3, 2, 2, 2, 6, 2, 5, 6,\n",
       "       4, 3, 1, 1, 7, 3, 3, 5, 3, 5, 3, 3, 6, 5, 1, 3, 4, 1, 7, 2, 2, 4,\n",
       "       3, 1, 3, 3, 1, 3, 6, 5, 4, 3, 3, 2])"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "nb1_pred_cv = nbk.predict(X_test_cv1)\n",
    "nb1_pred_cv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "VALIDATION OF NAIVE BAYES MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report \n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn import metrics \n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import matthews_corrcoef"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes using count vectorizer Accuracy is: 0.4306122448979592\n",
      "Naive bayes using count vectorizer f1 score is : 0.41940505171491654\n",
      "Naive bayes using count vectorizer recall score is : 0.4369165427039314\n",
      "Naive bayes using count vectorizer precison score is : 0.4347140190873368\n",
      "Naive bayes using count vectorizer precison score is : 0.4347140190873368\n",
      "Naive bayes using count vectorizer matthews_corrcoef score is : 0.33879634536365666\n"
     ]
    }
   ],
   "source": [
    "print(\"Naive bayes using count vectorizer Accuracy is:\",metrics.accuracy_score(y_test_cv1, nb1_pred_cv))\n",
    "print(\"Naive bayes using count vectorizer f1 score is :\",f1_score(y_test_cv1, nb1_pred_cv, average='macro'))\n",
    "print(\"Naive bayes using count vectorizer recall score is :\",recall_score(y_test_cv1, nb1_pred_cv, average='macro'))\n",
    "print(\"Naive bayes using count vectorizer precison score is :\",precision_score(y_test_cv1, nb1_pred_cv, average='macro'))\n",
    "print(\"Naive bayes using count vectorizer precison score is :\",precision_score(y_test_cv1, nb1_pred_cv, average='macro'))\n",
    "print(\"Naive bayes using count vectorizer matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, nb1_pred_cv))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GAUSSIAN NAIVE BAYES MODEL USING TFIDF VECTORIZER (KB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4900, 4483)\n"
     ]
    }
   ],
   "source": [
    "#creating tfidf vectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "tf_k = TfidfVectorizer()\n",
    "\n",
    "Xk_tf = tf_k.fit_transform(corpus).toarray()\n",
    "yk_tf = dataset_kb.iloc[:,2].values\n",
    "print(Xk_tf.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating TFIDF vectorizer features\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train_tf1, X_test_tf1, y_train_tf1, y_test_tf1 = train_test_split(Xk_tf,yk_tf,test_size = 0.2,\n",
    "                                                   random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None, var_smoothing=1e-09)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nbk.fit(X_train_tf1, y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.46938776, 0.51020408, 0.5127551 , 0.48214286, 0.52295918,\n",
       "       0.43622449, 0.49489796, 0.46683673, 0.48979592, 0.5       ])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_nb_tf = cross_val_score(estimator=nbk, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_nb_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 7, 3, 4, 4, 3, 2, 2, 2, 4, 7, 4, 4, 2, 1, 3, 2, 4, 1, 6, 1, 7,\n",
       "       7, 5, 2, 2, 1, 3, 1, 1, 1, 5, 4, 2, 7, 3, 3, 6, 3, 1, 5, 7, 5, 6,\n",
       "       1, 1, 2, 4, 7, 1, 7, 2, 6, 4, 2, 1, 3, 1, 3, 4, 1, 5, 7, 7, 6, 2,\n",
       "       2, 1, 4, 2, 2, 2, 3, 2, 2, 7, 6, 3, 2, 1, 1, 3, 3, 2, 4, 3, 3, 7,\n",
       "       7, 3, 4, 2, 4, 2, 4, 7, 4, 1, 4, 5, 6, 7, 2, 5, 2, 2, 5, 5, 7, 2,\n",
       "       2, 2, 7, 5, 1, 4, 3, 4, 1, 4, 5, 3, 7, 4, 2, 4, 3, 5, 2, 7, 7, 1,\n",
       "       6, 6, 7, 5, 2, 6, 2, 3, 4, 3, 3, 1, 1, 5, 4, 5, 6, 1, 1, 2, 4, 2,\n",
       "       6, 7, 2, 5, 5, 5, 7, 2, 1, 2, 2, 5, 1, 3, 1, 6, 3, 2, 7, 1, 6, 4,\n",
       "       2, 3, 6, 3, 2, 6, 2, 7, 1, 6, 5, 4, 7, 6, 7, 2, 3, 2, 6, 7, 4, 1,\n",
       "       2, 5, 1, 7, 7, 7, 1, 1, 2, 7, 2, 2, 1, 7, 6, 7, 6, 1, 3, 2, 7, 5,\n",
       "       3, 2, 1, 2, 1, 6, 1, 7, 2, 1, 2, 2, 7, 3, 5, 7, 1, 1, 3, 1, 3, 1,\n",
       "       4, 1, 3, 6, 1, 1, 3, 2, 2, 2, 3, 4, 2, 2, 2, 2, 1, 3, 7, 3, 3, 3,\n",
       "       1, 3, 7, 2, 7, 1, 1, 2, 6, 5, 1, 5, 7, 2, 5, 2, 1, 2, 1, 2, 3, 2,\n",
       "       3, 6, 4, 5, 3, 2, 3, 6, 4, 5, 2, 4, 6, 4, 4, 1, 4, 2, 4, 2, 6, 3,\n",
       "       6, 3, 7, 2, 3, 2, 5, 3, 2, 5, 2, 2, 2, 7, 3, 1, 5, 5, 4, 1, 2, 7,\n",
       "       4, 2, 3, 5, 6, 7, 3, 1, 5, 3, 6, 2, 3, 7, 1, 1, 5, 1, 7, 5, 2, 5,\n",
       "       1, 1, 3, 2, 5, 2, 3, 2, 7, 2, 1, 3, 7, 2, 4, 5, 2, 4, 6, 2, 2, 6,\n",
       "       7, 1, 6, 2, 3, 2, 2, 1, 7, 5, 7, 6, 4, 5, 3, 2, 1, 4, 2, 3, 4, 1,\n",
       "       4, 6, 3, 6, 5, 7, 3, 6, 5, 3, 2, 2, 5, 2, 7, 5, 1, 2, 6, 1, 7, 7,\n",
       "       4, 2, 3, 1, 1, 4, 1, 4, 7, 5, 4, 2, 2, 3, 6, 6, 2, 5, 5, 2, 7, 4,\n",
       "       5, 2, 2, 2, 2, 6, 3, 2, 6, 4, 3, 3, 3, 2, 7, 2, 3, 7, 3, 5, 3, 7,\n",
       "       3, 1, 3, 2, 4, 3, 1, 7, 3, 1, 2, 1, 7, 4, 5, 2, 2, 2, 2, 4, 2, 6,\n",
       "       4, 1, 1, 7, 3, 1, 5, 5, 2, 5, 4, 2, 2, 5, 3, 2, 2, 6, 6, 2, 7, 1,\n",
       "       2, 1, 5, 3, 2, 2, 1, 3, 7, 4, 6, 6, 5, 2, 5, 2, 7, 3, 7, 4, 7, 3,\n",
       "       3, 1, 1, 1, 5, 7, 5, 6, 3, 3, 1, 2, 7, 6, 1, 2, 1, 2, 2, 7, 3, 3,\n",
       "       7, 2, 7, 3, 2, 3, 5, 3, 2, 2, 1, 1, 2, 2, 3, 1, 7, 7, 5, 2, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 1, 7, 4, 2, 2, 3, 7, 2, 7, 7, 4, 2,\n",
       "       2, 1, 2, 3, 5, 7, 7, 2, 2, 1, 3, 2, 2, 7, 2, 1, 2, 4, 3, 5, 5, 7,\n",
       "       1, 4, 3, 7, 3, 6, 2, 7, 3, 2, 2, 1, 3, 1, 2, 7, 6, 6, 1, 3, 5, 3,\n",
       "       2, 4, 2, 2, 1, 1, 3, 1, 5, 3, 7, 3, 7, 6, 3, 7, 3, 2, 2, 5, 1, 2,\n",
       "       3, 5, 3, 5, 1, 3, 3, 4, 3, 5, 1, 2, 1, 6, 7, 5, 2, 6, 7, 2, 1, 2,\n",
       "       6, 2, 2, 1, 6, 2, 7, 5, 3, 3, 1, 2, 5, 5, 7, 5, 5, 2, 6, 3, 3, 1,\n",
       "       3, 7, 3, 4, 5, 7, 3, 5, 2, 3, 2, 1, 7, 5, 7, 1, 3, 4, 1, 5, 2, 2,\n",
       "       2, 2, 2, 1, 2, 1, 1, 3, 4, 5, 2, 7, 4, 2, 3, 5, 3, 4, 3, 4, 6, 1,\n",
       "       2, 7, 7, 4, 1, 5, 7, 4, 1, 1, 2, 1, 2, 3, 4, 7, 3, 3, 2, 4, 2, 5,\n",
       "       2, 4, 2, 2, 3, 5, 1, 2, 4, 3, 3, 5, 2, 6, 5, 3, 4, 4, 2, 4, 6, 6,\n",
       "       2, 3, 7, 2, 1, 6, 3, 4, 4, 3, 5, 2, 2, 1, 5, 5, 2, 4, 1, 3, 6, 7,\n",
       "       3, 2, 2, 4, 6, 1, 3, 2, 3, 1, 1, 2, 3, 2, 7, 6, 2, 4, 5, 1, 2, 5,\n",
       "       5, 3, 3, 2, 2, 6, 3, 3, 1, 3, 7, 3, 2, 3, 1, 5, 7, 5, 5, 1, 2, 4,\n",
       "       1, 1, 1, 5, 1, 3, 2, 3, 1, 4, 4, 3, 1, 3, 7, 3, 3, 1, 1, 5, 2, 7,\n",
       "       7, 4, 5, 2, 5, 3, 5, 3, 3, 3, 6, 7, 6, 5, 2, 1, 2, 1, 4, 5, 7, 1,\n",
       "       7, 2, 1, 2, 2, 2, 1, 3, 7, 3, 3, 3, 1, 2, 2, 7, 5, 2, 7, 1, 3, 1,\n",
       "       6, 5, 4, 2, 2, 7, 6, 3, 1, 6, 3, 4, 5, 1, 3, 2, 2, 2, 6, 2, 5, 6,\n",
       "       4, 3, 1, 1, 7, 3, 3, 5, 3, 5, 3, 3, 6, 5, 1, 3, 7, 1, 7, 2, 2, 4,\n",
       "       3, 1, 3, 2, 1, 3, 6, 4, 4, 3, 3, 2])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "nb1_pred_tf = nbk.predict(X_test_tf1)\n",
    "nb1_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes Accuracy is: 0.4561224489795918\n",
      "Naive bayes f1 score is : 0.4441483505989759\n",
      "Naive bayes recall score is : 0.4615437682735867\n",
      "Naive bayes precison score is : 0.44924378051305486\n",
      "Naive bayes precison score is : 0.44924378051305486\n",
      "Naive bayes matthews_corrcoef score is : 0.3676340252405466\n"
     ]
    }
   ],
   "source": [
    "#validation test \n",
    "\n",
    "print(\"Naive bayes using tfidf vectorizer Accuracy is:\",metrics.accuracy_score(y_test_tf1, nb1_pred_tf))\n",
    "print(\"Naive bayes using tfidf vectorizer f1 score is :\",f1_score(y_test_tf1, nb1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes recall score is :\",recall_score(y_test_tf1, nb1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf1, nb1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf1, nb1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, nb1_pred_tf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bernoulli NAIVE BAYES USING COUNT VECTORIZER (KB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting bernouli naive bayes algorithm with count vectorizer\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "bnk=BernoulliNB()\n",
    "bnk.fit(X_train_cv1, y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.64540816, 0.66581633, 0.61989796, 0.65306122, 0.66581633,\n",
       "       0.68622449, 0.65816327, 0.64795918, 0.64030612, 0.62244898])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation test on training set\n",
    "cross_bnk_cv = cross_val_score(estimator=bnk, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_bnk_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 7, 3, 5, 3, 2, 2, 1, 3, 4, 7, 4, 3, 2, 2, 3, 5, 3, 2, 4, 3, 7,\n",
       "       7, 5, 1, 2, 1, 3, 4, 1, 1, 2, 4, 2, 7, 3, 3, 3, 2, 1, 5, 7, 6, 3,\n",
       "       1, 2, 4, 4, 7, 3, 3, 1, 6, 3, 5, 7, 2, 1, 3, 4, 4, 4, 6, 1, 4, 1,\n",
       "       2, 2, 4, 3, 2, 2, 3, 2, 2, 7, 2, 2, 2, 7, 2, 3, 3, 2, 4, 3, 3, 3,\n",
       "       4, 3, 1, 2, 6, 2, 2, 6, 5, 5, 4, 7, 3, 7, 3, 7, 2, 3, 4, 5, 6, 2,\n",
       "       5, 4, 7, 4, 2, 2, 3, 4, 5, 7, 5, 3, 5, 1, 2, 4, 2, 7, 5, 7, 5, 2,\n",
       "       1, 7, 6, 2, 1, 2, 3, 3, 2, 3, 3, 1, 1, 4, 4, 6, 2, 2, 5, 1, 4, 2,\n",
       "       3, 7, 2, 3, 5, 6, 4, 2, 3, 5, 3, 7, 1, 3, 6, 6, 3, 5, 7, 1, 6, 4,\n",
       "       2, 3, 2, 3, 2, 3, 1, 7, 4, 6, 2, 4, 2, 4, 3, 1, 3, 2, 1, 7, 3, 2,\n",
       "       2, 2, 5, 1, 7, 7, 4, 3, 3, 7, 2, 2, 1, 7, 1, 7, 4, 3, 3, 2, 2, 4,\n",
       "       3, 2, 5, 2, 1, 6, 1, 7, 2, 1, 2, 1, 2, 3, 1, 7, 3, 4, 3, 3, 3, 1,\n",
       "       3, 2, 2, 7, 5, 3, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       1, 3, 7, 1, 6, 3, 2, 1, 4, 5, 5, 5, 7, 3, 3, 2, 6, 2, 2, 4, 3, 3,\n",
       "       3, 6, 2, 7, 3, 1, 3, 4, 1, 4, 2, 5, 1, 1, 4, 3, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 2, 5, 2, 2, 2, 3, 2, 1, 7, 3, 4, 4, 1, 7,\n",
       "       4, 1, 3, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 4, 1, 2, 2, 4, 3, 2, 1, 5,\n",
       "       5, 5, 3, 5, 5, 1, 3, 1, 3, 2, 1, 3, 5, 1, 3, 7, 2, 1, 6, 3, 1, 6,\n",
       "       6, 1, 6, 1, 2, 4, 2, 1, 7, 4, 7, 2, 4, 7, 3, 2, 3, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 3, 3, 6, 5, 3, 5, 2, 6, 3, 2, 3, 5, 5, 6, 4, 7, 6,\n",
       "       3, 2, 3, 6, 1, 4, 6, 3, 7, 5, 4, 2, 1, 3, 1, 1, 2, 6, 3, 3, 7, 4,\n",
       "       3, 2, 5, 2, 2, 1, 3, 2, 6, 7, 3, 2, 3, 2, 7, 1, 3, 7, 3, 3, 3, 7,\n",
       "       2, 1, 3, 3, 4, 3, 1, 7, 3, 1, 5, 5, 7, 4, 5, 1, 2, 1, 2, 5, 2, 2,\n",
       "       5, 1, 2, 4, 3, 4, 4, 3, 2, 7, 5, 2, 4, 4, 2, 1, 2, 5, 5, 4, 7, 5,\n",
       "       1, 2, 3, 3, 1, 2, 2, 3, 7, 3, 2, 1, 2, 1, 4, 1, 7, 3, 3, 4, 7, 3,\n",
       "       3, 3, 3, 5, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 2, 1, 1, 6, 2, 3,\n",
       "       7, 2, 3, 3, 2, 3, 1, 3, 7, 5, 2, 1, 2, 1, 3, 7, 7, 7, 3, 4, 3, 5,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 4, 1, 2, 3, 3, 2, 7, 7, 4, 2,\n",
       "       5, 6, 1, 3, 5, 6, 2, 2, 1, 6, 3, 1, 5, 7, 3, 1, 5, 4, 3, 3, 4, 7,\n",
       "       1, 6, 3, 7, 3, 7, 2, 6, 3, 2, 2, 3, 3, 3, 1, 3, 1, 4, 1, 3, 5, 3,\n",
       "       3, 4, 1, 2, 1, 5, 3, 1, 5, 3, 6, 3, 7, 7, 3, 7, 3, 2, 1, 7, 3, 1,\n",
       "       2, 6, 3, 5, 3, 3, 3, 1, 3, 5, 1, 2, 2, 6, 7, 4, 5, 4, 7, 1, 6, 2,\n",
       "       1, 1, 1, 3, 4, 1, 7, 1, 3, 3, 3, 5, 5, 5, 7, 2, 4, 2, 5, 3, 3, 2,\n",
       "       3, 5, 3, 4, 1, 7, 3, 5, 2, 3, 2, 6, 4, 5, 7, 1, 3, 3, 3, 4, 5, 1,\n",
       "       5, 3, 1, 1, 2, 1, 6, 3, 6, 5, 1, 4, 4, 2, 3, 5, 3, 4, 3, 4, 6, 1,\n",
       "       1, 7, 7, 3, 5, 6, 7, 4, 3, 1, 2, 3, 5, 3, 4, 7, 3, 3, 2, 3, 1, 5,\n",
       "       2, 4, 2, 5, 3, 4, 3, 5, 2, 3, 3, 5, 2, 2, 7, 3, 4, 4, 4, 4, 5, 7,\n",
       "       2, 2, 7, 1, 2, 3, 3, 3, 4, 3, 6, 4, 2, 4, 2, 7, 2, 5, 1, 2, 6, 7,\n",
       "       3, 2, 5, 3, 4, 4, 3, 2, 3, 1, 3, 2, 3, 2, 7, 6, 2, 3, 3, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 3, 3, 7, 3, 1, 3, 5, 7, 2, 5, 5, 6, 1, 1,\n",
       "       4, 5, 1, 7, 7, 2, 1, 3, 2, 6, 5, 3, 1, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       3, 7, 4, 1, 5, 3, 7, 3, 2, 3, 6, 7, 6, 4, 3, 4, 2, 1, 5, 3, 7, 2,\n",
       "       7, 1, 3, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 3, 3, 7, 7, 1, 2, 3, 3, 6,\n",
       "       2, 2, 4, 2, 2, 3, 3, 2, 6, 6, 3, 5, 5, 5, 2, 2, 2, 2, 4, 5, 2, 4,\n",
       "       4, 3, 5, 1, 7, 3, 3, 5, 3, 5, 3, 3, 6, 6, 1, 3, 3, 3, 2, 2, 3, 4,\n",
       "       3, 3, 3, 2, 6, 3, 4, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "bnk1_pred_cv = bnk.predict(X_test_cv1)\n",
    "bnk1_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bernouli Naive bayes Accuracy is: 0.6561224489795918\n",
      "bernouli Naive bayes f1 score is : 0.6454996531177891\n",
      "bernouli Naive bayes recall score is : 0.6577895009825048\n",
      "bernouli Naive bayes precison score is : 0.6855335181343837\n",
      "bernouli Naive bayes precison score is : 0.6855335181343837\n",
      "bernouli Naive bayes matthews_corrcoef score is : 0.6091506068953487\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"bernouli Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_cv1, bnk1_pred_cv))\n",
    "print(\"bernouli Naive bayes f1 score is :\",f1_score(y_test_cv1, bnk1_pred_cv, average='macro'))\n",
    "print(\"bernouli Naive bayes recall score is :\",recall_score(y_test_cv1, bnk1_pred_cv, average='macro'))\n",
    "print(\"bernouli Naive bayes precison score is :\",precision_score(y_test_cv1, bnk1_pred_cv, average='macro'))\n",
    "print(\"bernouli Naive bayes precison score is :\",precision_score(y_test_cv1, bnk1_pred_cv, average='macro'))\n",
    "print(\"bernouli Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, bnk1_pred_cv))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bernoulli NAIVE BAYES USING TFIDF VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting bernouli naive bayes model using TFidf\n",
    "bnk.fit(X_train_tf1, y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.64540816, 0.66581633, 0.61989796, 0.65306122, 0.66581633,\n",
       "       0.68622449, 0.65816327, 0.64795918, 0.64030612, 0.62244898])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation\n",
    "cross_bnk_tf = cross_val_score(estimator=bnn, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_bnk_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 7, 3, 5, 3, 2, 2, 1, 3, 4, 7, 4, 3, 2, 2, 3, 5, 3, 2, 4, 3, 7,\n",
       "       7, 5, 1, 2, 1, 3, 4, 1, 1, 2, 4, 2, 7, 3, 3, 3, 2, 1, 5, 7, 6, 3,\n",
       "       1, 2, 4, 4, 7, 3, 3, 1, 6, 3, 5, 7, 2, 1, 3, 4, 4, 4, 6, 1, 4, 1,\n",
       "       2, 2, 4, 3, 2, 2, 3, 2, 2, 7, 2, 2, 2, 7, 2, 3, 3, 2, 4, 3, 3, 3,\n",
       "       4, 3, 1, 2, 6, 2, 2, 6, 5, 5, 4, 7, 3, 7, 3, 7, 2, 3, 4, 5, 6, 2,\n",
       "       5, 4, 7, 4, 2, 2, 3, 4, 5, 7, 5, 3, 5, 1, 2, 4, 2, 7, 5, 7, 5, 2,\n",
       "       1, 7, 6, 2, 1, 2, 3, 3, 2, 3, 3, 1, 1, 4, 4, 6, 2, 2, 5, 1, 4, 2,\n",
       "       3, 7, 2, 3, 5, 6, 4, 2, 3, 5, 3, 7, 1, 3, 6, 6, 3, 5, 7, 1, 6, 4,\n",
       "       2, 3, 2, 3, 2, 3, 1, 7, 4, 6, 2, 4, 2, 4, 3, 1, 3, 2, 1, 7, 3, 2,\n",
       "       2, 2, 5, 1, 7, 7, 4, 3, 3, 7, 2, 2, 1, 7, 1, 7, 4, 3, 3, 2, 2, 4,\n",
       "       3, 2, 5, 2, 1, 6, 1, 7, 2, 1, 2, 1, 2, 3, 1, 7, 3, 4, 3, 3, 3, 1,\n",
       "       3, 2, 2, 7, 5, 3, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       1, 3, 7, 1, 6, 3, 2, 1, 4, 5, 5, 5, 7, 3, 3, 2, 6, 2, 2, 4, 3, 3,\n",
       "       3, 6, 2, 7, 3, 1, 3, 4, 1, 4, 2, 5, 1, 1, 4, 3, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 2, 5, 2, 2, 2, 3, 2, 1, 7, 3, 4, 4, 1, 7,\n",
       "       4, 1, 3, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 4, 1, 2, 2, 4, 3, 2, 1, 5,\n",
       "       5, 5, 3, 5, 5, 1, 3, 1, 3, 2, 1, 3, 5, 1, 3, 7, 2, 1, 6, 3, 1, 6,\n",
       "       6, 1, 6, 1, 2, 4, 2, 1, 7, 4, 7, 2, 4, 7, 3, 2, 3, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 3, 3, 6, 5, 3, 5, 2, 6, 3, 2, 3, 5, 5, 6, 4, 7, 6,\n",
       "       3, 2, 3, 6, 1, 4, 6, 3, 7, 5, 4, 2, 1, 3, 1, 1, 2, 6, 3, 3, 7, 4,\n",
       "       3, 2, 5, 2, 2, 1, 3, 2, 6, 7, 3, 2, 3, 2, 7, 1, 3, 7, 3, 3, 3, 7,\n",
       "       2, 1, 3, 3, 4, 3, 1, 7, 3, 1, 5, 5, 7, 4, 5, 1, 2, 1, 2, 5, 2, 2,\n",
       "       5, 1, 2, 4, 3, 4, 4, 3, 2, 7, 5, 2, 4, 4, 2, 1, 2, 5, 5, 4, 7, 5,\n",
       "       1, 2, 3, 3, 1, 2, 2, 3, 7, 3, 2, 1, 2, 1, 4, 1, 7, 3, 3, 4, 7, 3,\n",
       "       3, 3, 3, 5, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 2, 1, 1, 6, 2, 3,\n",
       "       7, 2, 3, 3, 2, 3, 1, 3, 7, 5, 2, 1, 2, 1, 3, 7, 7, 7, 3, 4, 3, 5,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 4, 1, 2, 3, 3, 2, 7, 7, 4, 2,\n",
       "       5, 6, 1, 3, 5, 6, 2, 2, 1, 6, 3, 1, 5, 7, 3, 1, 5, 4, 3, 3, 4, 7,\n",
       "       1, 6, 3, 7, 3, 7, 2, 6, 3, 2, 2, 3, 3, 3, 1, 3, 1, 4, 1, 3, 5, 3,\n",
       "       3, 4, 1, 2, 1, 5, 3, 1, 5, 3, 6, 3, 7, 7, 3, 7, 3, 2, 1, 7, 3, 1,\n",
       "       2, 6, 3, 5, 3, 3, 3, 1, 3, 5, 1, 2, 2, 6, 7, 4, 5, 4, 7, 1, 6, 2,\n",
       "       1, 1, 1, 3, 4, 1, 7, 1, 3, 3, 3, 5, 5, 5, 7, 2, 4, 2, 5, 3, 3, 2,\n",
       "       3, 5, 3, 4, 1, 7, 3, 5, 2, 3, 2, 6, 4, 5, 7, 1, 3, 3, 3, 4, 5, 1,\n",
       "       5, 3, 1, 1, 2, 1, 6, 3, 6, 5, 1, 4, 4, 2, 3, 5, 3, 4, 3, 4, 6, 1,\n",
       "       1, 7, 7, 3, 5, 6, 7, 4, 3, 1, 2, 3, 5, 3, 4, 7, 3, 3, 2, 3, 1, 5,\n",
       "       2, 4, 2, 5, 3, 4, 3, 5, 2, 3, 3, 5, 2, 2, 7, 3, 4, 4, 4, 4, 5, 7,\n",
       "       2, 2, 7, 1, 2, 3, 3, 3, 4, 3, 6, 4, 2, 4, 2, 7, 2, 5, 1, 2, 6, 7,\n",
       "       3, 2, 5, 3, 4, 4, 3, 2, 3, 1, 3, 2, 3, 2, 7, 6, 2, 3, 3, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 3, 3, 7, 3, 1, 3, 5, 7, 2, 5, 5, 6, 1, 1,\n",
       "       4, 5, 1, 7, 7, 2, 1, 3, 2, 6, 5, 3, 1, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       3, 7, 4, 1, 5, 3, 7, 3, 2, 3, 6, 7, 6, 4, 3, 4, 2, 1, 5, 3, 7, 2,\n",
       "       7, 1, 3, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 3, 3, 7, 7, 1, 2, 3, 3, 6,\n",
       "       2, 2, 4, 2, 2, 3, 3, 2, 6, 6, 3, 5, 5, 5, 2, 2, 2, 2, 4, 5, 2, 4,\n",
       "       4, 3, 5, 1, 7, 3, 3, 5, 3, 5, 3, 3, 6, 6, 1, 3, 3, 3, 2, 2, 3, 4,\n",
       "       3, 3, 3, 2, 6, 3, 4, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "bnk1_pred_tf = bnk.predict(X_test_tf1)\n",
    "bnk1_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes Accuracy is: 0.6561224489795918\n",
      "Naive bayes f1 score is : 0.6454996531177891\n",
      "Naive bayes recall score is : 0.6577895009825048\n",
      "Naive bayes precison score is : 0.6855335181343837\n",
      "Naive bayes precison score is : 0.6855335181343837\n",
      "Naive bayes matthews_corrcoef score is : 0.6091506068953487\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_tf1, bnk1_pred_tf))\n",
    "print(\"Naive bayes f1 score is :\",f1_score(y_test_tf1, bnk1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes recall score is :\",recall_score(y_test_tf1, bnk1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf1, bnk1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf1, bnk1_pred_tf, average='macro'))\n",
    "print(\"Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, bnk1_pred_tf))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Support vector machine with linear kernel using Count vectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using count vectorizer\n",
    "from sklearn.svm import SVC\n",
    "svm_k = SVC(kernel = 'linear', random_state=0)\n",
    "svm_k.fit(X_train_cv1,y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_svm_cv = cross_val_score(estimator=svm_k, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_bnk_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 2, 1, 5, 4, 7, 4, 4, 2, 1, 4, 5, 4, 6, 4, 7, 7,\n",
       "       7, 5, 1, 2, 1, 4, 2, 1, 1, 7, 2, 2, 7, 3, 2, 6, 2, 1, 4, 7, 5, 6,\n",
       "       1, 1, 4, 4, 7, 6, 7, 1, 1, 3, 5, 7, 2, 1, 3, 4, 4, 4, 5, 1, 4, 1,\n",
       "       2, 2, 4, 6, 5, 2, 3, 6, 6, 7, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 6,\n",
       "       4, 3, 1, 7, 7, 4, 6, 6, 5, 1, 4, 7, 3, 7, 6, 7, 2, 4, 4, 1, 7, 2,\n",
       "       5, 4, 7, 4, 6, 5, 3, 4, 5, 7, 5, 3, 2, 1, 2, 4, 2, 7, 5, 7, 1, 2,\n",
       "       1, 1, 2, 5, 1, 2, 2, 3, 6, 3, 3, 1, 1, 5, 4, 6, 2, 5, 1, 1, 4, 2,\n",
       "       7, 7, 2, 6, 5, 7, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 7,\n",
       "       2, 3, 2, 3, 2, 3, 1, 7, 4, 6, 5, 4, 6, 4, 7, 1, 3, 2, 1, 7, 4, 2,\n",
       "       2, 2, 5, 1, 7, 7, 2, 3, 2, 7, 6, 2, 5, 7, 5, 7, 4, 1, 3, 2, 7, 4,\n",
       "       3, 2, 5, 2, 1, 6, 5, 7, 2, 6, 2, 1, 6, 4, 1, 7, 3, 4, 3, 1, 3, 1,\n",
       "       3, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       5, 3, 7, 5, 5, 3, 1, 1, 4, 5, 5, 1, 7, 6, 6, 6, 7, 2, 7, 4, 6, 3,\n",
       "       3, 5, 2, 7, 3, 1, 6, 4, 1, 4, 2, 5, 1, 1, 4, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 2, 5, 7, 2, 2, 7, 2, 1, 7, 5, 4, 4, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 4, 1, 2, 2, 4, 7, 5, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 7, 2, 1, 3, 5, 1, 6, 7, 2, 1, 7, 2, 1, 6,\n",
       "       5, 1, 7, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 4, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 7, 3, 7, 5, 3, 5, 2, 5, 4, 2, 7, 5, 5, 1, 4, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 5, 4, 2, 1, 3, 1, 1, 2, 6, 4, 5, 7, 4,\n",
       "       6, 2, 5, 2, 2, 1, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 4, 6, 7, 2, 7,\n",
       "       2, 1, 4, 2, 4, 3, 4, 7, 3, 1, 5, 5, 7, 4, 5, 1, 2, 1, 2, 5, 2, 2,\n",
       "       2, 5, 2, 4, 4, 2, 1, 2, 2, 7, 5, 7, 4, 4, 2, 1, 2, 5, 5, 5, 7, 5,\n",
       "       1, 2, 6, 2, 1, 5, 1, 4, 7, 3, 7, 1, 2, 5, 4, 1, 7, 4, 3, 4, 7, 3,\n",
       "       3, 3, 3, 5, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 2, 3, 3, 2, 3, 6, 3, 7, 5, 5, 1, 2, 1, 3, 7, 5, 7, 7, 4, 3, 5,\n",
       "       3, 3, 3, 3, 3, 3, 6, 7, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 1, 2,\n",
       "       5, 7, 1, 4, 1, 1, 7, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 2, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 7, 3, 2, 2, 1, 4, 6, 1, 6, 1, 4, 1, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 7, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 5, 6, 5, 6, 3, 3, 1, 3, 5, 1, 2, 5, 6, 7, 7, 5, 4, 7, 1, 6, 2,\n",
       "       1, 1, 1, 3, 4, 1, 7, 1, 3, 3, 6, 5, 5, 5, 7, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 2, 4, 2, 1, 7, 3, 5, 2, 3, 2, 7, 5, 5, 7, 5, 4, 1, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 7, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 7, 7, 4, 3, 1, 2, 4, 1, 3, 4, 7, 4, 3, 2, 3, 1, 1,\n",
       "       2, 5, 4, 5, 7, 4, 6, 5, 2, 3, 3, 1, 2, 2, 7, 1, 4, 4, 5, 4, 1, 7,\n",
       "       5, 2, 7, 1, 5, 3, 3, 3, 4, 3, 1, 4, 2, 6, 2, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 3, 4, 2, 3, 2, 3, 1, 3, 2, 3, 2, 7, 7, 2, 4, 6, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 3, 5, 3, 1, 7, 7, 5, 5, 7, 1, 5,\n",
       "       4, 5, 1, 7, 7, 4, 1, 3, 5, 2, 1, 3, 6, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       7, 7, 7, 1, 5, 3, 5, 3, 7, 3, 5, 7, 6, 4, 2, 4, 3, 1, 5, 6, 7, 5,\n",
       "       7, 1, 5, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 4, 2, 2, 7, 1, 7, 5, 3, 7,\n",
       "       5, 2, 5, 2, 2, 6, 3, 2, 5, 4, 2, 1, 5, 5, 2, 2, 2, 2, 2, 5, 6, 4,\n",
       "       4, 3, 5, 1, 7, 3, 3, 5, 3, 5, 3, 6, 7, 4, 1, 3, 7, 7, 6, 5, 3, 5,\n",
       "       3, 6, 4, 2, 6, 3, 6, 5, 5, 3, 3, 2])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_pred_cv = svm_k.predict(X_test_cv1)\n",
    "svm_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.7612244897959184\n",
      "SVM(LINEAR) f1 score is : 0.7552869553425852\n",
      "SVM(LINEAR) recall score is : 0.7613637364325591\n",
      "SVM(LINEAR) precison score is : 0.758896633595664\n",
      "SVM(LINEAR) precison score is : 0.758896633595664\n",
      "SVM(LINEAR) matthews_corrcoef score is : 0.7226690162359307\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_cv1, svm_pred_cv))\n",
    "print(\"SVM(LINEAR) f1 score is :\",f1_score(y_test_cv1, svm_pred_cv, average='macro'))\n",
    "print(\"SVM(LINEAR) recall score is :\",recall_score(y_test_cv1, svm_pred_cv, average='macro'))\n",
    "print(\"SVM(LINEAR) precison score is :\",precision_score(y_test_cv1, svm_pred_cv, average='macro'))\n",
    "print(\"SVM(LINEAR) precison score is :\",precision_score(y_test_cv1, svm_pred_cv, average='macro'))\n",
    "print(\"SVM(LINEAR) matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, svm_pred_cv))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SUPPORT VECTOR MACHINE USING TFIDF VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm model using tfidf vectorizer\n",
    "svm_k.fit(X_train_tf1,y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "cross_svm_tf = cross_val_score(estimator=svm_k, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_svm_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 2, 1, 5, 4, 7, 4, 4, 2, 1, 4, 5, 6, 6, 4, 7, 6,\n",
       "       7, 5, 1, 2, 1, 4, 4, 1, 1, 6, 4, 2, 7, 3, 2, 6, 4, 1, 4, 7, 6, 6,\n",
       "       1, 6, 4, 4, 7, 6, 7, 1, 1, 3, 5, 7, 2, 1, 3, 4, 4, 4, 6, 1, 4, 1,\n",
       "       2, 2, 4, 6, 5, 2, 3, 6, 6, 6, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 6,\n",
       "       6, 3, 6, 7, 7, 4, 6, 6, 5, 1, 6, 7, 3, 7, 6, 7, 2, 4, 6, 1, 6, 2,\n",
       "       5, 4, 7, 4, 6, 2, 3, 4, 5, 7, 5, 3, 2, 1, 2, 4, 2, 7, 5, 7, 7, 5,\n",
       "       1, 6, 2, 6, 1, 2, 2, 3, 6, 3, 3, 1, 1, 4, 4, 6, 2, 5, 1, 1, 4, 2,\n",
       "       6, 6, 2, 6, 5, 6, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 6,\n",
       "       2, 3, 6, 3, 2, 6, 1, 7, 4, 6, 2, 4, 6, 4, 7, 1, 3, 2, 1, 7, 4, 2,\n",
       "       2, 2, 5, 1, 7, 7, 4, 3, 2, 7, 6, 2, 1, 7, 5, 7, 6, 1, 3, 2, 7, 4,\n",
       "       3, 4, 2, 2, 1, 6, 1, 7, 2, 6, 2, 1, 6, 4, 1, 7, 1, 4, 3, 1, 3, 5,\n",
       "       3, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       1, 3, 7, 5, 6, 3, 6, 1, 4, 5, 5, 1, 7, 6, 6, 6, 6, 2, 7, 7, 6, 3,\n",
       "       3, 6, 2, 7, 3, 1, 6, 6, 1, 4, 2, 4, 1, 1, 4, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 6, 7, 7, 2, 2, 7, 2, 1, 7, 6, 4, 3, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 6, 1, 2, 6, 4, 6, 6, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 7, 2, 1, 3, 6, 6, 6, 7, 2, 1, 6, 2, 1, 6,\n",
       "       5, 1, 7, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 6, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 1, 7, 3, 7, 5, 3, 5, 2, 6, 4, 2, 7, 5, 5, 6, 4, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 5, 4, 2, 1, 3, 1, 4, 2, 6, 6, 5, 7, 4,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 4, 6, 7, 2, 7,\n",
       "       2, 1, 4, 2, 4, 3, 6, 7, 3, 1, 5, 5, 7, 4, 7, 1, 2, 1, 4, 5, 2, 2,\n",
       "       4, 1, 2, 4, 4, 4, 6, 2, 2, 7, 5, 7, 4, 4, 2, 1, 2, 5, 1, 4, 7, 5,\n",
       "       1, 2, 6, 2, 1, 2, 1, 6, 7, 3, 7, 7, 2, 5, 4, 1, 7, 4, 7, 4, 7, 3,\n",
       "       3, 3, 3, 4, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 6, 3, 3, 2, 3, 6, 3, 7, 5, 5, 1, 2, 1, 3, 6, 7, 7, 7, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 6, 2,\n",
       "       5, 6, 1, 4, 1, 6, 7, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 6, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 7, 3, 2, 2, 1, 6, 6, 1, 6, 1, 4, 1, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 6, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 7, 6, 3, 3, 1, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       1, 1, 1, 4, 6, 1, 7, 1, 3, 3, 6, 5, 4, 5, 7, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 2, 4, 4, 1, 7, 3, 5, 2, 3, 4, 7, 6, 5, 7, 1, 4, 4, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 7, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 6, 7, 4, 3, 4, 2, 4, 1, 3, 4, 7, 4, 3, 2, 3, 1, 1,\n",
       "       2, 4, 2, 5, 7, 4, 6, 5, 2, 3, 3, 1, 2, 2, 7, 1, 4, 4, 4, 4, 1, 7,\n",
       "       5, 2, 7, 1, 1, 6, 3, 3, 4, 3, 6, 4, 2, 6, 2, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 2, 3, 2, 3, 1, 4, 2, 3, 2, 7, 7, 2, 4, 6, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 3, 5, 3, 5, 7, 7, 5, 5, 6, 1, 5,\n",
       "       4, 5, 6, 7, 7, 6, 1, 3, 5, 6, 1, 3, 6, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       7, 7, 6, 1, 2, 3, 7, 3, 6, 3, 6, 7, 6, 4, 2, 4, 2, 1, 5, 6, 7, 1,\n",
       "       7, 1, 5, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 6, 2, 6, 7, 1, 7, 1, 3, 7,\n",
       "       5, 2, 4, 2, 2, 6, 3, 2, 6, 6, 2, 5, 5, 5, 2, 2, 6, 2, 4, 5, 6, 6,\n",
       "       4, 3, 5, 1, 7, 3, 3, 6, 3, 5, 3, 6, 7, 4, 1, 3, 7, 7, 6, 2, 2, 6,\n",
       "       3, 6, 4, 4, 6, 3, 6, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_pred_tf = svm_k.predict(X_test_tf1)\n",
    "svm_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bernouli Naive bayes Accuracy is: 0.7714285714285715\n",
      "bernouli Naive bayes f1 score is : 0.7703153649580219\n",
      "bernouli Naive bayes recall score is : 0.7727650163003199\n",
      "bernouli Naive bayes precison score is : 0.7788233091349863\n",
      "bernouli Naive bayes precison score is : 0.7788233091349863\n",
      "bernouli Naive bayes matthews_corrcoef score is : 0.7349163892338874\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"bernouli Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_tf1, svm_pred_tf))\n",
    "print(\"bernouli Naive bayes f1 score is :\",f1_score(y_test_tf1, svm_pred_tf, average='macro'))\n",
    "print(\"bernouli Naive bayes recall score is :\",recall_score(y_test_tf1, svm_pred_tf, average='macro'))\n",
    "print(\"bernouli Naive bayes precison score is :\",precision_score(y_test_tf1, svm_pred_tf, average='macro'))\n",
    "print(\"bernouli Naive bayes precison score is :\",precision_score(y_test_tf1, svm_pred_tf, average='macro'))\n",
    "print(\"bernouli Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, svm_pred_tf))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SUPPORT VECTOR MACHINE MODEL POLYNOMIAL KERNAL USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='poly',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using count vectorizer\n",
    "from sklearn.svm import SVC\n",
    "Psvm_k = SVC(kernel = 'poly', random_state=0)\n",
    "Psvm_k.fit(X_train_cv1,y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_psvm_cv = cross_val_score(estimator=psvm_k, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_psvm_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 7, 3, 5, 3, 3, 3, 1, 3, 3, 3, 4, 3, 2, 3, 3, 5, 3, 3, 4, 3, 3,\n",
       "       7, 5, 1, 2, 1, 3, 3, 1, 1, 3, 3, 3, 7, 3, 3, 3, 3, 1, 4, 3, 2, 3,\n",
       "       1, 3, 4, 4, 7, 3, 3, 1, 3, 3, 5, 3, 3, 3, 3, 4, 3, 4, 4, 1, 3, 1,\n",
       "       3, 3, 3, 3, 5, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 4, 3, 3, 3,\n",
       "       4, 3, 6, 3, 3, 3, 3, 6, 5, 1, 3, 7, 3, 3, 3, 3, 3, 3, 3, 7, 3, 3,\n",
       "       5, 4, 3, 4, 3, 3, 3, 3, 5, 3, 1, 3, 2, 3, 3, 3, 3, 3, 1, 3, 1, 3,\n",
       "       6, 1, 2, 3, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 1, 4, 3,\n",
       "       3, 3, 3, 3, 1, 3, 4, 3, 3, 5, 3, 7, 1, 3, 6, 3, 3, 1, 3, 1, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 1, 7, 3, 3, 3, 3, 3, 3, 3, 1, 3, 2, 6, 7, 3, 3,\n",
       "       3, 2, 1, 1, 3, 6, 3, 3, 3, 3, 3, 2, 3, 7, 5, 3, 3, 3, 3, 2, 3, 4,\n",
       "       3, 2, 3, 3, 1, 6, 2, 7, 3, 3, 3, 1, 3, 3, 1, 7, 3, 3, 3, 3, 3, 1,\n",
       "       3, 3, 3, 7, 1, 3, 3, 2, 5, 1, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 3, 3,\n",
       "       5, 3, 3, 1, 7, 3, 3, 1, 3, 5, 5, 4, 7, 3, 3, 3, 3, 2, 3, 3, 3, 3,\n",
       "       3, 7, 3, 3, 3, 1, 3, 3, 1, 4, 2, 5, 1, 1, 3, 3, 5, 5, 3, 1, 3, 3,\n",
       "       3, 3, 3, 1, 3, 1, 3, 3, 3, 7, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 1, 7,\n",
       "       4, 1, 3, 1, 3, 1, 3, 3, 4, 3, 6, 1, 3, 3, 1, 2, 3, 3, 3, 3, 1, 5,\n",
       "       1, 5, 3, 1, 1, 1, 3, 1, 3, 3, 3, 3, 4, 3, 3, 7, 3, 1, 6, 3, 1, 3,\n",
       "       7, 1, 3, 1, 3, 3, 2, 3, 3, 3, 7, 3, 4, 3, 3, 2, 3, 4, 3, 3, 4, 5,\n",
       "       4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 5, 5, 3, 7, 3,\n",
       "       3, 2, 3, 3, 1, 3, 6, 4, 3, 6, 4, 2, 1, 3, 3, 3, 3, 3, 3, 5, 3, 3,\n",
       "       3, 2, 5, 3, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 7, 1, 3, 4, 3, 3, 3, 7,\n",
       "       3, 1, 3, 3, 3, 3, 3, 7, 3, 1, 1, 3, 7, 4, 3, 1, 3, 1, 3, 6, 3, 2,\n",
       "       5, 5, 2, 4, 3, 2, 3, 3, 3, 7, 5, 3, 3, 4, 3, 1, 2, 5, 3, 4, 3, 1,\n",
       "       1, 3, 3, 3, 1, 3, 3, 3, 7, 3, 3, 3, 3, 1, 4, 1, 3, 3, 3, 3, 7, 3,\n",
       "       3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 5, 2, 7, 3, 3, 2, 3, 1, 1, 3, 3, 3,\n",
       "       7, 3, 3, 3, 2, 3, 3, 3, 2, 5, 2, 3, 2, 1, 3, 3, 6, 3, 3, 3, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 4, 1, 2, 3, 3, 3, 7, 7, 3, 2,\n",
       "       5, 7, 1, 3, 5, 3, 3, 3, 1, 7, 3, 1, 1, 3, 3, 1, 2, 5, 3, 3, 3, 3,\n",
       "       1, 3, 3, 7, 3, 7, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 1, 3, 1, 3,\n",
       "       3, 4, 1, 2, 1, 5, 3, 2, 5, 3, 6, 3, 7, 3, 3, 3, 3, 1, 1, 7, 3, 1,\n",
       "       3, 3, 3, 7, 3, 3, 3, 1, 3, 1, 5, 3, 6, 6, 3, 3, 5, 4, 3, 1, 6, 3,\n",
       "       1, 1, 1, 3, 6, 1, 7, 3, 3, 3, 3, 5, 5, 5, 7, 3, 3, 3, 5, 3, 3, 3,\n",
       "       3, 2, 3, 2, 1, 7, 3, 5, 2, 3, 3, 3, 3, 5, 7, 4, 3, 3, 3, 4, 5, 1,\n",
       "       5, 3, 1, 1, 1, 1, 3, 3, 3, 3, 1, 4, 3, 3, 3, 3, 3, 3, 3, 7, 3, 3,\n",
       "       1, 4, 3, 3, 1, 3, 7, 3, 3, 3, 2, 3, 1, 3, 3, 7, 3, 3, 2, 3, 1, 5,\n",
       "       3, 4, 3, 2, 3, 6, 3, 1, 3, 3, 3, 1, 3, 2, 3, 3, 4, 3, 5, 3, 1, 7,\n",
       "       5, 3, 3, 1, 2, 3, 3, 3, 3, 3, 6, 3, 3, 3, 2, 3, 2, 5, 1, 3, 7, 3,\n",
       "       3, 2, 5, 3, 4, 2, 3, 2, 3, 3, 3, 3, 3, 2, 3, 6, 3, 3, 3, 1, 3, 3,\n",
       "       2, 3, 3, 2, 1, 5, 3, 3, 3, 3, 7, 3, 1, 3, 1, 2, 3, 5, 5, 3, 1, 5,\n",
       "       4, 3, 3, 3, 7, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 7, 3, 1, 2, 3,\n",
       "       3, 6, 3, 1, 5, 3, 7, 3, 3, 3, 3, 6, 3, 6, 3, 4, 3, 3, 1, 3, 7, 2,\n",
       "       6, 1, 3, 1, 1, 3, 1, 3, 3, 2, 3, 3, 1, 3, 3, 6, 6, 1, 3, 3, 3, 3,\n",
       "       5, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 1, 2, 3, 3, 2, 3, 2, 3, 5, 3, 3,\n",
       "       3, 3, 5, 3, 3, 3, 3, 4, 3, 4, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
       "       3, 3, 3, 4, 6, 3, 3, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psvm_pred_cv = Psvm_k.predict(X_test_cv1)\n",
    "psvm_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.4275510204081633\n",
      "SVM(POLY) f1 score is : 0.4252104279672686\n",
      "SVM(POLY) recall score is : 0.432174215827787\n",
      "SVM(POLY) precison score is : 0.6195674993728799\n",
      "SVM(POLY) precison score is : 0.6195674993728799\n",
      "SVM(POLY) matthews_corrcoef score is : 0.39666228548651233\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_cv1, psvm_pred_cv))\n",
    "print(\"SVM(POLY) f1 score is :\",f1_score(y_test_cv1, psvm_pred_cv, average='macro'))\n",
    "print(\"SVM(POLY) recall score is :\",recall_score(y_test_cv1, psvm_pred_cv, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_cv1, psvm_pred_cv, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_cv1, psvm_pred_cv, average='macro'))\n",
    "print(\"SVM(POLY) matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, psvm_pred_cv))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM MODEL POLY KERNAL USING TFIDF VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='poly',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the svm model\n",
    "Psvm_k.fit(X_train_tf1,y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_psvm_tf = cross_val_score(estimator=psvm_k, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_psvm_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 5, 1, 5, 4, 7, 4, 4, 2, 5, 1, 5, 6, 1, 4, 6, 6,\n",
       "       7, 5, 6, 2, 1, 6, 4, 5, 1, 6, 6, 6, 7, 3, 2, 6, 4, 6, 4, 7, 6, 6,\n",
       "       1, 6, 4, 4, 7, 1, 6, 1, 6, 6, 5, 7, 2, 1, 3, 4, 4, 6, 6, 6, 6, 5,\n",
       "       2, 6, 4, 6, 5, 2, 3, 2, 6, 6, 6, 2, 6, 7, 6, 3, 3, 6, 6, 3, 3, 6,\n",
       "       6, 3, 6, 6, 7, 4, 6, 6, 6, 1, 6, 7, 6, 7, 6, 7, 2, 4, 6, 6, 6, 2,\n",
       "       5, 4, 7, 4, 6, 5, 3, 4, 5, 7, 5, 3, 6, 6, 2, 4, 2, 7, 5, 7, 7, 1,\n",
       "       6, 6, 6, 6, 1, 6, 2, 3, 4, 3, 3, 6, 1, 4, 4, 6, 6, 5, 5, 6, 4, 2,\n",
       "       6, 6, 4, 6, 4, 6, 4, 5, 1, 6, 6, 7, 6, 3, 6, 6, 6, 5, 7, 1, 6, 7,\n",
       "       2, 3, 6, 3, 2, 6, 1, 7, 4, 6, 6, 6, 6, 6, 7, 1, 3, 2, 6, 7, 4, 6,\n",
       "       2, 6, 5, 1, 7, 7, 6, 1, 2, 7, 6, 2, 1, 7, 7, 7, 6, 1, 3, 2, 7, 6,\n",
       "       3, 4, 6, 2, 1, 6, 6, 7, 2, 6, 4, 1, 7, 6, 7, 7, 1, 4, 3, 1, 3, 5,\n",
       "       4, 6, 2, 7, 6, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 6, 2, 7, 2, 3, 2,\n",
       "       6, 3, 7, 5, 6, 6, 6, 1, 6, 6, 5, 6, 6, 6, 6, 6, 6, 2, 6, 7, 6, 6,\n",
       "       3, 6, 6, 7, 3, 6, 6, 6, 7, 6, 2, 6, 6, 4, 5, 6, 5, 5, 4, 1, 6, 4,\n",
       "       6, 3, 7, 5, 3, 1, 6, 3, 6, 6, 2, 2, 6, 7, 2, 6, 7, 6, 4, 6, 1, 7,\n",
       "       4, 1, 4, 6, 7, 6, 3, 6, 6, 3, 6, 1, 3, 6, 6, 6, 6, 6, 6, 6, 1, 6,\n",
       "       5, 5, 3, 5, 6, 1, 6, 1, 7, 2, 1, 3, 6, 6, 6, 7, 2, 5, 6, 2, 1, 6,\n",
       "       6, 6, 6, 1, 2, 4, 2, 6, 7, 4, 7, 6, 6, 7, 3, 2, 4, 4, 2, 3, 4, 5,\n",
       "       4, 6, 3, 6, 6, 7, 3, 7, 5, 3, 5, 2, 6, 4, 7, 7, 6, 5, 6, 5, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 7, 4, 2, 1, 3, 6, 6, 2, 6, 6, 1, 7, 4,\n",
       "       6, 4, 5, 2, 2, 6, 3, 5, 6, 7, 3, 6, 2, 6, 7, 1, 3, 7, 6, 7, 2, 7,\n",
       "       2, 6, 3, 2, 4, 3, 6, 7, 3, 1, 5, 5, 7, 4, 7, 1, 2, 1, 4, 6, 2, 6,\n",
       "       6, 7, 5, 4, 3, 4, 6, 5, 6, 7, 5, 7, 5, 4, 2, 5, 2, 5, 6, 4, 7, 1,\n",
       "       5, 5, 5, 2, 1, 2, 5, 6, 7, 6, 7, 7, 2, 5, 4, 1, 7, 6, 7, 4, 7, 3,\n",
       "       3, 5, 6, 6, 6, 6, 5, 6, 3, 4, 4, 2, 7, 6, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       6, 6, 7, 3, 6, 3, 6, 3, 7, 5, 5, 1, 2, 1, 3, 6, 6, 7, 7, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 7, 1, 1, 6, 7, 4, 1, 2, 3, 7, 6, 7, 7, 6, 2,\n",
       "       5, 7, 1, 4, 6, 6, 7, 6, 1, 7, 6, 1, 5, 6, 4, 1, 5, 6, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 6, 7, 4, 7, 6, 2, 2, 1, 6, 6, 1, 7, 4, 6, 1, 3, 6, 3,\n",
       "       6, 6, 1, 2, 1, 5, 6, 1, 5, 3, 6, 3, 7, 6, 6, 7, 3, 5, 5, 7, 6, 1,\n",
       "       2, 6, 6, 6, 6, 3, 3, 6, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       6, 1, 5, 4, 6, 1, 7, 6, 3, 3, 6, 5, 4, 5, 7, 5, 6, 2, 4, 3, 3, 5,\n",
       "       3, 7, 3, 4, 7, 7, 4, 6, 2, 3, 4, 7, 6, 6, 7, 6, 6, 6, 7, 4, 5, 6,\n",
       "       5, 4, 1, 1, 5, 7, 6, 3, 6, 6, 1, 7, 6, 2, 3, 6, 6, 4, 6, 7, 6, 1,\n",
       "       1, 6, 6, 4, 5, 6, 7, 6, 4, 6, 2, 1, 5, 3, 4, 7, 6, 3, 2, 6, 1, 6,\n",
       "       2, 4, 2, 6, 7, 6, 6, 5, 6, 6, 6, 6, 2, 6, 7, 6, 6, 4, 4, 4, 6, 7,\n",
       "       5, 2, 7, 1, 1, 6, 3, 4, 4, 3, 6, 6, 6, 6, 6, 7, 6, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 6, 4, 3, 2, 3, 1, 4, 6, 3, 2, 7, 6, 6, 4, 6, 5, 6, 6,\n",
       "       6, 3, 3, 2, 5, 6, 2, 3, 1, 3, 7, 3, 5, 3, 6, 7, 7, 5, 5, 6, 1, 6,\n",
       "       4, 5, 6, 7, 7, 6, 1, 3, 5, 6, 5, 3, 6, 3, 7, 3, 3, 7, 4, 6, 4, 7,\n",
       "       7, 7, 6, 1, 5, 3, 7, 3, 6, 3, 6, 7, 6, 6, 2, 4, 2, 6, 4, 6, 7, 1,\n",
       "       7, 1, 5, 1, 1, 2, 1, 3, 6, 6, 3, 3, 1, 6, 2, 6, 7, 6, 6, 5, 3, 6,\n",
       "       7, 6, 4, 2, 2, 6, 6, 2, 6, 6, 2, 4, 5, 5, 2, 2, 6, 2, 6, 5, 6, 6,\n",
       "       4, 3, 5, 6, 7, 3, 3, 6, 3, 5, 3, 6, 6, 6, 1, 2, 7, 6, 6, 5, 4, 6,\n",
       "       3, 6, 4, 4, 6, 3, 6, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psvm_pred_tf = Psvm_k.predict(X_test_tf1)\n",
    "psvm_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.6459183673469387\n",
      "SVM(POLY) f1 score is : 0.6641451304427157\n",
      "SVM(POLY) recall score is : 0.6497461716398538\n",
      "SVM(POLY) precison score is : 0.7300070535209428\n",
      "SVM(POLY) precison score is : 0.7300070535209428\n",
      "SVM(POLY) matthews_corrcoef score is : 0.6015740722166161\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_tf1, psvm_pred_tf))\n",
    "print(\"SVM(POLY) f1 score is :\",f1_score(y_test_tf1, psvm_pred_tf, average='macro'))\n",
    "print(\"SVM(POLY) recall score is :\",recall_score(y_test_tf1, psvm_pred_tf, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_tf1, psvm_pred_tf, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_tf1, psvm_pred_tf, average='macro'))\n",
    "print(\"SVM(POLY) matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, psvm_pred_tf))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM GAUSSIAN KERNAL USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using count vectorizer\n",
    "from sklearn.svm import SVC\n",
    "rsvm_k = SVC(kernel = 'rbf', random_state=0)\n",
    "rsvm_k.fit(X_train_cv1,y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_rsvm_cv = cross_val_score(estimator=rsvm_k, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_rsvm_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 2, 1, 5, 4, 7, 4, 6, 2, 2, 6, 5, 7, 6, 4, 6, 7,\n",
       "       7, 7, 1, 2, 1, 4, 2, 1, 1, 6, 4, 2, 7, 3, 2, 6, 2, 1, 5, 6, 6, 6,\n",
       "       1, 6, 4, 4, 7, 6, 7, 1, 6, 6, 5, 7, 2, 1, 3, 4, 4, 4, 7, 5, 4, 1,\n",
       "       2, 6, 4, 6, 5, 2, 3, 6, 6, 7, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 6,\n",
       "       7, 3, 7, 6, 7, 4, 6, 7, 5, 5, 6, 7, 3, 7, 6, 7, 2, 4, 4, 7, 6, 2,\n",
       "       5, 4, 7, 4, 6, 2, 3, 4, 5, 7, 5, 3, 5, 1, 2, 4, 2, 7, 5, 7, 7, 2,\n",
       "       1, 7, 7, 6, 1, 2, 2, 3, 6, 3, 3, 5, 1, 4, 4, 6, 2, 2, 1, 1, 4, 5,\n",
       "       7, 7, 2, 6, 5, 7, 4, 2, 1, 5, 6, 7, 5, 3, 6, 6, 6, 5, 7, 5, 6, 6,\n",
       "       2, 3, 6, 3, 2, 6, 1, 7, 4, 7, 5, 4, 6, 4, 7, 1, 3, 2, 7, 7, 4, 2,\n",
       "       6, 2, 5, 1, 7, 7, 4, 3, 2, 7, 6, 2, 5, 7, 5, 7, 6, 1, 3, 2, 6, 4,\n",
       "       3, 4, 4, 2, 1, 7, 5, 7, 2, 6, 2, 1, 6, 6, 1, 7, 3, 4, 3, 6, 3, 5,\n",
       "       4, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       5, 3, 7, 5, 7, 3, 6, 1, 4, 5, 5, 7, 7, 6, 6, 6, 6, 2, 7, 4, 6, 3,\n",
       "       3, 7, 2, 7, 3, 1, 6, 6, 1, 4, 2, 5, 1, 1, 4, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 2, 7, 7, 2, 2, 6, 2, 7, 7, 6, 7, 4, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 7, 1, 2, 6, 4, 7, 6, 1, 5,\n",
       "       5, 5, 3, 5, 5, 1, 6, 1, 7, 2, 1, 3, 7, 7, 6, 7, 2, 1, 7, 2, 1, 6,\n",
       "       7, 1, 7, 1, 2, 4, 2, 1, 7, 4, 7, 6, 6, 7, 3, 2, 6, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 6, 3, 7, 7, 3, 5, 2, 6, 6, 5, 6, 2, 5, 6, 4, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 7, 4, 2, 1, 3, 1, 4, 2, 6, 6, 5, 7, 4,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 7, 6, 3, 6, 2, 6, 7, 1, 3, 7, 6, 7, 2, 7,\n",
       "       2, 1, 3, 6, 4, 3, 7, 7, 3, 1, 5, 5, 7, 7, 7, 1, 2, 1, 2, 6, 6, 2,\n",
       "       7, 5, 2, 4, 3, 4, 6, 2, 2, 7, 5, 7, 4, 4, 2, 1, 2, 5, 1, 4, 7, 5,\n",
       "       1, 2, 6, 2, 1, 2, 2, 6, 7, 4, 7, 7, 2, 5, 4, 1, 7, 6, 7, 4, 7, 3,\n",
       "       3, 3, 3, 5, 2, 6, 5, 6, 3, 5, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 4, 3, 3, 2, 3, 6, 3, 7, 5, 2, 1, 2, 1, 3, 6, 7, 7, 6, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 7, 2,\n",
       "       5, 7, 1, 6, 5, 7, 7, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 5, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 7, 4, 2, 2, 1, 6, 6, 1, 6, 5, 6, 1, 3, 1, 3,\n",
       "       6, 6, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 7, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 7, 6, 3, 3, 1, 3, 5, 5, 2, 6, 6, 7, 7, 5, 7, 7, 1, 7, 4,\n",
       "       1, 1, 1, 3, 6, 1, 7, 5, 3, 3, 6, 5, 7, 5, 7, 2, 6, 2, 7, 3, 3, 5,\n",
       "       3, 5, 3, 4, 1, 7, 3, 7, 2, 4, 2, 7, 7, 5, 7, 7, 6, 6, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 7, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 6, 7, 4, 3, 4, 2, 4, 5, 3, 4, 7, 4, 3, 2, 3, 1, 5,\n",
       "       2, 4, 4, 5, 7, 7, 6, 5, 2, 3, 3, 7, 2, 2, 7, 1, 4, 4, 5, 4, 7, 7,\n",
       "       5, 2, 7, 1, 2, 4, 3, 3, 4, 3, 7, 4, 2, 6, 2, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 2, 3, 2, 3, 6, 3, 2, 3, 2, 7, 7, 2, 4, 6, 5, 2, 6,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 7, 7, 3, 5, 3, 5, 7, 7, 5, 5, 7, 1, 5,\n",
       "       4, 5, 7, 7, 7, 6, 1, 3, 5, 6, 5, 3, 6, 3, 7, 3, 3, 7, 4, 1, 2, 2,\n",
       "       6, 7, 7, 1, 7, 3, 7, 3, 7, 3, 7, 7, 6, 4, 2, 4, 2, 7, 5, 6, 7, 2,\n",
       "       7, 1, 1, 1, 1, 2, 1, 3, 5, 2, 3, 3, 1, 4, 6, 7, 7, 1, 7, 6, 3, 7,\n",
       "       5, 2, 5, 2, 2, 6, 3, 2, 6, 6, 2, 1, 5, 5, 2, 2, 6, 2, 4, 5, 6, 4,\n",
       "       4, 3, 5, 1, 7, 3, 3, 7, 3, 5, 3, 6, 7, 6, 1, 6, 7, 6, 6, 6, 3, 7,\n",
       "       3, 6, 4, 4, 6, 3, 6, 7, 7, 3, 3, 2])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rsvm_pred_cv = rsvm_k.predict(X_test_cv1)\n",
    "rsvm_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.7285714285714285\n",
      "SVM(GAUSSIAN) f1 score is : 0.7291178064515587\n",
      "SVM(GAUSSIAN) recall score is : 0.7297118202418095\n",
      "SVM(GAUSSIAN) precison score is : 0.743496271423443\n",
      "SVM(GAUSSIAN) precison score is : 0.743496271423443\n",
      "SVM(GAUSSIAN) matthews_corrcoef score is : 0.6859557574584636\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_cv1, rsvm_pred_cv))\n",
    "print(\"SVM(GAUSSIAN) f1 score is :\",f1_score(y_test_cv1, rsvm_pred_cv, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) recall score is :\",recall_score(y_test_cv1, rsvm_pred_cv, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_cv1, rsvm_pred_cv, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_cv1, rsvm_pred_cv, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, rsvm_pred_cv))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM GAUSSAIAN USING TFIDF VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the svm model\n",
    "rsvm_k.fit(X_train_tf1,y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_psvm_tf = cross_val_score(estimator=psvm_k, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_psvm_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 2, 1, 5, 4, 7, 4, 4, 2, 1, 4, 5, 6, 6, 4, 7, 6,\n",
       "       7, 5, 1, 2, 1, 4, 4, 1, 1, 6, 4, 2, 7, 3, 2, 6, 4, 1, 4, 7, 6, 6,\n",
       "       1, 6, 4, 4, 7, 6, 6, 1, 6, 6, 5, 7, 2, 1, 3, 4, 4, 4, 6, 1, 4, 5,\n",
       "       2, 6, 4, 6, 5, 2, 3, 2, 6, 6, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 6,\n",
       "       6, 3, 6, 6, 7, 4, 6, 6, 5, 1, 6, 7, 3, 7, 6, 7, 2, 4, 6, 1, 6, 2,\n",
       "       5, 4, 7, 4, 6, 5, 3, 4, 5, 7, 5, 3, 2, 1, 2, 4, 2, 7, 5, 7, 7, 2,\n",
       "       6, 6, 2, 6, 1, 6, 2, 3, 6, 3, 3, 1, 1, 4, 4, 6, 6, 5, 1, 1, 4, 2,\n",
       "       6, 6, 2, 6, 5, 6, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 6,\n",
       "       2, 3, 6, 3, 2, 6, 1, 7, 4, 6, 6, 4, 6, 4, 7, 1, 3, 2, 1, 7, 4, 2,\n",
       "       2, 2, 5, 1, 7, 7, 4, 5, 2, 7, 6, 2, 1, 7, 5, 7, 6, 1, 3, 2, 7, 4,\n",
       "       3, 4, 4, 2, 1, 6, 1, 7, 2, 6, 2, 1, 6, 6, 1, 7, 1, 4, 3, 1, 3, 5,\n",
       "       4, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       1, 3, 7, 5, 6, 6, 6, 1, 4, 5, 5, 4, 7, 6, 6, 6, 6, 2, 7, 7, 6, 3,\n",
       "       3, 6, 2, 7, 3, 1, 6, 6, 1, 4, 2, 5, 1, 1, 4, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 6, 7, 7, 2, 2, 7, 2, 6, 7, 6, 4, 6, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 6, 4, 3, 6, 1, 3, 6, 1, 2, 6, 4, 6, 6, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 7, 2, 1, 3, 6, 6, 6, 7, 2, 1, 6, 2, 1, 6,\n",
       "       6, 1, 6, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 6, 4, 2, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 6, 3, 7, 5, 3, 5, 2, 6, 4, 2, 7, 6, 5, 6, 4, 7, 6,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 7, 4, 2, 1, 3, 1, 6, 2, 6, 6, 5, 7, 4,\n",
       "       6, 4, 5, 2, 2, 6, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 4, 6, 7, 2, 7,\n",
       "       2, 1, 3, 2, 4, 3, 6, 7, 3, 1, 5, 5, 7, 4, 7, 1, 2, 1, 4, 6, 2, 2,\n",
       "       6, 1, 2, 4, 3, 4, 6, 2, 2, 7, 5, 7, 4, 4, 2, 5, 2, 5, 1, 4, 7, 1,\n",
       "       1, 2, 6, 2, 1, 2, 1, 6, 7, 4, 7, 7, 2, 5, 4, 1, 7, 6, 7, 4, 7, 3,\n",
       "       3, 3, 2, 4, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 6, 3, 3, 2, 3, 6, 3, 7, 5, 5, 1, 2, 1, 3, 6, 6, 7, 7, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 6, 2,\n",
       "       5, 6, 1, 4, 1, 6, 7, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 6, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 2, 7, 4, 7, 4, 2, 2, 1, 6, 6, 1, 6, 1, 6, 1, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 1, 5, 3, 6, 3, 7, 6, 2, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 7, 6, 3, 3, 1, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       1, 1, 5, 4, 6, 1, 7, 4, 3, 3, 6, 5, 4, 5, 7, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 2, 3, 4, 1, 7, 4, 5, 2, 3, 4, 7, 6, 5, 7, 4, 6, 6, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 7, 6, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 6, 7, 4, 3, 6, 2, 4, 5, 3, 6, 7, 4, 3, 2, 3, 1, 5,\n",
       "       2, 4, 4, 5, 7, 6, 6, 5, 2, 2, 2, 1, 2, 2, 7, 6, 4, 4, 4, 4, 1, 7,\n",
       "       5, 2, 7, 1, 5, 6, 3, 4, 4, 3, 6, 4, 2, 6, 6, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 4, 3, 2, 3, 6, 4, 2, 3, 2, 7, 6, 2, 4, 6, 5, 6, 6,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 3, 5, 3, 1, 7, 7, 5, 5, 6, 1, 1,\n",
       "       4, 5, 6, 7, 7, 6, 1, 3, 5, 6, 1, 3, 6, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       7, 7, 6, 1, 2, 3, 7, 3, 6, 3, 6, 7, 6, 6, 2, 4, 2, 1, 5, 6, 7, 1,\n",
       "       7, 1, 5, 1, 1, 2, 1, 3, 6, 2, 3, 3, 1, 6, 2, 6, 7, 1, 7, 5, 3, 6,\n",
       "       5, 2, 4, 2, 2, 6, 3, 2, 6, 6, 2, 5, 5, 5, 2, 2, 6, 2, 6, 5, 6, 6,\n",
       "       4, 3, 5, 1, 7, 3, 3, 6, 3, 5, 3, 6, 6, 6, 1, 3, 7, 7, 6, 6, 4, 6,\n",
       "       3, 6, 4, 4, 6, 3, 6, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rsvm_pred_tf = rsvm_k.predict(X_test_tf1)\n",
    "rsvm_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.7561224489795918\n",
      "SVM(GAUSSIAN) f1 score is : 0.7604806966362749\n",
      "SVM(GAUSSIAN) recall score is : 0.7571660022153222\n",
      "SVM(GAUSSIAN) precison score is : 0.7789350219354324\n",
      "SVM(GAUSSIAN) precison score is : 0.7789350219354324\n",
      "SVM(GAUSSIAN) matthews_corrcoef score is : 0.7186124945138185\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_tf1, rsvm_pred_tf))\n",
    "print(\"SVM(GAUSSIAN) f1 score is :\",f1_score(y_test_tf1, rsvm_pred_tf, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) recall score is :\",recall_score(y_test_tf1, rsvm_pred_tf, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_tf1, rsvm_pred_tf, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_tf1, rsvm_pred_tf, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, rsvm_pred_tf))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RANDOM FOREST CLASSIFIRER USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=None, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=200,\n",
       "                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting random forest classifier \n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_k = RandomForestClassifier(n_estimators=200, random_state=0)\n",
    "rf_k.fit(X_train_cv1, y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_rf_cv = cross_val_score(estimator=rf_k, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_bnk_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 1, 6, 2, 3, 1, 3, 4, 7, 4, 6, 2, 2, 6, 5, 1, 6, 4, 6, 7,\n",
       "       7, 5, 1, 2, 1, 4, 2, 1, 1, 6, 2, 2, 7, 3, 2, 4, 2, 1, 4, 6, 4, 6,\n",
       "       1, 1, 4, 4, 7, 6, 6, 1, 6, 3, 5, 7, 2, 1, 3, 4, 6, 4, 4, 1, 4, 1,\n",
       "       3, 6, 6, 6, 5, 2, 3, 2, 6, 6, 2, 2, 2, 7, 6, 3, 3, 4, 4, 3, 3, 6,\n",
       "       4, 3, 1, 6, 6, 1, 6, 6, 5, 1, 6, 7, 3, 6, 6, 7, 2, 3, 1, 1, 6, 2,\n",
       "       5, 4, 6, 4, 6, 2, 3, 6, 5, 7, 5, 3, 5, 1, 2, 4, 2, 7, 5, 7, 1, 2,\n",
       "       1, 1, 2, 6, 1, 2, 3, 3, 6, 3, 3, 1, 1, 4, 4, 6, 2, 2, 1, 1, 4, 2,\n",
       "       6, 6, 2, 6, 5, 7, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 1, 7, 1, 6, 6,\n",
       "       2, 3, 6, 3, 2, 3, 1, 7, 4, 4, 2, 4, 6, 4, 6, 1, 3, 2, 1, 7, 4, 2,\n",
       "       6, 2, 5, 1, 7, 7, 4, 3, 2, 7, 6, 2, 5, 7, 5, 7, 6, 1, 3, 2, 6, 4,\n",
       "       3, 4, 4, 2, 1, 6, 5, 7, 2, 6, 2, 1, 2, 6, 1, 7, 3, 7, 3, 1, 3, 5,\n",
       "       3, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 2, 2, 7, 2, 3, 2,\n",
       "       5, 3, 7, 5, 7, 3, 6, 1, 4, 5, 5, 4, 7, 6, 6, 6, 6, 2, 6, 7, 6, 3,\n",
       "       3, 7, 2, 7, 3, 1, 6, 6, 1, 4, 2, 1, 1, 1, 5, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 6, 5, 3, 1, 4, 3, 2, 5, 6, 2, 2, 6, 2, 1, 7, 1, 4, 6, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 1, 3, 6, 1, 3, 6, 1, 2, 6, 6, 6, 6, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 6, 2, 1, 3, 4, 6, 6, 7, 2, 1, 7, 2, 1, 6,\n",
       "       5, 1, 7, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 3, 4, 3, 3, 4, 1,\n",
       "       4, 6, 3, 6, 2, 6, 3, 7, 1, 3, 2, 2, 6, 6, 2, 6, 2, 5, 6, 4, 6, 1,\n",
       "       4, 2, 6, 6, 1, 3, 6, 4, 7, 7, 4, 2, 1, 3, 6, 1, 2, 6, 1, 5, 7, 6,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 6, 6, 7, 2, 7,\n",
       "       2, 1, 3, 2, 4, 3, 6, 7, 3, 1, 5, 2, 7, 4, 7, 1, 2, 1, 4, 6, 2, 2,\n",
       "       2, 5, 2, 4, 3, 2, 1, 5, 2, 7, 5, 7, 2, 4, 2, 1, 2, 5, 1, 2, 7, 1,\n",
       "       1, 2, 6, 2, 1, 2, 2, 1, 7, 3, 7, 1, 2, 5, 4, 1, 7, 6, 3, 4, 7, 3,\n",
       "       3, 3, 3, 4, 2, 6, 5, 6, 3, 6, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 2, 3, 3, 2, 3, 6, 3, 7, 5, 2, 1, 2, 1, 3, 6, 6, 7, 7, 4, 3, 5,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 6, 2,\n",
       "       5, 7, 1, 3, 1, 1, 1, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 4, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 6, 3, 2, 2, 1, 6, 6, 1, 6, 1, 6, 1, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 7, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 2, 6, 3, 3, 1, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       1, 1, 5, 4, 4, 1, 7, 1, 3, 3, 6, 5, 5, 5, 7, 2, 6, 2, 5, 3, 3, 2,\n",
       "       3, 2, 3, 4, 1, 7, 4, 5, 2, 3, 4, 7, 7, 5, 7, 4, 6, 1, 7, 4, 5, 1,\n",
       "       5, 6, 1, 1, 5, 1, 6, 3, 6, 4, 1, 7, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 6, 6, 4, 5, 6, 7, 3, 3, 3, 2, 4, 1, 3, 4, 7, 4, 3, 2, 3, 1, 1,\n",
       "       2, 4, 6, 5, 7, 4, 6, 1, 2, 3, 3, 1, 2, 2, 7, 1, 4, 4, 5, 4, 1, 7,\n",
       "       5, 2, 7, 1, 2, 3, 3, 3, 4, 3, 6, 4, 2, 6, 2, 7, 2, 5, 1, 4, 6, 7,\n",
       "       3, 2, 5, 4, 4, 4, 3, 2, 3, 1, 3, 2, 3, 2, 7, 6, 2, 6, 6, 5, 2, 4,\n",
       "       4, 3, 3, 2, 5, 5, 2, 3, 6, 3, 7, 3, 5, 3, 5, 7, 7, 5, 5, 6, 1, 1,\n",
       "       2, 3, 1, 7, 7, 6, 1, 3, 5, 2, 5, 3, 6, 3, 7, 3, 3, 7, 4, 1, 4, 2,\n",
       "       6, 6, 6, 1, 5, 3, 7, 3, 6, 3, 6, 7, 6, 6, 2, 4, 3, 7, 4, 6, 7, 5,\n",
       "       7, 1, 4, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 3, 2, 6, 7, 1, 6, 1, 3, 6,\n",
       "       5, 2, 4, 2, 2, 6, 3, 2, 6, 6, 2, 1, 5, 5, 2, 2, 6, 2, 2, 5, 6, 6,\n",
       "       4, 3, 5, 1, 7, 3, 3, 4, 3, 2, 3, 6, 7, 6, 1, 3, 7, 1, 6, 2, 3, 3,\n",
       "       3, 6, 4, 4, 6, 3, 6, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rf_pred_cv = rf_k.predict(X_test_cv1)\n",
    "rf_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random forest Accuracy is: 0.7214285714285714\n",
      "random forest f1 score is : 0.7173592139089454\n",
      "random forest recall score is : 0.721082846105061\n",
      "random forest precison score is : 0.7334969674222925\n",
      "random forest precison score is : 0.7334969674222925\n",
      "random forest matthews_corrcoef score is : 0.6775581528698955\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"random forest Accuracy is:\",metrics.accuracy_score(y_test_cv1, rf_pred_cv))\n",
    "print(\"random forest f1 score is :\",f1_score(y_test_cv1, rf_pred_cv, average='macro'))\n",
    "print(\"random forest recall score is :\",recall_score(y_test_cv1, rf_pred_cv, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_cv1, rf_pred_cv, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_cv1, rf_pred_cv, average='macro'))\n",
    "print(\"random forest matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, rf_pred_cv))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RANDOM FOREST CLASSIFIRER USING TFIDF VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=None, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=200,\n",
       "                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting random forest using ifdf\n",
    "rf_k.fit(X_train_tf1, y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_rf_tf = cross_val_score(estimator=rf_k, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_bnk_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 2, 1, 5, 4, 7, 4, 6, 2, 5, 6, 5, 6, 6, 4, 6, 7,\n",
       "       7, 5, 1, 2, 1, 4, 5, 5, 1, 6, 2, 2, 7, 3, 2, 4, 2, 1, 4, 6, 6, 6,\n",
       "       1, 6, 4, 4, 7, 6, 6, 1, 6, 3, 5, 7, 2, 1, 3, 4, 4, 4, 7, 1, 4, 1,\n",
       "       2, 6, 6, 6, 5, 2, 3, 2, 6, 6, 2, 2, 2, 7, 6, 3, 3, 4, 4, 3, 3, 6,\n",
       "       4, 3, 1, 6, 6, 1, 6, 6, 5, 1, 6, 7, 2, 7, 6, 7, 2, 4, 4, 1, 6, 2,\n",
       "       5, 4, 7, 4, 6, 5, 3, 4, 5, 7, 5, 3, 5, 1, 2, 4, 2, 7, 5, 7, 1, 2,\n",
       "       1, 1, 6, 6, 1, 2, 3, 3, 6, 3, 3, 5, 1, 4, 4, 6, 2, 2, 5, 1, 4, 5,\n",
       "       6, 6, 4, 6, 4, 7, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 6,\n",
       "       2, 3, 6, 3, 2, 6, 1, 7, 4, 6, 2, 4, 6, 4, 7, 1, 3, 2, 1, 7, 4, 2,\n",
       "       6, 2, 5, 1, 7, 7, 4, 6, 2, 7, 6, 2, 1, 7, 5, 7, 6, 1, 3, 2, 6, 4,\n",
       "       3, 4, 4, 2, 1, 6, 5, 7, 2, 6, 2, 1, 6, 6, 1, 7, 1, 4, 3, 1, 3, 5,\n",
       "       4, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 2, 2, 7, 2, 3, 2,\n",
       "       1, 3, 7, 5, 7, 3, 6, 1, 4, 1, 5, 4, 7, 6, 6, 6, 6, 2, 7, 7, 6, 3,\n",
       "       3, 7, 2, 7, 3, 1, 6, 6, 1, 4, 2, 5, 1, 1, 5, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 6, 5, 3, 1, 4, 3, 6, 7, 6, 2, 2, 6, 2, 1, 7, 6, 4, 6, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 6, 1, 2, 6, 4, 6, 6, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 6, 2, 1, 3, 6, 7, 6, 7, 2, 1, 7, 2, 1, 6,\n",
       "       1, 1, 6, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 3, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 6, 3, 7, 6, 3, 2, 2, 7, 6, 7, 6, 2, 5, 6, 4, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 7, 4, 2, 1, 3, 1, 1, 2, 6, 1, 5, 7, 6,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 4, 6, 7, 2, 7,\n",
       "       2, 1, 3, 2, 4, 3, 6, 7, 3, 1, 5, 2, 7, 4, 7, 1, 2, 1, 4, 5, 2, 2,\n",
       "       6, 1, 2, 4, 3, 4, 6, 5, 2, 7, 5, 7, 2, 4, 2, 1, 2, 5, 1, 4, 7, 1,\n",
       "       1, 2, 6, 2, 1, 2, 5, 1, 7, 4, 7, 7, 2, 5, 4, 1, 7, 6, 7, 4, 7, 3,\n",
       "       3, 3, 3, 4, 2, 7, 5, 6, 3, 7, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 6, 3, 3, 2, 3, 6, 3, 7, 5, 4, 1, 2, 1, 3, 6, 7, 7, 7, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 6, 2,\n",
       "       5, 7, 1, 3, 1, 6, 6, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 2, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 7, 4, 2, 2, 1, 6, 6, 1, 6, 1, 6, 1, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 6, 5, 3, 6, 3, 7, 7, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 4, 6, 3, 3, 1, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       1, 1, 5, 4, 6, 1, 7, 1, 3, 3, 6, 5, 5, 5, 7, 2, 4, 2, 5, 3, 3, 2,\n",
       "       3, 5, 3, 4, 1, 7, 4, 5, 2, 4, 4, 7, 7, 5, 7, 4, 6, 1, 7, 4, 1, 1,\n",
       "       5, 6, 1, 1, 5, 1, 6, 3, 6, 4, 1, 4, 6, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 6, 7, 4, 3, 6, 2, 4, 1, 3, 6, 7, 4, 3, 2, 3, 1, 1,\n",
       "       2, 4, 4, 5, 7, 6, 6, 5, 2, 3, 3, 1, 2, 6, 7, 1, 4, 4, 4, 4, 5, 7,\n",
       "       5, 2, 7, 1, 2, 1, 3, 4, 6, 3, 6, 4, 2, 6, 6, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 7, 3, 2, 3, 1, 3, 2, 3, 2, 7, 7, 2, 6, 6, 5, 2, 4,\n",
       "       4, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 4, 5, 3, 5, 7, 7, 5, 5, 7, 1, 1,\n",
       "       4, 5, 1, 7, 7, 6, 1, 3, 5, 2, 5, 3, 6, 3, 7, 3, 3, 7, 4, 1, 4, 2,\n",
       "       6, 7, 7, 1, 5, 3, 7, 3, 6, 3, 6, 7, 6, 6, 2, 4, 2, 7, 5, 6, 7, 2,\n",
       "       7, 1, 4, 1, 1, 2, 1, 3, 6, 2, 3, 3, 1, 6, 2, 6, 7, 1, 7, 1, 3, 6,\n",
       "       5, 2, 4, 2, 2, 6, 3, 2, 6, 6, 2, 5, 5, 5, 2, 2, 6, 2, 6, 5, 6, 4,\n",
       "       4, 3, 5, 1, 7, 3, 3, 6, 3, 5, 3, 6, 7, 6, 1, 3, 7, 6, 6, 2, 3, 6,\n",
       "       3, 6, 4, 4, 6, 3, 4, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rf_pred_tf = rf_k.predict(X_test_tf1)\n",
    "rf_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random forest Accuracy is: 0.7418367346938776\n",
      "random forest f1 score is : 0.7407928848451814\n",
      "random forest recall score is : 0.742711403973978\n",
      "random forest precison score is : 0.7510759877074175\n",
      "random forest precison score is : 0.7510759877074175\n",
      "random forest matthews_corrcoef score is : 0.7007738302494091\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"random forest Accuracy is:\",metrics.accuracy_score(y_test_tf1, rf_pred_tf))\n",
    "print(\"random forest f1 score is :\",f1_score(y_test_tf1, rf_pred_tf, average='macro'))\n",
    "print(\"random forest recall score is :\",recall_score(y_test_tf1, rf_pred_tf, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_tf1, rf_pred_tf, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_tf1, rf_pred_tf, average='macro'))\n",
    "print(\"random forest matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, rf_pred_tf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DECESSION TREE CLASSIFIER USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting decession tree using \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt_k = DecisionTreeClassifier()\n",
    "dt_k.fit(X_train_cv1,y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_dt_cv = cross_val_score(estimator=dt_k, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_bnk_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 5, 1, 5, 4, 7, 4, 4, 2, 2, 1, 5, 1, 6, 4, 6, 7,\n",
       "       7, 2, 1, 2, 1, 6, 2, 1, 1, 6, 2, 2, 7, 3, 2, 6, 2, 1, 3, 6, 4, 3,\n",
       "       1, 6, 4, 4, 6, 6, 6, 1, 1, 3, 5, 7, 2, 1, 3, 2, 6, 4, 7, 1, 4, 5,\n",
       "       3, 2, 6, 6, 5, 2, 3, 2, 6, 6, 2, 5, 2, 7, 6, 3, 3, 2, 4, 3, 3, 1,\n",
       "       4, 3, 1, 6, 6, 1, 6, 6, 5, 5, 4, 7, 3, 7, 6, 7, 2, 3, 6, 1, 6, 2,\n",
       "       5, 4, 7, 4, 6, 4, 3, 6, 5, 7, 5, 3, 5, 1, 2, 4, 2, 7, 5, 7, 1, 2,\n",
       "       1, 1, 6, 7, 1, 2, 3, 3, 6, 3, 3, 5, 1, 4, 4, 6, 7, 2, 1, 1, 4, 2,\n",
       "       6, 6, 2, 6, 5, 7, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 1,\n",
       "       2, 3, 7, 3, 2, 3, 1, 7, 4, 4, 2, 4, 6, 4, 6, 1, 3, 2, 6, 7, 3, 2,\n",
       "       6, 2, 5, 1, 7, 7, 4, 3, 2, 7, 6, 2, 5, 7, 5, 7, 4, 1, 3, 4, 6, 4,\n",
       "       3, 4, 4, 2, 1, 4, 2, 7, 2, 6, 3, 1, 6, 6, 1, 7, 3, 4, 3, 1, 3, 5,\n",
       "       3, 2, 2, 6, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       5, 3, 6, 5, 7, 3, 6, 1, 4, 5, 5, 7, 6, 6, 6, 6, 6, 2, 6, 7, 6, 3,\n",
       "       3, 6, 2, 7, 3, 1, 6, 4, 7, 4, 2, 1, 1, 5, 3, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 6, 5, 3, 1, 2, 3, 2, 7, 6, 2, 2, 6, 2, 1, 7, 6, 4, 6, 1, 7,\n",
       "       6, 1, 4, 1, 7, 1, 3, 3, 6, 3, 6, 1, 3, 4, 1, 2, 2, 6, 7, 6, 1, 5,\n",
       "       5, 5, 3, 5, 5, 1, 6, 1, 6, 2, 1, 3, 4, 7, 6, 7, 2, 1, 7, 2, 1, 6,\n",
       "       5, 1, 7, 1, 2, 4, 2, 2, 7, 4, 7, 6, 7, 7, 3, 2, 3, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 2, 6, 3, 7, 1, 3, 2, 2, 7, 6, 5, 6, 2, 5, 6, 4, 6, 1,\n",
       "       4, 2, 6, 6, 1, 3, 6, 4, 7, 5, 4, 2, 1, 3, 1, 6, 2, 6, 6, 5, 7, 6,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 6, 3, 6, 2, 6, 7, 1, 3, 6, 6, 7, 2, 7,\n",
       "       2, 1, 3, 2, 4, 3, 6, 6, 3, 1, 5, 2, 7, 4, 2, 1, 2, 1, 4, 2, 2, 2,\n",
       "       5, 5, 2, 2, 3, 4, 1, 5, 2, 7, 5, 7, 3, 7, 2, 5, 2, 2, 7, 6, 7, 5,\n",
       "       1, 2, 6, 2, 1, 2, 2, 6, 7, 3, 7, 7, 2, 5, 4, 1, 7, 6, 3, 3, 7, 3,\n",
       "       3, 3, 3, 4, 2, 6, 5, 4, 3, 6, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 5, 3,\n",
       "       6, 1, 3, 3, 2, 3, 6, 3, 7, 5, 2, 1, 2, 1, 3, 6, 6, 7, 6, 4, 3, 5,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 6, 7, 6, 5,\n",
       "       5, 7, 1, 3, 1, 6, 6, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 4, 3, 6, 6, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 6, 3, 2, 2, 1, 6, 6, 1, 6, 1, 6, 1, 3, 5, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 7, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 5, 6, 3, 3, 1, 3, 5, 1, 2, 3, 6, 7, 7, 5, 7, 7, 1, 7, 4,\n",
       "       1, 1, 1, 4, 4, 1, 7, 1, 3, 3, 6, 1, 5, 5, 7, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 2, 3, 4, 5, 7, 4, 1, 4, 3, 4, 6, 7, 5, 7, 4, 6, 1, 7, 4, 5, 1,\n",
       "       5, 6, 1, 1, 5, 1, 7, 3, 6, 3, 1, 7, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 6, 6, 4, 5, 6, 5, 3, 3, 6, 2, 4, 1, 3, 4, 7, 4, 3, 2, 3, 1, 5,\n",
       "       3, 4, 3, 4, 7, 4, 6, 1, 2, 3, 3, 1, 2, 2, 7, 1, 4, 4, 5, 4, 1, 7,\n",
       "       5, 2, 7, 1, 5, 3, 3, 3, 4, 3, 4, 4, 2, 6, 2, 7, 2, 5, 1, 2, 6, 7,\n",
       "       3, 2, 5, 4, 4, 7, 3, 2, 3, 1, 3, 2, 3, 2, 7, 7, 3, 6, 6, 5, 2, 4,\n",
       "       4, 3, 3, 2, 5, 5, 2, 3, 1, 3, 6, 3, 5, 3, 5, 6, 7, 5, 5, 6, 1, 5,\n",
       "       2, 5, 2, 7, 7, 6, 1, 3, 5, 2, 5, 3, 6, 3, 7, 3, 3, 7, 4, 5, 4, 2,\n",
       "       7, 7, 7, 1, 5, 3, 6, 3, 6, 3, 7, 7, 6, 6, 2, 6, 2, 7, 5, 7, 6, 5,\n",
       "       7, 1, 1, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 3, 2, 2, 7, 1, 6, 6, 3, 6,\n",
       "       5, 2, 5, 2, 2, 6, 3, 2, 6, 6, 2, 1, 2, 5, 2, 2, 6, 2, 2, 5, 6, 6,\n",
       "       4, 3, 5, 1, 7, 3, 3, 7, 3, 2, 3, 6, 6, 4, 1, 3, 7, 6, 6, 2, 3, 3,\n",
       "       3, 6, 4, 4, 6, 3, 4, 5, 6, 3, 3, 5])"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "dt_pred_cv = dt_k.predict(X_test_cv1)\n",
    "dt_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "decison tree Accuracy is: 0.6989795918367347\n",
      "decison tree f1 score is : 0.6972805364193234\n",
      "decison tree recall score is : 0.6982727990814358\n",
      "decison tree precison score is : 0.7087808464344663\n",
      "decison tree precison score is : 0.7087808464344663\n",
      "decison tree matthews_corrcoef score is : 0.650516121899878\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"decison tree Accuracy is:\",metrics.accuracy_score(y_test_cv1, dt_pred_cv))\n",
    "print(\"decison tree f1 score is :\",f1_score(y_test_cv1, dt_pred_cv, average='macro'))\n",
    "print(\"decison tree recall score is :\",recall_score(y_test_cv1, dt_pred_cv, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_cv1, dt_pred_cv, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_cv1, dt_pred_cv, average='macro'))\n",
    "print(\"decison tree matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, dt_pred_cv))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DECESSION TREE CLASSIFIER USING TFIDF "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting decession tree using \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt_k = DecisionTreeClassifier()\n",
    "dt_k.fit(X_train_tf1,y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_dt_tf = cross_val_score(estimator=dt, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_dt_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 3, 1, 3, 4, 7, 4, 4, 2, 2, 2, 5, 6, 6, 4, 6, 6,\n",
       "       7, 5, 1, 2, 1, 2, 4, 1, 1, 6, 5, 2, 7, 3, 2, 4, 2, 1, 4, 6, 6, 2,\n",
       "       1, 7, 2, 4, 7, 6, 6, 1, 1, 2, 5, 7, 2, 1, 3, 4, 4, 5, 4, 1, 6, 1,\n",
       "       4, 2, 6, 6, 5, 2, 3, 2, 6, 6, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 2,\n",
       "       5, 3, 5, 6, 7, 4, 6, 6, 1, 5, 4, 6, 3, 7, 6, 7, 2, 4, 7, 1, 6, 2,\n",
       "       5, 4, 7, 4, 6, 5, 3, 6, 5, 7, 5, 3, 6, 1, 2, 4, 2, 7, 5, 7, 1, 2,\n",
       "       1, 1, 6, 1, 1, 2, 3, 3, 6, 3, 3, 5, 1, 4, 4, 6, 2, 2, 1, 1, 4, 2,\n",
       "       7, 6, 2, 6, 5, 7, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 2,\n",
       "       2, 3, 7, 3, 2, 2, 1, 7, 4, 6, 2, 4, 6, 4, 7, 1, 3, 2, 1, 7, 2, 2,\n",
       "       6, 4, 5, 1, 6, 7, 4, 5, 2, 7, 6, 2, 5, 7, 5, 7, 6, 1, 3, 5, 7, 4,\n",
       "       3, 4, 4, 2, 1, 7, 6, 7, 2, 6, 4, 1, 6, 6, 1, 7, 1, 4, 3, 1, 3, 5,\n",
       "       4, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 1, 2, 7, 2, 3, 2,\n",
       "       5, 3, 7, 5, 7, 5, 7, 1, 4, 5, 5, 4, 7, 6, 6, 6, 6, 2, 7, 7, 6, 2,\n",
       "       3, 4, 2, 7, 3, 1, 6, 6, 1, 5, 2, 1, 1, 1, 4, 6, 5, 1, 4, 1, 6, 4,\n",
       "       6, 3, 6, 5, 3, 1, 4, 3, 2, 7, 6, 2, 3, 6, 2, 2, 7, 7, 4, 6, 1, 7,\n",
       "       7, 1, 4, 1, 7, 1, 3, 2, 6, 3, 6, 1, 3, 5, 1, 2, 6, 7, 6, 6, 1, 5,\n",
       "       5, 1, 3, 5, 1, 1, 6, 1, 6, 2, 1, 3, 6, 6, 6, 6, 2, 1, 7, 2, 1, 6,\n",
       "       1, 1, 1, 1, 2, 4, 2, 1, 7, 4, 7, 6, 6, 7, 3, 2, 3, 4, 3, 3, 2, 1,\n",
       "       4, 6, 3, 6, 2, 1, 3, 7, 1, 3, 4, 2, 6, 6, 5, 6, 6, 5, 4, 4, 7, 1,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 6, 4, 2, 1, 3, 5, 6, 2, 6, 1, 5, 7, 6,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 6, 3, 6, 2, 6, 7, 1, 3, 4, 6, 6, 2, 7,\n",
       "       2, 1, 3, 2, 4, 3, 5, 7, 3, 1, 5, 2, 7, 4, 5, 1, 2, 1, 4, 2, 2, 5,\n",
       "       5, 5, 5, 4, 3, 4, 1, 5, 2, 7, 5, 7, 4, 4, 2, 5, 2, 5, 7, 7, 6, 5,\n",
       "       5, 2, 6, 2, 1, 2, 2, 4, 7, 4, 7, 1, 2, 5, 4, 1, 7, 6, 4, 4, 7, 3,\n",
       "       3, 3, 4, 4, 2, 7, 5, 4, 3, 7, 5, 2, 6, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       6, 2, 4, 3, 2, 3, 6, 3, 7, 5, 4, 1, 2, 1, 3, 6, 7, 7, 7, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 7, 6, 5, 1, 2, 3, 6, 6, 7, 7, 7, 2,\n",
       "       5, 5, 1, 3, 5, 6, 7, 6, 1, 7, 6, 1, 5, 6, 4, 1, 5, 2, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 6, 4, 7, 5, 2, 2, 1, 6, 6, 1, 6, 1, 2, 1, 2, 5, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 7, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 7, 6, 7, 6, 3, 3, 1, 3, 5, 1, 2, 4, 6, 7, 4, 5, 4, 7, 1, 7, 4,\n",
       "       1, 1, 1, 3, 6, 1, 7, 1, 3, 3, 6, 1, 5, 5, 6, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 7, 3, 4, 5, 7, 4, 5, 4, 5, 4, 7, 7, 5, 7, 1, 6, 1, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 7, 7, 2, 3, 5, 6, 4, 6, 6, 6, 1,\n",
       "       1, 6, 6, 4, 5, 6, 1, 4, 3, 7, 2, 4, 1, 3, 6, 7, 5, 3, 2, 3, 1, 5,\n",
       "       2, 6, 2, 4, 7, 5, 6, 1, 2, 3, 3, 1, 2, 5, 7, 1, 4, 4, 5, 4, 1, 7,\n",
       "       5, 2, 7, 1, 2, 4, 3, 5, 6, 3, 6, 4, 2, 6, 5, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 2, 3, 2, 3, 1, 3, 6, 3, 2, 7, 7, 4, 6, 6, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 4, 1, 3, 5, 7, 7, 5, 5, 7, 1, 5,\n",
       "       2, 5, 6, 7, 7, 6, 1, 3, 5, 6, 5, 3, 6, 3, 7, 3, 3, 7, 4, 1, 2, 2,\n",
       "       7, 6, 7, 1, 5, 3, 7, 3, 7, 3, 6, 7, 6, 6, 2, 4, 5, 1, 5, 6, 7, 2,\n",
       "       6, 1, 1, 1, 1, 2, 1, 3, 2, 4, 3, 3, 1, 4, 2, 6, 7, 1, 7, 1, 3, 7,\n",
       "       5, 2, 2, 2, 2, 7, 3, 2, 4, 6, 2, 5, 1, 5, 2, 2, 6, 2, 5, 5, 6, 4,\n",
       "       4, 3, 5, 1, 7, 3, 3, 7, 3, 2, 3, 6, 6, 6, 1, 3, 6, 6, 7, 2, 2, 5,\n",
       "       3, 4, 4, 4, 4, 3, 4, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "dt_pred_tf = dt_k.predict(X_test_tf1)\n",
    "dt_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "decison tree Accuracy is: 0.7051020408163265\n",
      "decison tree f1 score is : 0.7042438345228407\n",
      "decison tree recall score is : 0.7046043951147852\n",
      "decison tree precison score is : 0.7070546263274432\n",
      "decison tree precison score is : 0.7070546263274432\n",
      "decison tree matthews_corrcoef score is : 0.6561828341460413\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"decison tree Accuracy is:\",metrics.accuracy_score(y_test_tf1, dt_pred_tf))\n",
    "print(\"decison tree f1 score is :\",f1_score(y_test_tf1, dt_pred_tf, average='macro'))\n",
    "print(\"decison tree recall score is :\",recall_score(y_test_tf1, dt_pred_tf, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_tf1, dt_pred_tf, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_tf1, dt_pred_tf, average='macro'))\n",
    "print(\"decison tree matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, dt_pred_tf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LOGISTIC REGRESSION USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr_k = LogisticRegression(random_state=0,solver='lbfgs')\n",
    "lr_k.fit(X_train_cv1,y_train_cv1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_lr_cv = cross_val_score(estimator=lr_k, X=X_train_cv1, y=y_train_cv1, cv=10)\n",
    "cross_lr_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 3, 1, 5, 4, 7, 4, 6, 2, 1, 6, 5, 4, 6, 4, 7, 6,\n",
       "       7, 5, 1, 2, 1, 4, 2, 1, 1, 7, 4, 2, 6, 3, 2, 6, 4, 1, 4, 7, 6, 6,\n",
       "       1, 6, 4, 4, 7, 6, 7, 1, 7, 3, 5, 7, 2, 1, 3, 4, 4, 4, 6, 1, 4, 1,\n",
       "       2, 6, 4, 6, 5, 2, 3, 6, 6, 6, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 6,\n",
       "       6, 3, 1, 6, 7, 4, 6, 6, 5, 5, 4, 7, 3, 7, 6, 7, 2, 4, 4, 5, 6, 2,\n",
       "       5, 4, 7, 4, 6, 2, 3, 4, 5, 7, 5, 3, 2, 1, 2, 4, 2, 7, 5, 7, 1, 2,\n",
       "       1, 5, 2, 2, 1, 2, 2, 3, 6, 3, 3, 5, 1, 4, 4, 6, 2, 2, 1, 1, 4, 2,\n",
       "       6, 6, 2, 6, 5, 6, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 6,\n",
       "       2, 3, 2, 3, 2, 6, 1, 7, 4, 6, 2, 4, 6, 4, 7, 1, 3, 2, 1, 7, 4, 2,\n",
       "       2, 2, 5, 1, 7, 7, 4, 3, 2, 7, 6, 2, 5, 7, 5, 7, 4, 1, 3, 2, 7, 4,\n",
       "       3, 4, 4, 2, 1, 6, 5, 7, 2, 6, 2, 1, 6, 4, 1, 7, 3, 4, 3, 6, 3, 5,\n",
       "       3, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       5, 3, 7, 5, 6, 3, 6, 1, 4, 5, 5, 5, 7, 6, 6, 6, 6, 2, 7, 7, 6, 3,\n",
       "       3, 6, 2, 7, 3, 1, 6, 4, 1, 4, 2, 5, 1, 1, 4, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 2, 7, 7, 2, 2, 6, 2, 1, 7, 6, 4, 3, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 4, 1, 2, 6, 4, 6, 6, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 7, 2, 1, 3, 4, 6, 6, 7, 2, 5, 6, 2, 1, 6,\n",
       "       5, 1, 7, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 3, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 6, 3, 7, 5, 3, 2, 2, 6, 2, 2, 6, 2, 5, 6, 4, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 5, 4, 2, 1, 3, 1, 4, 2, 6, 6, 5, 7, 4,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 4, 6, 7, 2, 7,\n",
       "       2, 1, 4, 2, 4, 3, 4, 7, 3, 1, 5, 5, 7, 4, 7, 1, 2, 1, 2, 6, 2, 2,\n",
       "       5, 5, 2, 4, 4, 4, 6, 2, 2, 7, 5, 7, 4, 4, 2, 1, 2, 5, 1, 4, 7, 5,\n",
       "       1, 2, 6, 2, 1, 2, 1, 6, 7, 3, 7, 7, 2, 5, 4, 1, 7, 4, 3, 4, 7, 3,\n",
       "       3, 3, 3, 4, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 2, 3, 3, 2, 3, 6, 3, 7, 5, 5, 1, 2, 1, 3, 6, 6, 7, 6, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 6, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 6, 1, 2,\n",
       "       5, 6, 1, 4, 1, 6, 7, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 2, 3, 6, 4, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 7, 3, 2, 2, 1, 4, 6, 1, 6, 1, 6, 1, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 6, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 5, 6, 3, 3, 1, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       1, 1, 1, 3, 6, 1, 7, 1, 3, 3, 6, 5, 5, 5, 7, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 2, 4, 4, 1, 7, 3, 5, 2, 4, 2, 7, 6, 5, 7, 4, 4, 6, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 4, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 6, 7, 4, 3, 3, 2, 4, 5, 3, 6, 7, 4, 3, 2, 3, 1, 5,\n",
       "       2, 4, 4, 5, 6, 4, 6, 5, 2, 3, 3, 1, 2, 2, 7, 1, 4, 4, 5, 4, 5, 7,\n",
       "       5, 2, 7, 1, 2, 3, 3, 3, 4, 3, 6, 4, 2, 6, 2, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 2, 3, 2, 3, 1, 3, 2, 3, 2, 7, 6, 2, 4, 6, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 3, 5, 3, 1, 7, 7, 5, 5, 6, 1, 5,\n",
       "       4, 5, 6, 7, 7, 4, 1, 3, 5, 2, 5, 3, 6, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       6, 7, 7, 1, 5, 3, 7, 3, 7, 3, 6, 7, 6, 4, 2, 4, 3, 7, 5, 6, 7, 1,\n",
       "       7, 1, 5, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 3, 2, 6, 6, 1, 7, 1, 3, 6,\n",
       "       5, 2, 5, 2, 2, 6, 3, 2, 6, 6, 2, 5, 5, 5, 2, 2, 6, 2, 2, 5, 6, 6,\n",
       "       4, 3, 5, 1, 7, 3, 3, 4, 3, 5, 3, 6, 6, 6, 1, 3, 7, 7, 6, 6, 3, 6,\n",
       "       3, 6, 4, 4, 6, 3, 6, 5, 5, 3, 3, 2])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "lr_pred_cv = lr_k.predict(X_test_cv1)\n",
    "lr_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logistic regression Accuracy is: 0.7744897959183673\n",
      "logistic regreesion score is : 0.7746629350602935\n",
      "logistic regreesion score is : 0.7747817147737331\n",
      "logistic regreesion score is : 0.7812500491293566\n",
      "logistic regreesion score is : 0.7812500491293566\n",
      "logistic regreesion matthews_corrcoef score is : 0.7378630186890988\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"logistic regression Accuracy is:\",metrics.accuracy_score(y_test_cv1, lr_pred_cv))\n",
    "print(\"logistic regreesion score is :\",f1_score(y_test_cv1, lr_pred_cv, average='macro'))\n",
    "print(\"logistic regreesion score is :\",recall_score(y_test_cv1, lr_pred_cv, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_cv1, lr_pred_cv, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_cv1, lr_pred_cv, average='macro'))\n",
    "print(\"logistic regreesion matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv1, lr_pred_cv))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LOGESTIC REGRESSION USING TFIDF "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr_k = LogisticRegression(random_state=0,solver='lbfgs')\n",
    "lr_k.fit(X_train_tf1,y_train_tf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test on training set\n",
    "cross_lr_cv = cross_val_score(estimator=lr_k, X=X_train_tf1, y=y_train_tf1, cv=10)\n",
    "cross_lr_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 7, 3, 5, 6, 2, 5, 1, 5, 4, 7, 4, 6, 2, 1, 1, 5, 6, 6, 4, 7, 6,\n",
       "       7, 5, 1, 2, 1, 4, 4, 1, 1, 7, 4, 2, 7, 3, 2, 6, 4, 1, 4, 7, 6, 6,\n",
       "       1, 6, 4, 4, 7, 6, 6, 1, 6, 3, 5, 7, 2, 1, 3, 4, 4, 4, 6, 1, 4, 1,\n",
       "       2, 6, 4, 6, 5, 2, 3, 6, 6, 6, 2, 2, 2, 7, 6, 3, 3, 2, 4, 3, 3, 6,\n",
       "       6, 3, 6, 7, 7, 4, 6, 6, 5, 1, 6, 7, 3, 7, 6, 7, 2, 4, 4, 5, 6, 2,\n",
       "       5, 4, 7, 4, 6, 2, 3, 4, 5, 7, 5, 3, 2, 1, 2, 4, 2, 7, 5, 7, 7, 2,\n",
       "       1, 6, 2, 6, 1, 2, 2, 3, 6, 3, 3, 5, 1, 4, 4, 6, 2, 2, 1, 1, 4, 2,\n",
       "       6, 6, 2, 6, 4, 6, 4, 2, 1, 5, 6, 7, 1, 3, 6, 6, 6, 5, 7, 1, 6, 6,\n",
       "       2, 3, 6, 3, 2, 6, 1, 7, 4, 6, 2, 4, 6, 4, 7, 1, 3, 2, 1, 7, 4, 2,\n",
       "       2, 2, 5, 1, 7, 7, 4, 3, 2, 7, 6, 2, 1, 7, 1, 7, 6, 1, 3, 2, 7, 4,\n",
       "       3, 4, 4, 2, 1, 6, 1, 7, 2, 6, 2, 1, 6, 4, 1, 7, 3, 4, 3, 1, 3, 1,\n",
       "       3, 2, 2, 7, 5, 6, 3, 2, 5, 1, 3, 4, 2, 1, 2, 1, 5, 2, 7, 2, 3, 2,\n",
       "       1, 3, 7, 5, 6, 3, 6, 1, 4, 5, 5, 4, 7, 6, 6, 6, 6, 2, 7, 7, 6, 3,\n",
       "       3, 6, 2, 7, 3, 1, 6, 6, 1, 4, 2, 5, 1, 1, 5, 6, 5, 5, 4, 1, 6, 3,\n",
       "       6, 3, 7, 5, 3, 1, 4, 3, 2, 7, 7, 2, 2, 7, 2, 1, 7, 6, 4, 3, 1, 7,\n",
       "       4, 1, 4, 1, 7, 1, 3, 3, 4, 3, 6, 1, 3, 6, 1, 2, 6, 4, 6, 6, 1, 5,\n",
       "       5, 5, 3, 5, 1, 1, 6, 1, 7, 2, 1, 3, 6, 6, 6, 7, 2, 5, 6, 2, 1, 6,\n",
       "       6, 1, 7, 1, 2, 4, 2, 1, 7, 4, 7, 6, 4, 7, 3, 2, 6, 4, 3, 3, 4, 5,\n",
       "       4, 6, 3, 6, 5, 6, 3, 7, 5, 3, 2, 2, 6, 6, 2, 7, 2, 5, 6, 4, 7, 7,\n",
       "       4, 2, 6, 6, 1, 4, 6, 4, 7, 7, 4, 2, 1, 3, 1, 4, 2, 6, 6, 5, 7, 4,\n",
       "       6, 4, 5, 2, 2, 1, 3, 2, 6, 7, 3, 6, 2, 6, 7, 1, 3, 4, 6, 7, 2, 7,\n",
       "       2, 1, 4, 2, 4, 3, 6, 7, 3, 1, 5, 5, 7, 4, 7, 1, 2, 1, 2, 6, 2, 2,\n",
       "       2, 1, 2, 4, 4, 4, 6, 2, 2, 7, 5, 7, 4, 4, 2, 1, 2, 5, 1, 4, 7, 5,\n",
       "       1, 2, 6, 2, 1, 5, 1, 6, 7, 4, 7, 7, 2, 5, 4, 1, 7, 4, 7, 4, 7, 3,\n",
       "       3, 3, 3, 4, 2, 6, 5, 6, 3, 3, 5, 2, 7, 7, 4, 2, 6, 1, 1, 7, 2, 3,\n",
       "       7, 6, 3, 3, 2, 3, 6, 3, 7, 5, 5, 1, 2, 1, 3, 6, 7, 7, 7, 4, 3, 7,\n",
       "       3, 3, 3, 3, 3, 3, 6, 7, 1, 1, 6, 6, 4, 1, 2, 3, 6, 6, 7, 7, 6, 2,\n",
       "       5, 6, 1, 4, 1, 6, 7, 6, 1, 7, 6, 1, 5, 7, 4, 1, 5, 6, 3, 6, 7, 7,\n",
       "       1, 6, 3, 7, 3, 7, 4, 7, 3, 2, 2, 1, 6, 6, 1, 6, 1, 6, 5, 3, 1, 3,\n",
       "       6, 4, 1, 2, 1, 5, 6, 2, 5, 3, 6, 3, 7, 6, 3, 7, 3, 5, 1, 7, 6, 1,\n",
       "       2, 6, 6, 7, 6, 3, 3, 1, 3, 5, 1, 2, 6, 6, 7, 7, 5, 4, 7, 1, 6, 4,\n",
       "       1, 1, 5, 4, 6, 1, 7, 1, 3, 3, 6, 5, 5, 5, 7, 2, 6, 2, 5, 3, 3, 5,\n",
       "       3, 2, 4, 4, 1, 7, 3, 5, 2, 4, 2, 7, 6, 5, 7, 4, 4, 6, 7, 4, 5, 1,\n",
       "       5, 4, 1, 1, 5, 1, 6, 3, 6, 5, 1, 4, 4, 2, 3, 5, 6, 4, 6, 7, 6, 1,\n",
       "       1, 7, 6, 4, 5, 6, 7, 4, 3, 4, 2, 4, 5, 3, 6, 7, 4, 3, 2, 3, 1, 5,\n",
       "       2, 4, 4, 5, 7, 4, 6, 5, 2, 3, 3, 1, 2, 2, 7, 1, 4, 4, 5, 4, 5, 7,\n",
       "       5, 2, 7, 1, 2, 6, 3, 3, 4, 3, 6, 4, 2, 6, 2, 7, 2, 5, 1, 2, 7, 7,\n",
       "       3, 2, 5, 4, 4, 2, 3, 2, 3, 1, 3, 2, 3, 2, 7, 6, 2, 4, 6, 5, 2, 4,\n",
       "       5, 3, 3, 2, 5, 5, 2, 3, 1, 3, 7, 3, 5, 3, 1, 7, 7, 5, 5, 6, 1, 1,\n",
       "       4, 5, 6, 7, 7, 6, 1, 3, 5, 6, 1, 3, 6, 3, 7, 3, 3, 7, 4, 5, 2, 2,\n",
       "       6, 7, 7, 1, 5, 3, 7, 3, 7, 3, 6, 7, 6, 4, 2, 4, 3, 1, 5, 6, 7, 1,\n",
       "       7, 1, 5, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 6, 2, 6, 7, 1, 7, 5, 3, 6,\n",
       "       5, 2, 4, 2, 2, 6, 3, 2, 6, 6, 2, 5, 5, 5, 2, 2, 6, 2, 4, 5, 6, 6,\n",
       "       4, 3, 5, 1, 7, 3, 3, 6, 3, 5, 3, 6, 6, 6, 1, 6, 7, 7, 6, 6, 3, 6,\n",
       "       3, 6, 4, 4, 6, 3, 6, 5, 6, 3, 3, 2])"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "lr_pred_tf = lr_k.predict(X_test_tf1)\n",
    "lr_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logistic regression Accuracy is: 0.7602040816326531\n",
      "logistic regreesion score is : 0.7602343401282932\n",
      "logistic regreesion score is : 0.7606392388277207\n",
      "logistic regreesion score is : 0.7700553136566202\n",
      "logistic regreesion score is : 0.7700553136566202\n",
      "logistic regreesion matthews_corrcoef score is : 0.7218554248770348\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"logistic regression Accuracy is:\",metrics.accuracy_score(y_test_tf1, lr_pred_tf))\n",
    "print(\"logistic regreesion score is :\",f1_score(y_test_tf1, lr_pred_tf, average='macro'))\n",
    "print(\"logistic regreesion score is :\",recall_score(y_test_tf1, lr_pred_tf, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_tf1, lr_pred_tf, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_tf1, lr_pred_tf, average='macro'))\n",
    "print(\"logistic regreesion matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf1, lr_pred_tf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualizing the accuracies of kabitha kitchen data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We impletement bar graph using plypot from matplot library for visualization\n",
    "# Here the visualization shows the accuracies of the machine learning model applied with both count vectorizer and tfidf vectorizer\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10,8))\n",
    "X= ['CV','TF']\n",
    "X= np.arange(8)\n",
    "ACCURACY = [[43.0,65.6,76.1,42.7,72.8,72.1,69.8,77.4],[45.6,64.6,77.2,64.5,75.6,74.1,70.5,76.0]]\n",
    "plt.bar(X+0.00,ACCURACY[0], color='r',width=0.25,label=\"CV\")\n",
    "plt.bar(X+0.25,ACCURACY[1], color='b',width=0.25,label=\"TF\")\n",
    "plt.xticks(X,[\"NB-G\",\"NB-B\",\"SVM-L\",\"SVM-P\",\"SVM-R\",\"RF\",\"DT\",\"LG\"])\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.title(\"Accuracy of kabitha kitchen dataset\",{\"size\":15,\"color\":\"blue\"})\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SENTIMENTAL ANALYSIS ON NISHA KITCHEN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ï»¿id</th>\n",
       "      <th>commentText</th>\n",
       "      <th>Labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ugz7LQV0ZWpuNnjBaxJ4AaABAg</td>\n",
       "      <td>i  love potato ke prathe</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>UgxvWJ_kJL2nePTkg2N4AaABAg</td>\n",
       "      <td>Wwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaww</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>UgxxeUmiH9f8XOZZWr14AaABAg</td>\n",
       "      <td>Nice</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ugz-UPvwHMx4nSKVoCB4AaABAg</td>\n",
       "      <td>Wow Amazing</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>UgzfXhbesBABQzi4-m94AaABAg</td>\n",
       "      <td>Thank you madam</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        ï»¿id  \\\n",
       "0  Ugz7LQV0ZWpuNnjBaxJ4AaABAg   \n",
       "1  UgxvWJ_kJL2nePTkg2N4AaABAg   \n",
       "2  UgxxeUmiH9f8XOZZWr14AaABAg   \n",
       "3  Ugz-UPvwHMx4nSKVoCB4AaABAg   \n",
       "4  UgzfXhbesBABQzi4-m94AaABAg   \n",
       "\n",
       "                                         commentText  Labels  \n",
       "0                           i  love potato ke prathe       2  \n",
       "1  Wwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaww       3  \n",
       "2                                               Nice       3  \n",
       "3                                        Wow Amazing       3  \n",
       "4                                    Thank you madam       1  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_n = pd.read_csv(\"Nishafin.csv\", encoding='latin-1') #reading nisha kitchen dataset\n",
    "dataset_n.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CLEANING ON NISHA KITCHEN DATASET\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# As we can see from the above display even in nisha dataset puncuations,upper cases etc are present\n",
    "corpus = [] #creating corpus for nisha kitchen dataset\n",
    "for i in range(0,4900):\n",
    "    review = re.sub('[^a-zA-Z]', ' ', dataset_n['commentText'][i])\n",
    "    review = review.lower()\n",
    "    review = review.split()\n",
    "    ps = PorterStemmer()\n",
    "    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n",
    "    review = ' '.join(review)\n",
    "    corpus.append(review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating the count vectorizer \n",
    "from sklearn.feature_extraction.text import CountVectorizer \n",
    "cv_n = CountVectorizer()\n",
    "Xn_c = cv_n.fit_transform(corpus).toarray()\n",
    "yn_c = dataset_n.iloc[:,2].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4900, 4483)\n"
     ]
    }
   ],
   "source": [
    "print(Xn_c.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['love potato ke prath',\n",
       " 'wwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaww',\n",
       " 'nice',\n",
       " 'wow amaz',\n",
       " 'thank madam',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'execl women',\n",
       " 'soo kind',\n",
       " 'believ million sub',\n",
       " 'nice',\n",
       " 'thank',\n",
       " 'atta flour mean wheat flour',\n",
       " 'paratha like kitchen design',\n",
       " 'tasti aloo paratha',\n",
       " 'thank aunti',\n",
       " 'superb',\n",
       " 'aunti aapn bahut hi acha aur bqhut simplic ke saath explain kiya ais hamar desh teacher ho jay phir kisi bacch ko tution ki need ni ho u inspir paratha also good healthi',\n",
       " 'instruct realli use',\n",
       " 'ur way explain best aunti ji',\n",
       " 'love word thodi se chotti thodi se badi bana sakti hyn',\n",
       " 'nisha aunti soooooooo humbl sweet keep',\n",
       " 'wao',\n",
       " 'thank',\n",
       " 'awesom',\n",
       " 'app mera bhahi hote toh bariya hota roj kuch na kuch naya khane ko milta',\n",
       " 'nice',\n",
       " 'hello nisha anti mai new hun bht mazi k pharahti bane muje se ap ki video dhek kr thank god muje repli kiji ga nd main kuch bana hu kia likhun',\n",
       " 'beshk u r great bless frm pakistan',\n",
       " 'madam aap thoda nail cut karo suggest hai mera cook kart time warna glove wear karo',\n",
       " 'wow',\n",
       " 'love kerala',\n",
       " 'bhot asha aalo vala prantha',\n",
       " 'vedio bohot accha laga mam',\n",
       " 'nice recip easi cook',\n",
       " 'yummi yummi super yummi aaloo prath',\n",
       " 'mam mere potato ko mne boil krke cooker mein chod diy hour mne potato ko cheel ke masala banaya masala kafi loos ho gya usk baad mne unh choka bhi laga diya phir bhi parath nhi bn rhe h pl batay kya kre',\n",
       " 'yummi',\n",
       " 'still young due cook',\n",
       " 'nice madam ji',\n",
       " 'mam u highli talent ur cook skill extraordinari',\n",
       " 'good aunti',\n",
       " 'voic nice',\n",
       " 'nice',\n",
       " 'explain clearli sweetli thank',\n",
       " 'mam jab paratha belt hai tao sara masala corner pe aa jata h center kuch nhi rahta',\n",
       " 'also paratha receip nice nice',\n",
       " 'nisha mam tri n good make paratha di way kid week n dey enjoy u show awesom recip god bless u n ur love one',\n",
       " 'thank mam easi yummi',\n",
       " 'wow wow wow mouth water',\n",
       " 'mom want make aloo ka paratha vid help thank',\n",
       " 'madam oil ka place ghee use kar sakth kya',\n",
       " 'delici',\n",
       " 'good nice recip mam',\n",
       " 'thank aap itna achha paratha banai hai aur aap bahut acchi hai thank',\n",
       " 'itna oil',\n",
       " 'osm pratha aunti ji',\n",
       " 'tri pleas one like',\n",
       " 'wow apk parath kitt kitt mast h wow mugh abi khane ka mn kr rhe h mae bi aj hi bnaungi',\n",
       " 'thank',\n",
       " 'realli recip testi ur big fan paratha recip also nice',\n",
       " 'majedar bana hai aloo paratha',\n",
       " 'newli mrd dono anythng cook hubbi lyk alu paratha tqsm mam fr di recip',\n",
       " 'nyc',\n",
       " 'women good',\n",
       " 'good pratha ji',\n",
       " 'thanku mam',\n",
       " 'nice holiday cook grandson im also cook expert wish',\n",
       " 'thank mam bht testi hai',\n",
       " 'nice bhabi ji',\n",
       " 'mam aap bahut ach tarik se sikhati h thank',\n",
       " 'thanku much',\n",
       " 'tri earli morn',\n",
       " 'nice aunti ji',\n",
       " 'thank tri tasti',\n",
       " 'thank mummi ji',\n",
       " 'aunti jokerfrom kashmir want ask use gram flour besan instead wheat flour maida',\n",
       " 'nice parath',\n",
       " 'super mam',\n",
       " 'koi new recip dijiy nisha ji',\n",
       " 'thank',\n",
       " 'yummmmmmi abi tri krni lgii hu',\n",
       " 'nice recip aap ka andaz itna pyara samjhan ka ke kia hi baat thank recip',\n",
       " 'yammyyyyyyyyyyyyyyyy',\n",
       " 'realli nice paratha',\n",
       " 'tri',\n",
       " 'marshallah beauti excel parathay',\n",
       " 'mam koi bhi stuf paratha bnati hu sari stuf kinaro p aa jati h beech sirf aata reh jata h kya kru ki stuf pure parath evenli lg jay',\n",
       " 'aaj bhi ese tri karugi mujh aloo ke parath banana aat hi nhi thank much mam',\n",
       " 'nice thank share',\n",
       " 'superb aunti ji aaps bahut sikhn ko milta hai ab main bhi aapk wajah se ach paranth banan legi hoon thankyou aunti ji',\n",
       " 'great thank lot yummi paratha',\n",
       " 'v nice',\n",
       " 'thank tri paratha today succeed repli post',\n",
       " 'tasti also sweet aunti',\n",
       " 'superb mam',\n",
       " 'badhia mam apka express karn ka tarikes kavi bour nehi hoti ap bahat ach ho mam pyars patienc ke saath samjhati',\n",
       " 'wow thank u',\n",
       " 'good tasti bhi healthi bhi',\n",
       " 'mai kal banaungi aaloo ke parath',\n",
       " 'muje ba aap pasand ho',\n",
       " 'realli tasti',\n",
       " 'realli love',\n",
       " 'apko dekh k ki yad aa jati h',\n",
       " 'nice recip mam love',\n",
       " 'nice',\n",
       " 'happi new year aanti',\n",
       " 'madam shall pour oil first pan put parantha oil splash',\n",
       " 'wahi yammi yammi',\n",
       " 'tsti parathaparath',\n",
       " 'nice yummi',\n",
       " 'thank much',\n",
       " 'wow',\n",
       " 'amaz tri tasti',\n",
       " 'yummi',\n",
       " 'nice',\n",
       " 'bot ganda',\n",
       " 'kya partha',\n",
       " 'nice',\n",
       " 'apki awaj jaan nikal leti bahut khub samghati h cute',\n",
       " 'nisha madhulika top women',\n",
       " 'wwoooww',\n",
       " 'aunti good talent',\n",
       " 'nice',\n",
       " 'thank mr singh show make kolkata realli help',\n",
       " 'easi recip tri home thank',\n",
       " 'nice',\n",
       " 'love paratha love woman love pakistan',\n",
       " 'today eat paratha friend india theyr make love',\n",
       " 'aapki hr recip must rehti h',\n",
       " 'aunti yummi aloo paratha',\n",
       " 'mam love way u narrat voic sweet n way talk calm',\n",
       " 'testi',\n",
       " 'thank mam',\n",
       " 'nice way make aunti',\n",
       " 'nice mam',\n",
       " 'garlic dalt orr bhi tasti banta',\n",
       " 'testi',\n",
       " 'nisha jee r best chef realli like u frm pakistan',\n",
       " 'tasti',\n",
       " 'mam hamar parath fat jate h kya kare ki fate nhi',\n",
       " 'nice',\n",
       " 'wow amaz learn paratha recipi',\n",
       " 'aloo ke parath mujh bahut bahut pasand hai aap mujh bhej na',\n",
       " 'hi nisha mam pleas make paratha curri recip earli possibl',\n",
       " 'aloo fri krke b parath banat hai plz uski recip bhi share kariy',\n",
       " 'aunti ji khane ka man kiya',\n",
       " 'thank u mam',\n",
       " 'nice paratha sooo yummi explain karn ka tharikha hohat acha superb',\n",
       " 'nice paratha',\n",
       " 'welcom mam',\n",
       " 'kuch dikh nhi raha',\n",
       " 'wow mam kya aapn parth banay hai',\n",
       " 'nice',\n",
       " 'awww seem like sweet ladi subscrib',\n",
       " 'mam intellig video good',\n",
       " 'bohot bohot shukriya aunti jee aapka pyar se batan ka tarika bhi bohot acha hai',\n",
       " 'hi nishaji love ur video n way u explain load love keep help us cook varieti dish tri aloo paratha n turn yummi thank lot',\n",
       " 'pata nahi kyo lekin jab bhi aapki video dekhta hu eaisa feel hota hai meri maa mujh samjha rahi hai thank lot voic attract',\n",
       " 'thank aunti',\n",
       " 'brilliant yummi',\n",
       " 'nisha ji aap bhut acchi trhan explain kart ho nice reciep',\n",
       " 'realli like ur video inspir u ill tri ur recip love u mam respect',\n",
       " 'tri ur recip came super thank u much learnt mani dish u pleas finger papad ingredi make post ur come video pleas',\n",
       " 'nice paratha',\n",
       " 'wahhhh aunti kya banaya paratha tasti lajawaab muh pani aa gaya kya bolu kash ye paratha bahar aa jata banaungi aaj hi nahi raha jayega',\n",
       " 'like ur recip n also tri home love u maam shahina frm new zealand',\n",
       " 'tasti aunti',\n",
       " 'talent thank alot mam',\n",
       " 'tadka lga kr bhi hum stuf bna sact h',\n",
       " 'nice mam bahut hi acch bataya h aapn thank',\n",
       " 'mam like way u cook easi n great tast',\n",
       " 'mam aap kon sa tail use krte hai pranth banan ke liy',\n",
       " 'kuch new racip batoo na nisha ji big fan ap ke raspic tri kart bhoot accha banta samosa aloo ke taki allmost cook nisha ji imran khan hasband citi nagpur',\n",
       " 'alu hre hai',\n",
       " 'waoo mam teasti jarur tri krungi thanku mam',\n",
       " 'thnx favourit recip',\n",
       " 'nice',\n",
       " 'super madam watch smusic vaibhav puja marathi',\n",
       " 'super mam',\n",
       " 'nisha ji ke raspic bhoot pasand aat hai love cook nisha ji name mr nusrath khan nagpur citi',\n",
       " 'sweet',\n",
       " 'done difficult receip easi way awesom',\n",
       " 'mam usual vvv nici recip love alu paratha',\n",
       " 'ur explain clear love ur video mam',\n",
       " 'would say thank mam good cook',\n",
       " 'whenev want cook someth search youtub channel first reason voic nice dnt irrit like other youtub channel second way teach cook make feel easi learn',\n",
       " 'aaloo pratha',\n",
       " 'tasti',\n",
       " 'theek h esh hi banaugi',\n",
       " 'good method thank mam',\n",
       " 'nice paratha',\n",
       " 'pleas mam share diet food receip',\n",
       " 'bahut achh bne mere prath',\n",
       " 'hello mam love much',\n",
       " 'wow testi yummi yummi thanku mam tri',\n",
       " 'thank mam u sweet love',\n",
       " 'yummi paratha',\n",
       " 'nice',\n",
       " 'super',\n",
       " 'want ask question alway thought appropri resist today want ask whether use dishwash clean utensil coz look new',\n",
       " 'aap k samjhan ka tarika bhut acha h',\n",
       " 'wah nisha aunti love frm pakistan',\n",
       " 'testi',\n",
       " 'love u nd ur recipi aunti',\n",
       " 'nice aunti',\n",
       " 'mam recip good cook way easi aapki help se b kitchen bahut kuchh bnane lgi hu thank much mam biggest fan',\n",
       " 'look yummi',\n",
       " 'super super',\n",
       " 'excel mam thank much',\n",
       " 'thank mam nice recip',\n",
       " 'ak tumhari neck itni hil rahi hoti hai k mera dheyan tumhari neck p hota hai',\n",
       " 'kya aat sabhi aalo masalo koo mix kr skte h kya plz repli plzzzzzzzzzzzzzzzzzzzzzz',\n",
       " 'bohat tasti dikh rahah mean fantast',\n",
       " 'sweet',\n",
       " 'thnx mam aap repli karn bhi bahut fast ho',\n",
       " 'kya mam garam masala use kar skte h',\n",
       " 'hi kya hum purpos flour use kar sakt hai',\n",
       " 'wow soo tast',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'madam u explain softli sweetli like ur paratha',\n",
       " 'hello mam aapka har recip bahut testi hota h apka har recip follow krti hu mere husband toh bahut khush ho jaat h mere se thank mam',\n",
       " 'super aunti',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'well explain wish cook like',\n",
       " 'aapk hr video dekhti hu aap bhut ach ho',\n",
       " 'tasti',\n",
       " 'one like talent anti',\n",
       " 'nice made anti',\n",
       " 'buhat acha sikhati hayn',\n",
       " 'bahut tasti bahut mast tha ghar sbko bahut bahut pasand aaya bahut tasti tha',\n",
       " 'thank aunti recepi',\n",
       " 'bahot bhadiya bana h mam',\n",
       " 'thank',\n",
       " 'waooo yummi mouth water',\n",
       " 'aap mujh bhot achi lagti hain bhot meetha bolti hain aap aur apki recip jabs apka channel bana tabs dekhrahi hun itna kuch seekha aaps god bless',\n",
       " 'maam sweet',\n",
       " 'thank mam',\n",
       " 'lv ur smile nd voic mam lv u alot',\n",
       " 'mama mia',\n",
       " 'super tq',\n",
       " 'aap etn acch kais bol lete hain aap ki present se hamara dil paratha se vi bhar gay hain unti thank u',\n",
       " 'tnx nisha madulika',\n",
       " 'ne kal ye parata banaya ta buht hi yummi bana ta',\n",
       " 'best chef',\n",
       " 'yummmmmmmmmmmmmmmmmmmmmm',\n",
       " 'last modifi method',\n",
       " 'thank one english subtitl look nice',\n",
       " 'hmmmm look yummi',\n",
       " 'nice',\n",
       " 'grate potato mam',\n",
       " 'humain baji nisha madhulika',\n",
       " 'tasti',\n",
       " 'thank lot mam',\n",
       " 'thank u mam',\n",
       " 'aapki btae recip simpal aur bohat jada testi hoti hai',\n",
       " 'wow mam amaz yummi love kashmir',\n",
       " 'nice mam',\n",
       " 'app mam ho',\n",
       " 'realli amaz awesom superrbbb mne avi ye recip follow krke bnaya realli tasti amaz thank lot maam',\n",
       " 'thank',\n",
       " 'dislik',\n",
       " 'nice mam',\n",
       " 'nice',\n",
       " 'u r awesom mam jab b kch bnana hota h sbse phle apki recip hi search krti hu',\n",
       " 'mehrbani aba',\n",
       " 'nice',\n",
       " 'inh bhee chalaate k beech bhark banaa sakt hai madam ji',\n",
       " 'nice one mam',\n",
       " 'respect everi mother',\n",
       " 'aapki har recepi mujh aacha lagti h nisha g aur main baat ye h ki aap bhot bariki tarika se samjhati wo aur jyada aacha lagta r cute',\n",
       " 'nice tasti',\n",
       " 'thank mam',\n",
       " 'bhai kon lucki h wo jiski mummi h',\n",
       " 'aapn bahut acch se smjhaya thank mam',\n",
       " 'thank mam',\n",
       " 'nice',\n",
       " 'final made yaayyyyyi thank mam love yummi',\n",
       " 'thank much',\n",
       " 'yummi',\n",
       " 'wow nice mam',\n",
       " 'kya stafe magi masala dal sakt',\n",
       " 'goa aunti love way u explain make parotha love u aunti',\n",
       " 'hii aunti kya ham ginger aur mango powder ke bina nahi banasakt kya',\n",
       " 'aanti aap bhut aucha resapi bant ho',\n",
       " 'love u mam',\n",
       " 'beauti kitchen wowwwwwwwwwwwwwwwwww never seen beauti kitchen',\n",
       " 'thank made ate yummi',\n",
       " 'ap bahut sweet bolt ho ji',\n",
       " 'yor recip great',\n",
       " 'super aunti maja aa gya easi aacha partaha',\n",
       " 'nice anti ji',\n",
       " 'thank mam parath ekdm zabardust',\n",
       " 'god bless',\n",
       " 'anti bahot door hn nhn mn ap k pa zaroor khanay ko',\n",
       " 'mera aalu paratha fat kyu jata masal bhar nikl jata',\n",
       " 'love way teach',\n",
       " 'yummi',\n",
       " 'yummi',\n",
       " 'nice',\n",
       " 'best chef',\n",
       " 'r great',\n",
       " 'mere aloo ke parath full jaat hain aisa kya kru ji se paratha na pate',\n",
       " 'use recip make paratha mother birthday love thank wonder video',\n",
       " 'nice',\n",
       " 'nyc mem',\n",
       " 'mam aap bahut acchii tarah se samjhaat hoo har recepi ko acch se samjh aati h sabhi recepi thanku much mam itni acchi acchi recepi ki video banan k liy',\n",
       " 'ism aloo k sath pyaz ka use nahi kar skte hai kua',\n",
       " 'thanq nisha madhulika ji tri n mere parath bahut ach ayy ghee r yummyy',\n",
       " 'nice video',\n",
       " 'awesom recip also made feel hungri lazi',\n",
       " 'damn girl famou',\n",
       " 'thank put subtitl video definit tri recip glad share amaz recip us',\n",
       " 'nice mam ji',\n",
       " 'nice',\n",
       " 'much nice mam yummi',\n",
       " 'look tasti',\n",
       " 'mam mai jb bi alo paratha banati hu paratha fat jata h na alo bahar nikln lgta h kbi kbi kbi achh se ban jata h',\n",
       " 'nyc anti iov voic',\n",
       " 'awesom mamm',\n",
       " 'mam mere pranth mein aaloo evenli nhi aata husband say kai kai jagah pranth mein aaloo nhi hota',\n",
       " 'nice mam',\n",
       " 'nice',\n",
       " 'tasti',\n",
       " 'experi amaz littl brother sister happi eat',\n",
       " 'tasti recip mam delici',\n",
       " 'recip easi tri make today first time thank share recip',\n",
       " 'nice explain ador passion say word hat nisha',\n",
       " 'soo nice mam',\n",
       " 'nice recip',\n",
       " 'meri mamiy ne banay h bahut tasti bane h',\n",
       " 'nice janab',\n",
       " 'aapn bahut achha banaya hai super mame',\n",
       " 'mam ap mom jese ho bilkul',\n",
       " 'tast prantha mam',\n",
       " 'nice parantha eat',\n",
       " 'osm recip aalu pratha favourit',\n",
       " 'madam kya aap pakistani ho',\n",
       " 'super maaji',\n",
       " 'talent women n cute nice explain',\n",
       " 'fantast',\n",
       " 'nice paratha mam',\n",
       " 'tri stuf get make paratha',\n",
       " 'osummmmm yummi recip',\n",
       " 'kashala keli',\n",
       " 'realli appreci love turkey',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'look tasti',\n",
       " 'everi time make stuf bleed thru tri th time',\n",
       " 'nice',\n",
       " 'thank aunti cute way explain',\n",
       " 'nice pratha mem',\n",
       " 'nice mam explain good',\n",
       " 'hi pleas one day also publish prepar chicken chilli mutton korma pleas',\n",
       " 'mera aloo ka paratha fat jata hai stuf puri bahar nikal jati hai kya karna chahiy',\n",
       " 'waww wasom',\n",
       " 'nice',\n",
       " 'iam big fan mam lot love dubai',\n",
       " 'nisha mam recip great recip world tasti recip',\n",
       " 'tooo good n nice explain',\n",
       " 'tasti aap aloo ka paratha banati ho',\n",
       " 'wow nisha apki recip ghar ki yaad dila dete h nice recip',\n",
       " 'nice wow',\n",
       " 'love allo ka partha love pakistan',\n",
       " 'aunti u r sweet nd love nd love ur recip',\n",
       " 'sooooo yummi',\n",
       " 'thank u soo much love bangladesh',\n",
       " 'nisha ji aap ki cook mjhi bht pasand hy',\n",
       " 'explain well love mam soooo cute',\n",
       " 'aloo paratha',\n",
       " 'mam ap aur ap ki recip duno lajawab h',\n",
       " 'dayum gotta tri look delish',\n",
       " 'love aunti',\n",
       " 'woooooooooooooooooo',\n",
       " 'nani nice',\n",
       " 'nice one question pratha low ya high kais flame pr sekna chahiy',\n",
       " 'thakuuu soo mch mam u r talent',\n",
       " 'thank u mam',\n",
       " 'aap bahut ach se samghaya thank',\n",
       " 'nice',\n",
       " 'nice recip',\n",
       " 'good',\n",
       " 'mei bhi hr baaar ais hi prath bnati hu jo ki mujh aapn sikha unti g',\n",
       " 'thank mem',\n",
       " 'nice mam',\n",
       " 'madam well keep go new recip thank kind inform',\n",
       " 'nice pratha',\n",
       " 'yeh bohot aasan reciepi hai main bohot dino se banay nahi hai aj apki recip dekh ke banaugi ise kal thank mam',\n",
       " 'tri trust soooo yummi',\n",
       " 'thanku aunti mujh aap ki rashpi achi lagh ti h',\n",
       " 'wowwwwwwwww nisha jii',\n",
       " 'nice',\n",
       " 'wow tri make today husband love',\n",
       " 'nice guider',\n",
       " 'thank much love',\n",
       " 'thank love',\n",
       " 'nice man apki recip bhi supper h',\n",
       " 'nishji ki recip alway best',\n",
       " 'aapko mai apni maa manti hu main aap se hi pura khana banana sikha hai thank mch n god bless',\n",
       " 'nisha ji aap ki recip suopr het',\n",
       " 'mam like ur explain style',\n",
       " 'nice paratha',\n",
       " 'love',\n",
       " 'tasti',\n",
       " 'wow nice recip',\n",
       " 'samjhat bohot atch ho aap receipi ko',\n",
       " 'thenku mem',\n",
       " 'nice',\n",
       " 'aamchur pawder nahi ho kya dal sakat hai',\n",
       " 'mam haman aj hi banak dekha bahut hi achaa tha realli mam nice paratha love mam',\n",
       " 'thanku mam glad saw video highli appreci nd well explain u make day hv tri ur style amaz',\n",
       " 'aap ki har recip achi hoti hai aur easili bana de sakt hain',\n",
       " 'nice mam love',\n",
       " 'thank u mam main pahli bar banaya h bhut acha bna thank u soooooo much',\n",
       " 'thank mam behalf mum bottom heart',\n",
       " 'mam aapki aloo ke parath ki recip bahut achhi thank share recip',\n",
       " 'nyyccc',\n",
       " 'ok thank mam',\n",
       " 'nice aaloo parath nisha madhulika',\n",
       " 'look delici go make today',\n",
       " 'nisha ji aap ko bohot bohot dhanyavaad aap se seekhi hui har ek recip se banai huyi khana hamesha super hit hoti hai thank much',\n",
       " 'mugh issm carrier banana h',\n",
       " 'nice pratha mam yummi',\n",
       " 'mugh khana bana baut jada accha lagta h',\n",
       " 'mam mugh apki help chiy',\n",
       " 'yammi',\n",
       " 'good mam',\n",
       " 'nice',\n",
       " 'yummi',\n",
       " 'ara best chef',\n",
       " 'nice',\n",
       " 'like ur everi recepi made u',\n",
       " 'thank mam',\n",
       " 'hum dekht hi bhook lag gayi man kar raha hai abhi hi toot pado thank much nishamadhulikji thank thank thank thank much love',\n",
       " 'nice',\n",
       " 'thank simpl video mine came fair fine tast great ty',\n",
       " 'bhtut acha samjhati hai aap mam',\n",
       " 'explain super thank much mam',\n",
       " 'aapn aach se explain kiya thank u',\n",
       " 'tq nisha jii',\n",
       " 'wish could eat paratha onlin',\n",
       " 'good',\n",
       " 'mem agr alu pani chod jaye ptle ho jaye kya kre',\n",
       " 'aloo paratha super',\n",
       " 'aaj aalu k parath bnay aapk recip k accord ymmmi schi',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'wow mam',\n",
       " 'skip dri mango powder green chilli',\n",
       " 'im tri today st time',\n",
       " 'v nyc pratha',\n",
       " 'nice',\n",
       " 'nisha ji kya hum aloo ki stuf ko fri kark bhi bana sakt hain',\n",
       " 'love',\n",
       " 'amchur powder use lemon instead',\n",
       " 'beauti real mother hand',\n",
       " 'nice mam bhot testi bne path',\n",
       " 'nice tasti',\n",
       " 'hiii',\n",
       " 'mam mere paratha line aa jati h',\n",
       " 'nisha ji u pleas make stuf egg paratha delhi style',\n",
       " 'alway love see feel like u r famili member u r sweet',\n",
       " 'kitchen amaz',\n",
       " 'good job aunti',\n",
       " 'shabash aagay bado',\n",
       " 'thank aunti help project',\n",
       " 'salut talent chef present entir indian home perfect round paratha easili made',\n",
       " 'ooo wao tasti paratha',\n",
       " 'thank',\n",
       " 'madam mera har bar paratha bele ne se pura fata jati issk liy kya karen',\n",
       " 'delici wud tri raini weather',\n",
       " 'thank nisha tayi',\n",
       " 'ap samjat bhut bhadiya h nice',\n",
       " 'nice mam',\n",
       " 'nice',\n",
       " 'mam nice paratha mene aaj tri kiya',\n",
       " 'good afternoon nice recip tri hope kid would like',\n",
       " 'nice g',\n",
       " 'yummi',\n",
       " 'nisha ji yami',\n",
       " 'use onion recip',\n",
       " 'thanx mam love',\n",
       " 'nice mam thank share recip aloo paratha',\n",
       " 'jitni achchi aapki recip banti hai utni hi pyari aap hai aap muze apni didi si pyari lagti hai aap itn pyar se batati hai ki har recip achchi banti hai hams love u',\n",
       " 'nisha ji whenev make paratha stuf goe side n middl part get empti hv tri mani way problem occur',\n",
       " 'best',\n",
       " 'thank mom',\n",
       " 'nice tasti',\n",
       " 'mem muje apka har recepi bhohat axa lgta hai mene aapka recepi banai hai shobko bohat axi lge thank mem',\n",
       " 'waaooo yammmi mam love',\n",
       " 'thank nishaji share follow best aloo paratha life today',\n",
       " 'thank give everi detail',\n",
       " 'aap bahut achi baatein kart hai thank aunti',\n",
       " 'nice',\n",
       " 'thanx',\n",
       " 'best recip',\n",
       " 'tri make aloo paratha mani time never got right way easi understand prepar yummi thank much god bless',\n",
       " 'ooh yaaamee',\n",
       " 'aunti maja aa gaya banak khake aaya comment likn videsh se dhanyawaad',\n",
       " 'awsom madam',\n",
       " 'mam pleas mirchi ka paratha',\n",
       " 'mam love u',\n",
       " 'mam explain receip beauti bodi cook tri recip potato boil yet well thank',\n",
       " 'easi turori lot tip look delici',\n",
       " 'naic masa alla allo parata thank u racepi sere love u',\n",
       " 'thank antiji',\n",
       " 'nice parath mam',\n",
       " 'nice pratha',\n",
       " 'hi made allu paratha recip today turn great',\n",
       " 'kashturi methi aata gutht samay daal sakt hai kya mam',\n",
       " 'thank',\n",
       " 'nyc mam',\n",
       " 'thx mam',\n",
       " 'resipi best hi di yai',\n",
       " 'tasti',\n",
       " 'give coriand chilli',\n",
       " 'miss aap bahut ach se samaj ho g',\n",
       " 'great',\n",
       " 'wow mam apn boht ach se samjhaya aj hi bnaugi ap boht sweet ho',\n",
       " 'best love cook madam',\n",
       " 'nice video',\n",
       " 'thank lot shear favorit paratha',\n",
       " 'use besan gram flour',\n",
       " 'good madm',\n",
       " 'love receip made turn amaz',\n",
       " 'nisha u r sweet u explain nice love recip',\n",
       " 'thank mam ek aur request thi mam baccho ke tiffin ke liy koi asaan si resip btaiy jo asaani se jhat pat ban jay aur tast healthi ho',\n",
       " 'u r mentor nisha happi mother day u husband love paratha learnt u thank u much love see ur video',\n",
       " 'hum aaj hi tri kareng',\n",
       " 'fan hogaya assa haa',\n",
       " 'superb',\n",
       " 'thank much',\n",
       " 'one favorit thank',\n",
       " 'nice mam main tri kiya bahut acha bana thank',\n",
       " 'thanku',\n",
       " 'tast year',\n",
       " 'aap baut cute ho ek dum advic life de di apnay',\n",
       " 'nice',\n",
       " 'bhook lag gaya',\n",
       " 'love voic dd',\n",
       " 'aunti g kabhi khila bhi dijiy u r great',\n",
       " 'good',\n",
       " 'nyc',\n",
       " 'nice mam',\n",
       " 'nice inform',\n",
       " 'tasti mam thank share method',\n",
       " 'super aunti',\n",
       " 'wow',\n",
       " 'thank unti',\n",
       " 'mam dahi ke saath paratha accha lagega ya dahi bhi kuch milana hai',\n",
       " 'nisha ji plz malai paratha banana bataiy',\n",
       " 'lvu maaji',\n",
       " 'nice mam',\n",
       " 'thank mam favourit dish',\n",
       " 'masha allah today tri recip yammi tasti thank allot share us new recip thank much',\n",
       " 'mam u r best love soo much',\n",
       " 'nice',\n",
       " 'thank share good recip',\n",
       " 'hello must much love children speek sweetli children lucki mother like lot respect raja',\n",
       " 'nice',\n",
       " 'like potato paratha',\n",
       " 'wow',\n",
       " 'nice',\n",
       " 'love favorit food',\n",
       " 'pleas tell recip pyaj ke oarath',\n",
       " 'good',\n",
       " 'yummi parantha',\n",
       " 'dear extra sweet',\n",
       " 'mam mere aloo toh andar se sukh mere yaha pasand ni aay mem kya kr sakt h kya aloo spici ho jay',\n",
       " 'nice video',\n",
       " 'super sister',\n",
       " 'hey thank share mam made aloo paratha first time famili love thank',\n",
       " 'nice mam',\n",
       " 'use loov live india',\n",
       " 'super mam',\n",
       " 'nice',\n",
       " 'serious love way u repres food u allway smill',\n",
       " 'aapka bht bada fan hu reciep alway best',\n",
       " 'nice',\n",
       " 'nice recip go tri soon',\n",
       " 'nisha ji ki recipi dekhn valo se anurodh plg unh laik na kre dislaik bhi na kre',\n",
       " 'good morn mem apki har recipi mujh bhut acchi lagti apki har recipi ko laik karti hu mujh barha accha lgta qyoki ap sabkuch hindi btati mujh jyada english nhi ati',\n",
       " 'love way talk explain realli want learn aloo paratha ill follow recip finger cross',\n",
       " 'thank madam',\n",
       " 'realli tasti aaloo fraitha',\n",
       " 'thank teach aalu paratha',\n",
       " 'nice',\n",
       " 'bhuka marengey aap thank',\n",
       " 'awesom muh mai paani aa gya',\n",
       " 'superb parota yummi yummi',\n",
       " 'use maida instead gehu ka aatha',\n",
       " 'pehli baar aloo ka paratha bana raha hoon bcoz ghar pr koi nahi hai bahut mushkil samajhta tha mam aapna itn ach tareek se bataya hai thnk much mam',\n",
       " 'thank lot maam delici recip',\n",
       " 'aunti aap bohot sweet ho axh se samjhat ho',\n",
       " 'thank much',\n",
       " 'kya hm aloo ke stuf ko rat readi kr ke rakh sakt h subha ke nasta ke lye',\n",
       " 'yek dum accha hai',\n",
       " 'mam muh mein paani aagaya sure say thait naani make aloo parantha like',\n",
       " 'thank u much nishaji today made parotha n realli tasti thank u ssooo much',\n",
       " 'nice video voic also nice like',\n",
       " 'garmi ke dino ke liy kuch recip',\n",
       " 'thank',\n",
       " 'look yummmmmyyi',\n",
       " 'best aunti thank much',\n",
       " 'thank replay nishaji',\n",
       " 'superrrr',\n",
       " 'amchur powder ki jagah kuch aur use kar sakt hai kya',\n",
       " 'nice aunti',\n",
       " 'u r best aunti',\n",
       " 'fev aaloo paratha',\n",
       " 'wah anti kmal krdiya',\n",
       " 'tq parata supper',\n",
       " 'well done nissan ji',\n",
       " 'u r awesom cook agar mhe aapki ghar ke paa ek ghar rent lelethihoon aap video keliy jo kuch bi recip banath ho aap befhijar mujh tast karn keliy dhe dhena mhe kabhi bhi nahi kahoongi',\n",
       " 'nice mam love recip',\n",
       " 'thank easyy',\n",
       " 'good',\n",
       " 'thnk',\n",
       " 'test paratha',\n",
       " 'nice parata thank u',\n",
       " 'bht shukria tep denay ka indian logo ka urdu',\n",
       " 'uuuuu yummi paratha',\n",
       " 'mouth fill salaiva',\n",
       " 'bohot khub h aap aap ka method bhi bohot acha h like u mam much',\n",
       " 'thank much mam like video also tri recip turn realli nice sweet cute mam feel like mother explain teach cook best whenev want cook someth alway see video detail explan provid logic reason techniqu ingredi ga power impress anyon learn cook video plu motherli love person care feel like mother stand long live nishaji mam god bless',\n",
       " 'nice',\n",
       " 'yummi thank aloo paratha',\n",
       " 'tasti paratha',\n",
       " 'tasti',\n",
       " 'thank great recip love way explain talk like mom',\n",
       " 'thank much yeh receip main khud bhi bana sakta hun year old bahut hi aasan kar diya aapn thank much',\n",
       " 'delici',\n",
       " 'nice',\n",
       " 'speek sorri cute bye way',\n",
       " 'sleek like mom',\n",
       " 'cook wonder recip',\n",
       " 'veryyyyyyyy nice',\n",
       " 'kya main iss stuf ko store kar sakti hu',\n",
       " 'amaz mam u r inspir cook teacher',\n",
       " 'thank provid info',\n",
       " 'thank main aap ke style mein parath banay aur bohot tasti bane',\n",
       " 'thank upload help much',\n",
       " 'lyk voic',\n",
       " 'wow amaz easi recip thank much mam',\n",
       " 'thank much mam',\n",
       " 'nice yummmmmmyyi anb like',\n",
       " 'tasti receip',\n",
       " 'thank',\n",
       " 'thanku soo much u r gem thanku',\n",
       " 'tasti',\n",
       " 'kabli chane sukh kase banain nisha madulika je',\n",
       " 'lyk ur recip',\n",
       " 'hungri',\n",
       " 'yummi',\n",
       " 'thnx lot mam',\n",
       " 'nice mam',\n",
       " 'ju luv nisha madhulika video explain everyth fine',\n",
       " 'thank mam love aloo k paraath',\n",
       " 'wonder parata make today',\n",
       " 'great recip thank share',\n",
       " 'mam nice yummi',\n",
       " 'nice',\n",
       " 'mam u r sweet thank mam',\n",
       " 'love pataro parata recip tri',\n",
       " 'nice',\n",
       " 'thanku much repli nisha aunti tri recip',\n",
       " 'nice parata',\n",
       " 'use chaat garam masalain aloo paratha',\n",
       " 'thank aunti g',\n",
       " 'kya ho gaya inko kha kar icu jana kya',\n",
       " 'wow nice',\n",
       " 'mam aapka tv par vi add ata hai na nisha madhulika g',\n",
       " 'made amaz aloo ka paratha recip thank much',\n",
       " 'cute smjhani ka andaz boht acha hey',\n",
       " 'nice',\n",
       " 'men ap ke recip bahot achh hai',\n",
       " 'good recip like recip',\n",
       " 'nisha mam aap jain ho kya aapki recip aapko kabhi onion garlic use kart nhi dekha',\n",
       " 'mam ap parathaon k liy aur aat k liy konsa oil k use karti h',\n",
       " 'tasti',\n",
       " 'nice',\n",
       " 'nice recip',\n",
       " 'thank ji kerala cook aloo paratha today first time life good yummi thank lot easi simpl authent recip',\n",
       " 'nisha ji laundo ki life set krdi aapn ab hamar ghar pe bhi khana banta hai bachelor',\n",
       " 'love ap bohot ach se sikhat ho',\n",
       " 'thank nisha mem',\n",
       " 'love video',\n",
       " 'yummi thnx vdo',\n",
       " 'vri nice',\n",
       " 'use tip deti ho aap thank love u',\n",
       " 'nice aloo paratha',\n",
       " 'yummmmmmmmmmmmmmm',\n",
       " 'thank u fr recip final made today help di video becom realli tasti thank u much',\n",
       " 'thank alot ur receip tri',\n",
       " 'best nishaji',\n",
       " 'nishaji thank',\n",
       " 'thank',\n",
       " 'good nishaji',\n",
       " 'nice best one',\n",
       " 'thank shere video',\n",
       " 'ap bht achi hain bht acha bolti hain ny subscrib kr liyaa ap k channel ko',\n",
       " 'bhut hi achi recip h',\n",
       " 'made yesterday easi way make thank lot gave problem make',\n",
       " 'voic beauti mashallah',\n",
       " 'love aalo paratha',\n",
       " 'thank',\n",
       " 'bahut yummi tha',\n",
       " 'mam potato ko cooker mein kitn seeti aan tak boil karn ka',\n",
       " 'hi nishaji five year old daughter jannhvi big fan eat n love food cook u hum log ghar par apk recip se hi khana banat hai',\n",
       " 'mem cute',\n",
       " 'made today sooo yummi ad onion ij well tast sooooo good',\n",
       " 'men aap mujh bhot acch lgte ho aapk boln ka andaz bhot accha hai aapko dekhkr mummi ki yaad jati hai',\n",
       " 'kashmiri aloo ke parath cultur late tea stall etc start serv develop like howev add ingredi neither cook cleanli contrari aloo ke parath consist lot ingredi cook healthi way wait cook aloo ke parath home whenev thank love kashmir',\n",
       " 'nice',\n",
       " 'make easi tasti jst love thank share recip',\n",
       " 'nice mam',\n",
       " 'love voic way uh speak like child',\n",
       " 'nice paratha',\n",
       " 'tast',\n",
       " 'kya hum alu parath ke mix maggi masala daal sakt hai',\n",
       " 'nice receip mam love recip',\n",
       " 'yum yum',\n",
       " 'saw mani aaloo paratha recip includ sanjeev kapoor love way u detail instruct thank u',\n",
       " 'yummi pratha thank share',\n",
       " 'v nice mam',\n",
       " 'mam parth sepuan nikalta',\n",
       " 'mam ab bhot ace se samjat h ap muje bhot ace lagt h mam',\n",
       " 'thankiu mam',\n",
       " 'mujh belna nahi aata',\n",
       " 'yummmmmmm tasti hai h',\n",
       " 'like simpl clear present tip given definit tri make',\n",
       " 'salam nice recip subscrib saw paratha',\n",
       " 'wow',\n",
       " 'nice aunti ji kaun se oil ka use karna hoga',\n",
       " 'thank much',\n",
       " 'good',\n",
       " 'tri right',\n",
       " 'nisha best cook love',\n",
       " 'ymmmme',\n",
       " 'nice',\n",
       " 'awesom thankyou much god bless',\n",
       " 'superb',\n",
       " 'thank aunti jiii love u alot',\n",
       " 'wow',\n",
       " 'nice',\n",
       " 'good',\n",
       " 'ty mam',\n",
       " 'mam tikki banana sikh pleas',\n",
       " 'nice',\n",
       " 'thank anuti tast recip love',\n",
       " 'thank much realli appreci',\n",
       " 'best',\n",
       " 'isko dekh kar mujh bhook lag rahe hain',\n",
       " 'thank allot share us mam',\n",
       " 'wow video se mai ne sahi stuf method sikha thank much mam',\n",
       " 'cook aloo stuf wrong method use stuf without cook good health',\n",
       " 'favorit food',\n",
       " 'good',\n",
       " 'wow mam apki baat hi alg h khane k sath sath apk boln bhi test h love mam',\n",
       " 'delicoi',\n",
       " 'thank aunti',\n",
       " 'nice recip mam',\n",
       " 'tri tast good everyon hous like alott tank recipi',\n",
       " 'super unti',\n",
       " 'nice recip nisha g',\n",
       " 'nisha ji ur g love u',\n",
       " 'thank u',\n",
       " 'nice techniqu mam ur recip come tasti first trail',\n",
       " 'nice man bohut acch prath bant h agar kuch banat hu aapki hi recip dekht hu thank much mam',\n",
       " 'ill tri mor morn mam',\n",
       " 'nice yam',\n",
       " 'wow nice mom',\n",
       " 'khaiy mote ho jay',\n",
       " 'mam bless home alon bachelor thank lot',\n",
       " 'misti dokan je poreta hoy tar recip din',\n",
       " 'nisha mam aap ne coriand powder ko fri kara hai kyaa',\n",
       " 'hlo mam luv ur method nd ur smile also',\n",
       " 'mam mash ki dal wali parathi ki recip shar kari',\n",
       " 'kk mam sure let u know made sure yum',\n",
       " 'yum recip make tomorrow',\n",
       " 'thank lot mam tri made nd realli tasti thanku mch',\n",
       " 'good cook',\n",
       " 'awesom awesom awesom awesom awesom awesom',\n",
       " 'help',\n",
       " 'thank u',\n",
       " 'mam best one like',\n",
       " 'thank mam',\n",
       " 'awesom madam',\n",
       " 'nice',\n",
       " 'favourit favourit favourit',\n",
       " 'thank',\n",
       " 'add chees potato stuf',\n",
       " 'thank',\n",
       " 'love',\n",
       " 'nice mam',\n",
       " 'mam jab main tey karti hun allo pranda se bahar aa jate hai kya karo',\n",
       " 'love way explain remind mother',\n",
       " 'yummi yummi dish nisha jiii thank upload video paratha video thank nisha jiii',\n",
       " 'aunti thank share nice receipt big fan recip make aloo parata said get stuf come side roll kindli help',\n",
       " 'like process',\n",
       " 'aaj hi banaya main aaloo ke parath yammi thank mam love alway',\n",
       " 'mam aaj mai banaungi kash mai dikhapati',\n",
       " 'wow',\n",
       " 'yummi',\n",
       " 'thank much made today yummi easi love',\n",
       " 'bhookh lg gyi',\n",
       " 'nice',\n",
       " 'made aloo paneer paratha per ur recip turn tasti daughter love thank nishaji',\n",
       " 'thank lot share video',\n",
       " 'aunti ap k ghr aa rhi hu mjhe app k hath se khana h',\n",
       " 'love way explain maam smili face',\n",
       " 'tri easi delici thank mam share',\n",
       " 'aw great tast',\n",
       " 'mam maida se paratha bana sakt hai kya',\n",
       " 'best cook mam love voic',\n",
       " 'ap bohot achh se sikhati hn',\n",
       " 'aunti aap jitni sweet ho utni hi sweet tarik se apn paratha bana na sikhaya hai thank aunti',\n",
       " 'wowww',\n",
       " 'wow',\n",
       " 'l mam tnx ur kind rpli',\n",
       " 'nice',\n",
       " 'wow',\n",
       " 'yummi make potato arent dri becam soggi wat shud fr',\n",
       " 'like u aloo parath',\n",
       " 'mam without dri mango powder',\n",
       " 'show pictur doubl side paranta',\n",
       " 'sweet nice way ur cook madam',\n",
       " 'nice recip',\n",
       " 'superb',\n",
       " 'super parat',\n",
       " 'awesom',\n",
       " 'yummyyyyyyyyi',\n",
       " 'cute aunti',\n",
       " 'talk much',\n",
       " 'tank ji main bana ys achha bana',\n",
       " 'nice',\n",
       " 'nisha mam u cook well thank explain wonder',\n",
       " 'awesom maam',\n",
       " 'thank aunti',\n",
       " 'thank mam realli help',\n",
       " 'nice mam',\n",
       " 'bad',\n",
       " 'wow mem',\n",
       " 'nice paratha',\n",
       " 'mujh stuf varn hi problem hota',\n",
       " 'yammi',\n",
       " 'mam aapk parath dekh kr bhuk lg gyi look yummi',\n",
       " 'aap bahot sweet ho mam',\n",
       " 'wow tq show stuff paratha',\n",
       " 'nice partha thank',\n",
       " 'nice paratha anti thank much bohot achh ye parath yaammmiiiiii',\n",
       " 'thank madam',\n",
       " 'yummi mam hi baut dher bad dkae apk epi',\n",
       " 'stuf ko jeer se fri nahi kar shaktea hai',\n",
       " 'nisha mandulia video excit',\n",
       " 'nisha ji watch video lekin mere se roti aur stuf paratha gol nahi hote',\n",
       " 'beauti woman good recip thank much',\n",
       " 'thanq appa ka raspic bhoth follow karthe hum',\n",
       " 'super dadi',\n",
       " 'mam u r realli geniu',\n",
       " 'testi',\n",
       " 'mam main pehl parath ko bina tel ke sekti hu phir tel lagati hu ab aapk method se tri karungi',\n",
       " 'nice',\n",
       " 'luke testi',\n",
       " 'love aloo paratha mam wll tri ur process thankyou',\n",
       " 'nyc maa ji bahut tasti hai',\n",
       " 'tnx lot mem todi order aloo k paratha tho main apk video dekhk tri kareng thank much',\n",
       " 'awesom recip soo good',\n",
       " 'niceee',\n",
       " 'nice',\n",
       " 'thank u ji tri',\n",
       " 'best onlin chef whole world simpli amaz love hindi',\n",
       " 'tri recip come delici',\n",
       " 'thank u nisha mam u r recip nice',\n",
       " 'use record video',\n",
       " 'nice',\n",
       " 'bahut acchi hay ap ke resepi bahut acchi tarha samjatei hay',\n",
       " 'porotta style also sweet',\n",
       " 'yummi',\n",
       " 'woman talent much respect pakistan',\n",
       " 'nice video mam thank u much n love u',\n",
       " 'hello fantast teacher love recip thank patient explain everi detail recip god bless',\n",
       " 'nisha great',\n",
       " 'mem aaj hamn aloo ke parant bany te bahut testi bane te thank mem',\n",
       " 'get recip aloo paratha',\n",
       " 'nice pratha',\n",
       " 'like recip nice thank much',\n",
       " 'wow nice mam',\n",
       " 'fabrit aloo paratha app banat hue dekh mu pani agaya',\n",
       " 'nice video like',\n",
       " 'nice way teach love style',\n",
       " 'awesom',\n",
       " 'thank',\n",
       " 'namasta nisha aunti thank lot help make aalo ke paratha sister tri first time',\n",
       " 'yummi',\n",
       " 'yeeee mene bnay apn hatho se tnx aunti',\n",
       " 'look good wish speak inglish understand make copi',\n",
       " 'nice nisha mam',\n",
       " 'hi mam aloo paratha kea sath kon si sabzi serv karoo',\n",
       " 'hello dear nice easi thank',\n",
       " 'yummi paratha',\n",
       " 'mam great see u make awesom dish n learn u',\n",
       " 'tri maam thnxxx',\n",
       " 'thank lot',\n",
       " 'nice easi receip bahot achh se shikhat ho aap love thank much',\n",
       " 'nice like recip easi',\n",
       " 'super thank lot mam',\n",
       " 'want eat paratha wild way mannnn',\n",
       " 'sorri mam mujh ye pasand nahi aaya',\n",
       " 'superb',\n",
       " 'like recip',\n",
       " 'nice mossi',\n",
       " 'good',\n",
       " 'tasti',\n",
       " 'thank mam',\n",
       " 'thank ji',\n",
       " 'like recip mam',\n",
       " 'thank share',\n",
       " 'great',\n",
       " 'today mom go make',\n",
       " 'aunti talk look like mom',\n",
       " 'thank',\n",
       " 'thank aunti way speak realli love sweet',\n",
       " 'thnx mam main aaj aloo parantha banaya nd bhoot yummi bane pehl mujhs ye stuf parantha k bahar aa jati thi aaj main aapko follow kiya result mummi ki help k bina main parantha banaya thnx mam',\n",
       " 'thank nisha mam',\n",
       " 'thank anti ji',\n",
       " 'mam best',\n",
       " 'thank mam like',\n",
       " 'use instead amchur powder mam',\n",
       " 'thankyou',\n",
       " 'pratha',\n",
       " 'nyc',\n",
       " 'best way could aloo parantha first time yeyyyi came well husband like lot thank much video',\n",
       " 'kk thaqu',\n",
       " 'man realli good jese minut kya ban sakta',\n",
       " 'final got success thank lot made day',\n",
       " 'marvel recip mam thank whenev make paratha alway remain undercook place pleas guid',\n",
       " 'nice one',\n",
       " 'mam ism jira aur ajvain b dal sakt hai',\n",
       " 'yppppiiiii',\n",
       " 'omg supeer tasti mam',\n",
       " 'yummi',\n",
       " 'nice aunti ji yummyyi',\n",
       " 'aap ki recip mint ka aap ki aat mint kasa hoa olo banr ho kya',\n",
       " 'nice',\n",
       " 'mam good trythi recip love',\n",
       " 'main aj banaya hai bht achi boni ha mam thanx',\n",
       " 'love ur recipi maam ur video make easi cook someth',\n",
       " 'nice know cook receip make easili husband children thank',\n",
       " 'asalam alikum aunti love ur recip',\n",
       " 'nishaji aapki recip bahut acchi rahti hai aajkl mai kuvh bhi banan se pahil aapki recip jarur dekhti hu thank nisha ji',\n",
       " 'nice',\n",
       " 'nice',\n",
       " 'thank',\n",
       " 'amaz',\n",
       " 'nice',\n",
       " 'thank mam',\n",
       " 'nice',\n",
       " 'superbbbbb',\n",
       " 'tri ur recip came realli good tasti',\n",
       " 'delici mam',\n",
       " 'thank lot nisha ji',\n",
       " 'thank',\n",
       " 'thank way u talk love',\n",
       " 'like cook style best want tast u r food',\n",
       " 'super',\n",
       " 'wow yeh mare mummi bhi banati thi par yeh usa bhi tasti lagta ha',\n",
       " 'nice',\n",
       " 'mujh aapk sikhan ka tarika bahut acha lagta hai',\n",
       " 'thank alot nice god bless u',\n",
       " 'love way explain us recip exactli way mom explain',\n",
       " 'apn maida ya gehu ka atta use kia hain',\n",
       " 'aunti ji aloo paratha awsom',\n",
       " 'aloor paratha famou indian food',\n",
       " 'superb',\n",
       " 'made squar paratha tasti',\n",
       " 'thank tasti interest present',\n",
       " 'mam lot go make right',\n",
       " 'happi subtitl yey',\n",
       " 'nice receipi sure tri',\n",
       " 'hi mam without dri dri mango masala kat prepar',\n",
       " 'like video simpl explan',\n",
       " 'mam mere paranth sahi se bilt nhi h fat jate h bataiy kya kru',\n",
       " 'nice present madam u use much oil caus risk health person',\n",
       " 'nice',\n",
       " 'nice mam',\n",
       " 'itna acha bana hai ghar par bhej de',\n",
       " 'thank',\n",
       " 'thank made famili love thank',\n",
       " 'nice recip',\n",
       " 'tasti yummi',\n",
       " 'hello mam thank u soo much video',\n",
       " 'tnx tri',\n",
       " 'brilliantli explain',\n",
       " 'good method g',\n",
       " 'im right away dinner thank share realli easi yummi recip greet germani',\n",
       " 'realli nice',\n",
       " ...]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GAUSSIAN NAIVE BAYES WITH COUNT VECTORIZER (NK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the dataset into the Training Set and Testing Set\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train_cv2, X_test_cv2, y_train_cv2, y_test_cv2 = train_test_split(Xn_c,yn_c,test_size = 0.2,\n",
    "                                                   random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None, var_smoothing=1e-09)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fitting Naive bayes model algorithm with count vectorizer\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "nbk2 = GaussianNB()\n",
    "nbk2.fit(X_train_cv2, y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.54081633, 0.4744898 , 0.44897959, 0.48979592, 0.47193878,\n",
       "       0.46428571, 0.40816327, 0.50510204, 0.48469388, 0.52295918])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_nb_cv2 = cross_val_score(estimator=nbk2, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_nb_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 3, 2, 1, 5, 3, 3, 4, 1, 4, 2, 2, 2, 1, 1, 6, 2, 5, 2, 3, 5, 4,\n",
       "       2, 2, 7, 1, 3, 1, 7, 5, 4, 1, 7, 4, 2, 3, 2, 7, 3, 4, 4, 6, 3, 3,\n",
       "       2, 3, 2, 6, 1, 1, 6, 3, 3, 6, 7, 3, 2, 2, 7, 2, 2, 3, 1, 4, 2, 5,\n",
       "       2, 2, 1, 2, 2, 3, 4, 1, 5, 2, 2, 1, 2, 3, 3, 5, 2, 7, 3, 7, 2, 2,\n",
       "       2, 4, 4, 2, 2, 4, 2, 7, 2, 5, 3, 1, 3, 3, 4, 3, 2, 4, 6, 4, 1, 1,\n",
       "       4, 5, 1, 4, 5, 1, 5, 2, 5, 3, 2, 3, 2, 4, 2, 2, 1, 2, 5, 3, 3, 1,\n",
       "       5, 2, 3, 2, 4, 6, 7, 7, 3, 4, 7, 5, 5, 2, 7, 3, 2, 5, 7, 2, 1, 5,\n",
       "       2, 3, 2, 7, 2, 2, 2, 1, 2, 5, 3, 1, 1, 7, 2, 2, 2, 1, 2, 7, 2, 6,\n",
       "       4, 4, 3, 2, 2, 2, 7, 3, 2, 7, 3, 7, 4, 2, 1, 7, 3, 7, 5, 5, 3, 4,\n",
       "       7, 4, 1, 2, 3, 1, 2, 2, 3, 4, 5, 3, 7, 3, 7, 3, 5, 3, 1, 2, 4, 6,\n",
       "       1, 7, 6, 3, 2, 1, 3, 4, 2, 1, 2, 7, 2, 7, 4, 3, 3, 7, 2, 7, 1, 7,\n",
       "       2, 1, 6, 3, 2, 6, 4, 2, 1, 3, 2, 1, 2, 4, 2, 6, 3, 7, 3, 5, 4, 3,\n",
       "       7, 5, 5, 2, 2, 4, 1, 5, 1, 3, 2, 5, 5, 5, 6, 3, 3, 3, 3, 3, 6, 4,\n",
       "       7, 2, 3, 3, 1, 7, 3, 4, 7, 2, 3, 2, 6, 5, 1, 6, 2, 6, 5, 4, 3, 2,\n",
       "       2, 2, 2, 2, 4, 1, 3, 4, 3, 3, 4, 5, 7, 1, 1, 7, 2, 1, 3, 2, 3, 2,\n",
       "       2, 7, 7, 3, 6, 2, 4, 3, 3, 3, 2, 2, 3, 2, 3, 2, 3, 3, 4, 5, 7, 2,\n",
       "       3, 1, 7, 1, 3, 7, 1, 4, 7, 1, 2, 2, 3, 6, 4, 2, 7, 1, 2, 5, 3, 2,\n",
       "       1, 4, 3, 7, 1, 3, 3, 3, 2, 1, 7, 3, 7, 1, 2, 2, 3, 2, 3, 5, 3, 2,\n",
       "       6, 2, 7, 5, 5, 1, 3, 5, 1, 5, 2, 7, 1, 3, 5, 7, 1, 2, 2, 2, 3, 7,\n",
       "       2, 4, 7, 3, 3, 3, 4, 4, 2, 5, 3, 5, 5, 5, 1, 3, 3, 2, 3, 3, 3, 7,\n",
       "       2, 7, 1, 3, 1, 2, 2, 3, 2, 3, 4, 1, 4, 5, 3, 6, 1, 6, 6, 2, 7, 1,\n",
       "       3, 4, 3, 7, 2, 5, 3, 3, 5, 4, 5, 4, 3, 3, 7, 3, 7, 1, 4, 2, 4, 4,\n",
       "       2, 3, 2, 4, 7, 3, 4, 6, 4, 4, 7, 1, 5, 4, 1, 7, 7, 7, 6, 4, 3, 2,\n",
       "       6, 5, 2, 1, 3, 2, 5, 1, 3, 3, 4, 2, 4, 3, 7, 7, 3, 1, 3, 5, 3, 1,\n",
       "       5, 2, 1, 3, 7, 7, 1, 2, 2, 3, 3, 3, 1, 4, 3, 2, 1, 2, 2, 3, 6, 1,\n",
       "       2, 3, 4, 5, 1, 3, 3, 4, 6, 5, 3, 5, 3, 3, 3, 5, 7, 1, 4, 7, 1, 3,\n",
       "       2, 4, 2, 1, 2, 7, 5, 4, 2, 2, 3, 2, 5, 1, 2, 5, 2, 3, 6, 3, 2, 3,\n",
       "       3, 2, 7, 3, 4, 5, 6, 4, 1, 5, 2, 3, 1, 3, 2, 4, 3, 7, 3, 5, 4, 4,\n",
       "       7, 4, 2, 4, 2, 3, 2, 7, 6, 5, 3, 1, 3, 6, 2, 1, 3, 1, 3, 1, 4, 4,\n",
       "       3, 4, 4, 1, 3, 3, 1, 1, 6, 2, 4, 1, 6, 2, 7, 1, 4, 1, 5, 2, 2, 3,\n",
       "       1, 4, 2, 3, 7, 4, 1, 4, 7, 6, 5, 7, 2, 3, 2, 3, 2, 3, 7, 1, 2, 3,\n",
       "       7, 3, 3, 2, 7, 2, 2, 2, 7, 3, 4, 4, 4, 3, 5, 7, 6, 5, 7, 4, 5, 7,\n",
       "       2, 3, 7, 2, 7, 4, 2, 3, 6, 4, 1, 2, 6, 1, 5, 2, 7, 6, 1, 3, 7, 5,\n",
       "       6, 2, 7, 1, 2, 7, 2, 4, 2, 3, 3, 6, 1, 3, 3, 5, 4, 7, 7, 7, 3, 2,\n",
       "       1, 6, 6, 2, 2, 7, 7, 2, 7, 3, 2, 6, 6, 1, 3, 6, 3, 3, 4, 5, 7, 7,\n",
       "       2, 1, 4, 5, 1, 5, 3, 2, 3, 4, 2, 7, 3, 3, 5, 1, 5, 2, 7, 5, 2, 2,\n",
       "       2, 6, 3, 3, 4, 7, 7, 3, 2, 1, 5, 2, 3, 7, 2, 3, 5, 4, 2, 1, 6, 7,\n",
       "       3, 2, 7, 6, 7, 7, 3, 4, 2, 1, 2, 5, 2, 4, 5, 2, 2, 5, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 1, 3, 2, 7, 7, 7, 2, 2, 2, 3, 1, 7, 1, 7, 2, 6, 7, 5,\n",
       "       2, 2, 4, 6, 2, 6, 7, 1, 3, 7, 1, 3, 6, 4, 6, 6, 2, 1, 3, 7, 4, 3,\n",
       "       2, 3, 2, 2, 2, 3, 2, 3, 2, 7, 7, 3, 3, 4, 7, 5, 2, 3, 1, 4, 2, 7,\n",
       "       1, 2, 2, 4, 7, 1, 2, 2, 4, 2, 2, 2, 3, 3, 1, 3, 4, 3, 3, 2, 7, 1,\n",
       "       4, 1, 3, 6, 5, 7, 7, 7, 3, 6, 1, 1, 2, 1, 7, 1, 7, 3, 4, 4, 2, 7,\n",
       "       2, 7, 6, 3, 2, 1, 3, 1, 3, 1, 4, 2, 1, 6, 3, 1, 4, 7, 1, 6, 1, 7,\n",
       "       2, 7, 7, 4, 7, 4, 4, 1, 7, 4, 3, 1])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "nb2_pred_cv = nbk2.predict(X_test_cv2)\n",
    "nb2_pred_cv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "VALIDATION TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes Accuracy is: 0.4642857142857143\n",
      "Naive bayes f1 score is : 0.4393439232618494\n",
      "Naive bayes recall score is : 0.46851164840101156\n",
      "Naive bayes precison score is : 0.44563137221068494\n",
      "Naive bayes precison score is : 0.44563137221068494\n",
      "Naive bayes matthews_corrcoef score is : 0.3815154405567936\n"
     ]
    }
   ],
   "source": [
    "print(\"Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_cv2, nb2_pred_cv))\n",
    "print(\"Naive bayes f1 score is :\",f1_score(y_test_cv2, nb2_pred_cv, average='macro'))\n",
    "print(\"Naive bayes recall score is :\",recall_score(y_test_cv2, nb2_pred_cv, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_cv2, nb2_pred_cv, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_cv2, nb2_pred_cv, average='macro'))\n",
    "print(\"Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, nb2_pred_cv))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GAUSSIAN NAIVE BAYES USING TFIDF VECTORIZER (NK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4900, 4483)\n"
     ]
    }
   ],
   "source": [
    "#creating TFIDF VECTORIZER\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "tf_n = TfidfVectorizer()\n",
    "\n",
    "Xn_tf = tf_n.fit_transform(corpus).toarray()\n",
    "yn_tf = dataset_n.iloc[:,2].values\n",
    "print(Xn_tf.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating TFIDF features\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train_tf2, X_test_tf2, y_train_tf2, y_test_tf2 = train_test_split(Xn_tf,yn_tf,test_size = 0.2,\n",
    "                                                   random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None, var_smoothing=1e-09)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting naive bayes algorithm with tfidf vectorizer\n",
    "nbk2.fit(X_train_tf2, y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.54336735, 0.49234694, 0.44642857, 0.49234694, 0.49489796,\n",
       "       0.46683673, 0.42857143, 0.51020408, 0.48214286, 0.51530612])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation test on training data\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_nb_tf2 = cross_val_score(estimator=nbk2, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_nb_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 3, 2, 1, 5, 3, 3, 4, 1, 4, 2, 2, 2, 1, 1, 6, 2, 5, 2, 3, 5, 5,\n",
       "       2, 2, 7, 1, 3, 1, 7, 5, 4, 1, 7, 4, 2, 3, 4, 7, 3, 4, 4, 6, 3, 3,\n",
       "       2, 3, 2, 6, 1, 4, 6, 3, 3, 6, 7, 3, 2, 2, 7, 2, 2, 3, 1, 4, 2, 5,\n",
       "       2, 2, 1, 2, 2, 3, 4, 1, 5, 2, 2, 1, 2, 3, 3, 5, 2, 7, 3, 7, 2, 2,\n",
       "       2, 4, 4, 6, 2, 4, 2, 7, 2, 5, 3, 1, 3, 3, 4, 3, 2, 6, 6, 4, 1, 1,\n",
       "       5, 5, 1, 4, 5, 1, 5, 2, 5, 3, 1, 3, 2, 4, 2, 2, 1, 2, 5, 3, 3, 1,\n",
       "       6, 2, 3, 2, 4, 6, 7, 6, 3, 4, 7, 5, 5, 2, 7, 3, 2, 6, 7, 2, 1, 5,\n",
       "       2, 3, 2, 7, 7, 6, 2, 1, 2, 5, 3, 4, 1, 7, 2, 2, 2, 1, 2, 6, 4, 6,\n",
       "       4, 4, 3, 2, 2, 2, 7, 3, 2, 7, 3, 7, 4, 2, 1, 7, 3, 7, 5, 5, 3, 4,\n",
       "       7, 4, 1, 2, 3, 1, 2, 2, 3, 4, 5, 3, 7, 3, 6, 3, 7, 3, 1, 2, 4, 6,\n",
       "       1, 7, 6, 3, 2, 5, 3, 4, 2, 1, 2, 7, 2, 7, 4, 3, 3, 7, 2, 7, 1, 7,\n",
       "       2, 1, 6, 3, 2, 6, 4, 2, 1, 3, 2, 1, 2, 4, 2, 6, 3, 7, 3, 5, 4, 3,\n",
       "       7, 5, 5, 2, 2, 4, 1, 5, 1, 3, 2, 5, 5, 5, 6, 3, 3, 3, 3, 3, 6, 4,\n",
       "       7, 2, 3, 3, 1, 7, 3, 7, 7, 2, 3, 2, 6, 5, 1, 6, 2, 6, 5, 6, 3, 2,\n",
       "       2, 2, 2, 2, 4, 1, 3, 4, 3, 2, 4, 5, 7, 1, 7, 7, 2, 1, 3, 2, 3, 2,\n",
       "       2, 7, 7, 3, 6, 2, 4, 3, 3, 3, 2, 2, 3, 2, 3, 2, 3, 3, 5, 6, 7, 2,\n",
       "       3, 1, 7, 4, 3, 7, 1, 5, 7, 1, 2, 2, 3, 6, 4, 2, 7, 1, 2, 5, 3, 2,\n",
       "       1, 4, 3, 7, 1, 3, 3, 3, 2, 4, 7, 3, 6, 1, 2, 2, 3, 2, 3, 5, 3, 2,\n",
       "       6, 2, 7, 5, 5, 1, 3, 5, 1, 5, 2, 7, 1, 3, 5, 7, 1, 2, 2, 2, 3, 7,\n",
       "       2, 4, 7, 3, 3, 3, 5, 4, 2, 5, 3, 5, 7, 5, 1, 3, 3, 2, 3, 3, 3, 7,\n",
       "       2, 7, 1, 3, 1, 7, 2, 3, 2, 3, 4, 1, 4, 7, 3, 6, 1, 6, 6, 2, 6, 1,\n",
       "       3, 4, 3, 7, 2, 7, 3, 3, 5, 4, 5, 4, 3, 3, 7, 3, 7, 1, 4, 2, 4, 4,\n",
       "       2, 3, 2, 4, 7, 3, 4, 6, 5, 4, 7, 1, 5, 4, 1, 7, 7, 7, 6, 6, 3, 2,\n",
       "       6, 5, 2, 1, 3, 2, 5, 6, 3, 3, 4, 2, 4, 3, 7, 7, 3, 4, 3, 5, 3, 1,\n",
       "       5, 2, 1, 3, 7, 7, 1, 2, 2, 3, 3, 3, 1, 4, 3, 2, 1, 2, 2, 3, 6, 1,\n",
       "       2, 3, 4, 5, 1, 3, 3, 4, 6, 7, 3, 5, 3, 3, 3, 5, 7, 1, 4, 7, 1, 3,\n",
       "       2, 4, 2, 1, 2, 7, 5, 4, 2, 2, 3, 2, 5, 1, 2, 5, 2, 3, 6, 3, 2, 3,\n",
       "       3, 2, 7, 3, 4, 5, 6, 4, 5, 5, 2, 3, 1, 3, 2, 4, 3, 6, 3, 5, 4, 4,\n",
       "       7, 4, 2, 4, 2, 3, 2, 7, 6, 5, 3, 1, 3, 6, 2, 1, 3, 1, 3, 1, 4, 4,\n",
       "       3, 4, 4, 1, 3, 3, 4, 7, 6, 2, 4, 1, 6, 2, 7, 1, 4, 4, 5, 2, 2, 3,\n",
       "       1, 4, 2, 3, 6, 4, 1, 4, 7, 6, 5, 7, 2, 3, 2, 3, 2, 3, 7, 1, 2, 3,\n",
       "       7, 3, 3, 2, 7, 2, 2, 2, 7, 3, 4, 4, 2, 3, 5, 7, 6, 5, 7, 4, 5, 7,\n",
       "       2, 2, 7, 2, 7, 4, 2, 3, 6, 4, 1, 2, 6, 1, 5, 2, 7, 6, 1, 3, 6, 5,\n",
       "       6, 2, 7, 1, 2, 7, 2, 4, 2, 3, 3, 6, 1, 3, 3, 5, 4, 7, 7, 7, 2, 2,\n",
       "       1, 6, 6, 2, 2, 7, 6, 2, 7, 3, 2, 6, 6, 1, 3, 6, 3, 2, 4, 5, 7, 7,\n",
       "       2, 1, 4, 5, 1, 5, 3, 2, 3, 4, 2, 7, 3, 3, 5, 1, 5, 2, 7, 5, 2, 2,\n",
       "       2, 6, 3, 3, 4, 7, 7, 3, 2, 1, 6, 2, 3, 7, 2, 3, 5, 6, 2, 1, 6, 7,\n",
       "       3, 2, 7, 6, 7, 7, 3, 4, 2, 1, 2, 5, 2, 6, 5, 2, 2, 6, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 1, 3, 2, 7, 7, 7, 2, 6, 2, 3, 1, 7, 1, 7, 2, 6, 7, 5,\n",
       "       2, 2, 4, 6, 2, 6, 7, 1, 3, 7, 1, 3, 6, 4, 6, 6, 2, 1, 3, 7, 4, 3,\n",
       "       2, 3, 2, 2, 2, 3, 2, 3, 2, 7, 7, 3, 3, 4, 7, 5, 2, 3, 1, 4, 2, 7,\n",
       "       1, 2, 2, 4, 7, 1, 2, 2, 4, 2, 2, 2, 3, 3, 1, 3, 4, 3, 3, 2, 6, 5,\n",
       "       7, 1, 3, 6, 5, 7, 7, 7, 3, 6, 1, 4, 2, 1, 7, 1, 7, 3, 5, 4, 2, 7,\n",
       "       2, 7, 6, 3, 2, 1, 3, 4, 3, 1, 4, 2, 4, 6, 3, 1, 4, 7, 4, 6, 1, 7,\n",
       "       2, 7, 7, 4, 7, 4, 5, 6, 7, 4, 3, 1])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "nb2_pred_tf = nbk2.predict(X_test_tf2)\n",
    "nb2_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes Accuracy is: 0.4673469387755102\n",
      "Naive bayes f1 score is : 0.4434397687655274\n",
      "Naive bayes recall score is : 0.47150077512239774\n",
      "Naive bayes precison score is : 0.4425742578618075\n",
      "Naive bayes precison score is : 0.4425742578618075\n",
      "Naive bayes matthews_corrcoef score is : 0.38409826660105606\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "\n",
    "print(\"Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_tf2, nb2_pred_tf))\n",
    "print(\"Naive bayes f1 score is :\",f1_score(y_test_tf2, nb2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes recall score is :\",recall_score(y_test_tf2, nb2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf2, nb2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf2, nb2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, nb2_pred_tf))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BERNOULI NAIVE BAYES MODEL USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting bernouli naive bayes algorithm using count vectorizer\n",
    "bnn=BernoulliNB()\n",
    "bnn.fit(X_train_cv2, y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.65306122, 0.64030612, 0.62244898, 0.67346939, 0.64540816,\n",
       "       0.61989796, 0.64285714, 0.65306122, 0.6377551 , 0.6377551 ])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation test\n",
    "cross_nb_cv2 = cross_val_score(estimator=bnn, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_nb_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 1, 1, 7, 3, 3, 5, 4, 1, 2, 3, 2, 3, 5, 6, 1, 5, 1, 3, 7, 5,\n",
       "       4, 3, 3, 5, 3, 4, 7, 4, 2, 3, 7, 4, 2, 3, 4, 7, 3, 5, 3, 6, 3, 2,\n",
       "       2, 3, 2, 1, 1, 5, 6, 3, 3, 6, 6, 3, 1, 5, 7, 1, 1, 3, 3, 4, 4, 5,\n",
       "       3, 1, 4, 2, 5, 3, 3, 2, 6, 2, 1, 2, 1, 3, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       1, 4, 4, 1, 2, 4, 2, 7, 1, 5, 3, 1, 3, 2, 4, 2, 3, 4, 7, 3, 5, 1,\n",
       "       5, 4, 1, 4, 5, 2, 5, 5, 3, 3, 5, 3, 2, 4, 3, 2, 6, 2, 5, 2, 3, 1,\n",
       "       7, 3, 3, 2, 2, 5, 4, 7, 2, 4, 7, 6, 1, 2, 7, 3, 1, 5, 7, 2, 6, 7,\n",
       "       3, 2, 1, 7, 1, 1, 2, 5, 2, 7, 2, 5, 3, 7, 3, 1, 1, 6, 2, 2, 4, 4,\n",
       "       4, 3, 3, 2, 2, 2, 7, 3, 1, 7, 3, 7, 4, 1, 5, 7, 3, 7, 5, 2, 3, 2,\n",
       "       7, 4, 1, 1, 3, 1, 2, 2, 3, 4, 7, 3, 3, 3, 7, 3, 3, 4, 4, 1, 5, 4,\n",
       "       2, 7, 7, 3, 3, 5, 2, 2, 2, 3, 2, 7, 1, 7, 5, 3, 3, 3, 2, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 5, 2, 2, 2, 2, 3, 1, 1, 4, 7, 3, 5, 4, 3,\n",
       "       7, 5, 4, 5, 2, 1, 5, 7, 5, 4, 2, 7, 7, 3, 4, 3, 3, 3, 3, 3, 2, 1,\n",
       "       7, 3, 2, 3, 1, 3, 3, 1, 7, 1, 3, 3, 7, 7, 5, 5, 2, 6, 4, 5, 3, 3,\n",
       "       2, 2, 2, 2, 4, 5, 3, 3, 3, 2, 4, 2, 3, 1, 5, 7, 1, 1, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 7, 3, 4, 3, 3, 3, 2, 2, 3, 1, 3, 5, 3, 3, 5, 5, 7, 2,\n",
       "       3, 2, 7, 4, 3, 7, 2, 1, 7, 3, 3, 2, 3, 6, 2, 2, 7, 3, 1, 5, 3, 1,\n",
       "       3, 4, 3, 7, 1, 3, 3, 4, 5, 6, 2, 3, 6, 5, 1, 1, 3, 2, 3, 5, 3, 3,\n",
       "       1, 1, 7, 4, 7, 1, 3, 6, 3, 1, 2, 6, 1, 2, 2, 7, 6, 5, 1, 2, 3, 7,\n",
       "       1, 4, 5, 3, 3, 2, 6, 3, 1, 2, 3, 6, 7, 5, 3, 3, 3, 1, 3, 2, 3, 7,\n",
       "       5, 7, 1, 3, 3, 1, 1, 2, 1, 3, 4, 1, 3, 4, 3, 5, 2, 7, 2, 2, 7, 1,\n",
       "       3, 1, 3, 7, 4, 7, 3, 3, 4, 4, 2, 4, 3, 3, 7, 3, 7, 4, 4, 1, 4, 6,\n",
       "       3, 3, 1, 5, 7, 3, 1, 2, 6, 4, 7, 1, 5, 4, 4, 7, 7, 7, 3, 4, 3, 1,\n",
       "       1, 7, 3, 1, 2, 2, 7, 1, 3, 3, 3, 1, 5, 3, 2, 7, 3, 3, 3, 3, 3, 3,\n",
       "       6, 2, 3, 3, 7, 7, 1, 5, 2, 3, 3, 3, 2, 4, 3, 5, 1, 2, 1, 2, 4, 2,\n",
       "       5, 3, 3, 2, 1, 3, 3, 2, 6, 7, 3, 2, 3, 3, 3, 3, 6, 2, 4, 3, 1, 3,\n",
       "       2, 4, 2, 5, 2, 6, 5, 4, 1, 1, 3, 2, 5, 4, 2, 3, 2, 3, 5, 3, 2, 2,\n",
       "       3, 2, 7, 3, 4, 5, 7, 5, 2, 2, 1, 3, 1, 3, 2, 1, 3, 2, 3, 5, 5, 5,\n",
       "       6, 3, 5, 5, 2, 3, 3, 6, 2, 2, 3, 2, 3, 1, 1, 6, 3, 1, 2, 6, 2, 5,\n",
       "       3, 3, 4, 3, 3, 3, 2, 5, 6, 2, 2, 4, 4, 2, 7, 6, 4, 3, 5, 2, 2, 3,\n",
       "       3, 5, 2, 3, 7, 4, 5, 5, 7, 4, 5, 6, 2, 2, 3, 3, 2, 3, 2, 4, 3, 3,\n",
       "       7, 4, 2, 5, 3, 1, 2, 2, 3, 2, 4, 7, 4, 3, 5, 7, 5, 5, 1, 2, 6, 7,\n",
       "       1, 2, 7, 1, 4, 4, 1, 4, 3, 4, 4, 1, 6, 1, 5, 5, 7, 6, 2, 3, 7, 1,\n",
       "       7, 1, 7, 2, 2, 7, 2, 4, 3, 3, 3, 6, 1, 3, 2, 5, 5, 7, 7, 6, 4, 1,\n",
       "       1, 6, 6, 2, 2, 7, 7, 1, 7, 2, 1, 5, 3, 1, 3, 2, 3, 2, 3, 1, 3, 7,\n",
       "       2, 4, 4, 3, 1, 4, 3, 1, 3, 4, 2, 7, 2, 3, 3, 2, 5, 2, 7, 1, 3, 2,\n",
       "       5, 5, 2, 3, 4, 7, 7, 3, 1, 3, 2, 2, 3, 7, 1, 3, 7, 5, 1, 3, 5, 2,\n",
       "       4, 5, 7, 3, 4, 7, 3, 2, 5, 6, 2, 3, 2, 2, 4, 2, 3, 2, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 4, 3, 2, 2, 7, 7, 2, 1, 3, 3, 3, 7, 4, 7, 3, 6, 6, 5,\n",
       "       2, 1, 4, 7, 1, 3, 7, 3, 3, 7, 6, 3, 2, 3, 3, 3, 1, 6, 3, 7, 4, 3,\n",
       "       2, 3, 1, 2, 2, 3, 3, 3, 3, 7, 7, 3, 3, 4, 7, 2, 2, 3, 5, 3, 3, 2,\n",
       "       2, 5, 2, 4, 7, 2, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 2, 3, 2, 6, 5,\n",
       "       1, 1, 3, 7, 7, 7, 7, 7, 3, 6, 2, 2, 1, 3, 7, 1, 4, 3, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 2, 1, 3, 3, 3, 1, 1, 1, 4, 1, 3, 1, 2, 3, 1, 6, 3, 7,\n",
       "       2, 6, 7, 2, 2, 7, 3, 1, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bnn_pred_cv = bnn.predict(X_test_cv2)\n",
    "bnn_pred_cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes Accuracy is: 0.6438775510204081\n",
      "Naive bayes f1 score is : 0.6253907937313617\n",
      "Naive bayes recall score is : 0.6480951278695215\n",
      "Naive bayes precison score is : 0.6654036032342047\n",
      "Naive bayes precison score is : 0.6654036032342047\n",
      "Naive bayes matthews_corrcoef score is : 0.5960886963598336\n"
     ]
    }
   ],
   "source": [
    "print(\"Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_cv2, bnn_pred_cv))\n",
    "print(\"Naive bayes f1 score is :\",f1_score(y_test_cv2, bnn_pred_cv, average='macro'))\n",
    "print(\"Naive bayes recall score is :\",recall_score(y_test_cv2, bnn_pred_cv, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_cv2, bnn_pred_cv, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_cv2, bnn_pred_cv, average='macro'))\n",
    "print(\"Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, bnn_pred_cv))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bernoulli NAIVE BAYES USING TFIDF VECTORIZER (NK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting bernouli naive bayes algorithm with count vectorizer\n",
    "bnn2= BernoulliNB()\n",
    "bnn2.fit(X_train_tf2, y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.65306122, 0.64030612, 0.62244898, 0.67346939, 0.64540816,\n",
       "       0.61989796, 0.64285714, 0.65306122, 0.6377551 , 0.6377551 ])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cross validation test on training set\n",
    "cross_bnk_tf2 = cross_val_score(estimator=bnn2, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_bnk_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 1, 1, 7, 3, 3, 5, 4, 1, 2, 3, 2, 3, 5, 6, 1, 5, 1, 3, 7, 5,\n",
       "       4, 3, 3, 5, 3, 4, 7, 4, 2, 3, 7, 4, 2, 3, 4, 7, 3, 5, 3, 6, 3, 2,\n",
       "       2, 3, 2, 1, 1, 5, 6, 3, 3, 6, 6, 3, 1, 5, 7, 1, 1, 3, 3, 4, 4, 5,\n",
       "       3, 1, 4, 2, 5, 3, 3, 2, 6, 2, 1, 2, 1, 3, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       1, 4, 4, 1, 2, 4, 2, 7, 1, 5, 3, 1, 3, 2, 4, 2, 3, 4, 7, 3, 5, 1,\n",
       "       5, 4, 1, 4, 5, 2, 5, 5, 3, 3, 5, 3, 2, 4, 3, 2, 6, 2, 5, 2, 3, 1,\n",
       "       7, 3, 3, 2, 2, 5, 4, 7, 2, 4, 7, 6, 1, 2, 7, 3, 1, 5, 7, 2, 6, 7,\n",
       "       3, 2, 1, 7, 1, 1, 2, 5, 2, 7, 2, 5, 3, 7, 3, 1, 1, 6, 2, 2, 4, 4,\n",
       "       4, 3, 3, 2, 2, 2, 7, 3, 1, 7, 3, 7, 4, 1, 5, 7, 3, 7, 5, 2, 3, 2,\n",
       "       7, 4, 1, 1, 3, 1, 2, 2, 3, 4, 7, 3, 3, 3, 7, 3, 3, 4, 4, 1, 5, 4,\n",
       "       2, 7, 7, 3, 3, 5, 2, 2, 2, 3, 2, 7, 1, 7, 5, 3, 3, 3, 2, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 5, 2, 2, 2, 2, 3, 1, 1, 4, 7, 3, 5, 4, 3,\n",
       "       7, 5, 4, 5, 2, 1, 5, 7, 5, 4, 2, 7, 7, 3, 4, 3, 3, 3, 3, 3, 2, 1,\n",
       "       7, 3, 2, 3, 1, 3, 3, 1, 7, 1, 3, 3, 7, 7, 5, 5, 2, 6, 4, 5, 3, 3,\n",
       "       2, 2, 2, 2, 4, 5, 3, 3, 3, 2, 4, 2, 3, 1, 5, 7, 1, 1, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 7, 3, 4, 3, 3, 3, 2, 2, 3, 1, 3, 5, 3, 3, 5, 5, 7, 2,\n",
       "       3, 2, 7, 4, 3, 7, 2, 1, 7, 3, 3, 2, 3, 6, 2, 2, 7, 3, 1, 5, 3, 1,\n",
       "       3, 4, 3, 7, 1, 3, 3, 4, 5, 6, 2, 3, 6, 5, 1, 1, 3, 2, 3, 5, 3, 3,\n",
       "       1, 1, 7, 4, 7, 1, 3, 6, 3, 1, 2, 6, 1, 2, 2, 7, 6, 5, 1, 2, 3, 7,\n",
       "       1, 4, 5, 3, 3, 2, 6, 3, 1, 2, 3, 6, 7, 5, 3, 3, 3, 1, 3, 2, 3, 7,\n",
       "       5, 7, 1, 3, 3, 1, 1, 2, 1, 3, 4, 1, 3, 4, 3, 5, 2, 7, 2, 2, 7, 1,\n",
       "       3, 1, 3, 7, 4, 7, 3, 3, 4, 4, 2, 4, 3, 3, 7, 3, 7, 4, 4, 1, 4, 6,\n",
       "       3, 3, 1, 5, 7, 3, 1, 2, 6, 4, 7, 1, 5, 4, 4, 7, 7, 7, 3, 4, 3, 1,\n",
       "       1, 7, 3, 1, 2, 2, 7, 1, 3, 3, 3, 1, 5, 3, 2, 7, 3, 3, 3, 3, 3, 3,\n",
       "       6, 2, 3, 3, 7, 7, 1, 5, 2, 3, 3, 3, 2, 4, 3, 5, 1, 2, 1, 2, 4, 2,\n",
       "       5, 3, 3, 2, 1, 3, 3, 2, 6, 7, 3, 2, 3, 3, 3, 3, 6, 2, 4, 3, 1, 3,\n",
       "       2, 4, 2, 5, 2, 6, 5, 4, 1, 1, 3, 2, 5, 4, 2, 3, 2, 3, 5, 3, 2, 2,\n",
       "       3, 2, 7, 3, 4, 5, 7, 5, 2, 2, 1, 3, 1, 3, 2, 1, 3, 2, 3, 5, 5, 5,\n",
       "       6, 3, 5, 5, 2, 3, 3, 6, 2, 2, 3, 2, 3, 1, 1, 6, 3, 1, 2, 6, 2, 5,\n",
       "       3, 3, 4, 3, 3, 3, 2, 5, 6, 2, 2, 4, 4, 2, 7, 6, 4, 3, 5, 2, 2, 3,\n",
       "       3, 5, 2, 3, 7, 4, 5, 5, 7, 4, 5, 6, 2, 2, 3, 3, 2, 3, 2, 4, 3, 3,\n",
       "       7, 4, 2, 5, 3, 1, 2, 2, 3, 2, 4, 7, 4, 3, 5, 7, 5, 5, 1, 2, 6, 7,\n",
       "       1, 2, 7, 1, 4, 4, 1, 4, 3, 4, 4, 1, 6, 1, 5, 5, 7, 6, 2, 3, 7, 1,\n",
       "       7, 1, 7, 2, 2, 7, 2, 4, 3, 3, 3, 6, 1, 3, 2, 5, 5, 7, 7, 6, 4, 1,\n",
       "       1, 6, 6, 2, 2, 7, 7, 1, 7, 2, 1, 5, 3, 1, 3, 2, 3, 2, 3, 1, 3, 7,\n",
       "       2, 4, 4, 3, 1, 4, 3, 1, 3, 4, 2, 7, 2, 3, 3, 2, 5, 2, 7, 1, 3, 2,\n",
       "       5, 5, 2, 3, 4, 7, 7, 3, 1, 3, 2, 2, 3, 7, 1, 3, 7, 5, 1, 3, 5, 2,\n",
       "       4, 5, 7, 3, 4, 7, 3, 2, 5, 6, 2, 3, 2, 2, 4, 2, 3, 2, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 4, 3, 2, 2, 7, 7, 2, 1, 3, 3, 3, 7, 4, 7, 3, 6, 6, 5,\n",
       "       2, 1, 4, 7, 1, 3, 7, 3, 3, 7, 6, 3, 2, 3, 3, 3, 1, 6, 3, 7, 4, 3,\n",
       "       2, 3, 1, 2, 2, 3, 3, 3, 3, 7, 7, 3, 3, 4, 7, 2, 2, 3, 5, 3, 3, 2,\n",
       "       2, 5, 2, 4, 7, 2, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 2, 3, 2, 6, 5,\n",
       "       1, 1, 3, 7, 7, 7, 7, 7, 3, 6, 2, 2, 1, 3, 7, 1, 4, 3, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 2, 1, 3, 3, 3, 1, 1, 1, 4, 1, 3, 1, 2, 3, 1, 6, 3, 7,\n",
       "       2, 6, 7, 2, 2, 7, 3, 1, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bnk2_pred_tf = bnn.predict(X_test_tf2)\n",
    "bnk2_pred_tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive bayes Accuracy is: 0.6438775510204081\n",
      "Naive bayes f1 score is : 0.6253907937313617\n",
      "Naive bayes recall score is : 0.6480951278695215\n",
      "Naive bayes precison score is : 0.6654036032342047\n",
      "Naive bayes precison score is : 0.6654036032342047\n",
      "Naive bayes matthews_corrcoef score is : 0.5960886963598336\n"
     ]
    }
   ],
   "source": [
    "print(\"Naive bayes Accuracy is:\",metrics.accuracy_score(y_test_tf2, bnn_pred_tf))\n",
    "print(\"Naive bayes f1 score is :\",f1_score(y_test_tf2, bnk2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes recall score is :\",recall_score(y_test_tf2, bnk2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf2, bnk2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes precison score is :\",precision_score(y_test_tf2, bnk2_pred_tf, average='macro'))\n",
    "print(\"Naive bayes matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, bnk2_pred_tf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SUPPORT VECTOR(LINEAR) MACHINE MODEL USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm model using count vectorizer\n",
    "svm_n = SVC(kernel = 'linear', random_state=0)\n",
    "svm_n.fit(X_train_cv2,y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_svm_cv2 = cross_val_score(estimator=svm_n, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_svm_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 7, 3, 3, 4, 4, 1, 3, 3, 5, 6, 5, 2, 1, 5, 1, 4, 7, 2,\n",
       "       2, 5, 6, 5, 3, 4, 7, 4, 2, 6, 6, 4, 2, 3, 4, 7, 3, 5, 4, 6, 3, 6,\n",
       "       3, 6, 6, 1, 1, 5, 4, 3, 3, 6, 6, 3, 1, 1, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 6, 5, 3, 6, 6, 7, 6, 1, 5, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 5, 2, 4, 2, 7, 1, 5, 4, 6, 6, 2, 4, 2, 5, 4, 7, 4, 5, 1,\n",
       "       1, 4, 1, 4, 5, 6, 5, 5, 6, 3, 5, 3, 2, 4, 2, 5, 7, 2, 5, 2, 3, 3,\n",
       "       7, 4, 3, 2, 2, 5, 4, 7, 2, 4, 6, 4, 1, 2, 7, 3, 5, 5, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 1, 6, 5, 6, 7, 2, 5, 4, 7, 2, 1, 1, 6, 2, 6, 4, 5,\n",
       "       2, 3, 3, 2, 2, 2, 7, 3, 1, 4, 4, 7, 4, 1, 5, 7, 4, 7, 5, 2, 3, 2,\n",
       "       6, 4, 1, 1, 3, 5, 2, 2, 3, 4, 7, 3, 6, 3, 7, 6, 6, 4, 4, 1, 5, 4,\n",
       "       5, 7, 7, 3, 3, 6, 2, 6, 6, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 1, 3, 1, 1, 4, 2, 2, 2, 2, 6, 6, 6, 1, 1, 4, 6, 4, 5, 4, 3,\n",
       "       7, 5, 4, 5, 2, 1, 5, 7, 5, 4, 2, 7, 7, 6, 4, 3, 3, 3, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 5, 7, 3, 1, 7, 1, 3, 3, 7, 6, 5, 5, 2, 2, 4, 5, 3, 6,\n",
       "       2, 2, 2, 2, 5, 1, 3, 4, 6, 2, 5, 6, 6, 1, 5, 7, 5, 1, 3, 1, 3, 6,\n",
       "       1, 7, 7, 3, 6, 2, 4, 3, 3, 6, 6, 2, 3, 1, 6, 5, 3, 4, 1, 5, 7, 2,\n",
       "       3, 6, 7, 4, 4, 7, 5, 5, 7, 6, 5, 2, 6, 6, 6, 2, 7, 3, 1, 7, 3, 1,\n",
       "       4, 4, 3, 6, 1, 3, 3, 4, 5, 4, 6, 3, 6, 5, 5, 1, 3, 2, 3, 1, 3, 6,\n",
       "       5, 5, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 5, 2, 2, 6, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 2, 6, 6, 1, 4, 3, 6, 7, 2, 1, 3, 3, 5, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 1, 1, 2, 1, 3, 4, 1, 4, 4, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 1, 3, 7, 4, 7, 4, 3, 4, 5, 2, 4, 6, 4, 6, 3, 7, 4, 4, 1, 5, 6,\n",
       "       2, 3, 1, 5, 7, 3, 1, 4, 6, 5, 6, 1, 5, 4, 4, 7, 7, 6, 7, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 1, 3, 3, 3, 1, 5, 6, 2, 7, 3, 6, 3, 3, 3, 3,\n",
       "       6, 5, 3, 3, 7, 7, 1, 5, 2, 3, 4, 3, 6, 4, 3, 5, 1, 3, 1, 2, 4, 5,\n",
       "       5, 4, 3, 4, 1, 3, 3, 2, 6, 7, 4, 6, 3, 3, 3, 6, 6, 2, 1, 6, 5, 3,\n",
       "       2, 4, 2, 1, 2, 6, 1, 4, 5, 1, 3, 2, 5, 4, 2, 4, 2, 3, 5, 6, 2, 2,\n",
       "       3, 6, 7, 3, 4, 4, 7, 5, 2, 2, 1, 3, 5, 3, 2, 1, 3, 2, 3, 5, 5, 5,\n",
       "       6, 6, 1, 5, 2, 3, 3, 7, 6, 6, 3, 2, 3, 1, 1, 6, 4, 1, 2, 7, 6, 5,\n",
       "       3, 4, 4, 5, 3, 4, 2, 5, 7, 6, 2, 6, 6, 6, 7, 6, 6, 3, 1, 2, 2, 3,\n",
       "       1, 5, 2, 3, 7, 4, 5, 5, 7, 4, 1, 6, 2, 2, 2, 3, 2, 3, 6, 4, 3, 3,\n",
       "       7, 4, 2, 5, 3, 1, 4, 6, 6, 6, 4, 7, 4, 3, 1, 7, 4, 1, 1, 6, 7, 7,\n",
       "       1, 6, 7, 1, 2, 4, 1, 4, 6, 4, 6, 1, 3, 1, 5, 5, 7, 5, 5, 3, 7, 1,\n",
       "       7, 1, 6, 2, 2, 7, 2, 4, 6, 3, 6, 6, 1, 3, 2, 4, 1, 7, 7, 6, 6, 1,\n",
       "       5, 6, 6, 2, 2, 7, 7, 5, 7, 2, 1, 5, 3, 1, 3, 6, 3, 2, 4, 1, 7, 7,\n",
       "       2, 4, 4, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 6, 2, 1, 2, 7, 1, 2, 6,\n",
       "       5, 5, 2, 3, 4, 7, 6, 3, 1, 6, 4, 4, 6, 7, 1, 3, 7, 1, 1, 5, 5, 2,\n",
       "       4, 5, 7, 1, 6, 7, 6, 2, 1, 6, 2, 3, 2, 6, 5, 2, 3, 7, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 4, 3, 2, 2, 7, 7, 2, 1, 3, 3, 6, 7, 4, 7, 2, 6, 7, 5,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 1, 3, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 5, 3, 3, 4, 7, 2, 2, 3, 5, 6, 2, 2,\n",
       "       5, 5, 2, 4, 6, 2, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 5,\n",
       "       5, 1, 3, 7, 7, 7, 7, 7, 3, 6, 5, 2, 1, 4, 7, 1, 6, 6, 6, 4, 2, 7,\n",
       "       1, 7, 6, 3, 4, 1, 6, 4, 6, 1, 1, 1, 4, 6, 3, 1, 6, 6, 4, 6, 3, 7,\n",
       "       2, 6, 7, 2, 6, 6, 3, 1, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_pred_cv2 = svm_n.predict(X_test_cv2)\n",
    "svm_pred_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM(LINEAR) Accuracy is: 0.7642857142857142\n",
      "SVM(LINEAR) f1 score is : 0.7644287843397322\n",
      "SVM(LINEAR) recall score is : 0.7652796310615485\n",
      "SVM(LINEAR) precison score is : 0.7675495709587922\n",
      "SVM(LINEAR) precison score is : 0.7675495709587922\n",
      "SVM(LINEAR) matthews_corrcoef score is : 0.7255882045867541\n"
     ]
    }
   ],
   "source": [
    "print(\"SVM(LINEAR) Accuracy is:\",metrics.accuracy_score(y_test_cv2, svm_pred_cv2))\n",
    "print(\"SVM(LINEAR) f1 score is :\",f1_score(y_test_cv2, svm_pred_cv2, average='macro'))\n",
    "print(\"SVM(LINEAR) recall score is :\",recall_score(y_test_cv2, svm_pred_cv2, average='macro'))\n",
    "print(\"SVM(LINEAR) precison score is :\",precision_score(y_test_cv2, svm_pred_cv2, average='macro'))\n",
    "print(\"SVM(LINEAR) precison score is :\",precision_score(y_test_cv2, svm_pred_cv2, average='macro'))\n",
    "print(\"SVM(LINEAR) matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, svm_pred_cv2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM MODEL(LINEAR) USING TFIDF VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm model using tfidf vectorizer\n",
    "svm_n.fit(X_train_tf2,y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_svm_tf2 = cross_val_score(estimator=svm_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_svm_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 7, 3, 3, 5, 4, 4, 3, 3, 5, 6, 5, 6, 1, 5, 1, 4, 7, 5,\n",
       "       4, 5, 6, 5, 3, 4, 7, 4, 6, 6, 7, 4, 2, 3, 4, 7, 3, 5, 4, 6, 3, 6,\n",
       "       2, 6, 6, 1, 1, 5, 6, 3, 3, 6, 6, 3, 1, 1, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 6, 5, 3, 7, 6, 7, 6, 1, 5, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 2, 2, 4, 2, 7, 1, 5, 4, 6, 6, 2, 4, 2, 5, 4, 7, 4, 5, 1,\n",
       "       1, 4, 1, 4, 6, 6, 5, 5, 7, 3, 5, 3, 2, 4, 2, 2, 7, 2, 5, 2, 3, 6,\n",
       "       7, 4, 3, 2, 2, 5, 4, 7, 2, 4, 7, 4, 1, 2, 7, 3, 5, 4, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 1, 6, 5, 6, 7, 2, 5, 4, 7, 2, 1, 1, 6, 2, 6, 4, 5,\n",
       "       4, 6, 3, 2, 2, 2, 7, 3, 1, 4, 4, 7, 4, 1, 5, 7, 4, 7, 5, 6, 3, 2,\n",
       "       6, 4, 1, 1, 3, 1, 2, 2, 3, 4, 7, 3, 7, 3, 7, 6, 6, 4, 4, 1, 5, 4,\n",
       "       2, 7, 7, 3, 3, 6, 2, 6, 7, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 2, 2, 2, 6, 6, 6, 1, 1, 4, 6, 4, 2, 4, 3,\n",
       "       7, 5, 6, 5, 2, 6, 5, 7, 4, 4, 2, 7, 7, 6, 6, 3, 3, 3, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 5, 7, 3, 1, 7, 1, 3, 4, 7, 6, 5, 5, 2, 6, 4, 5, 3, 6,\n",
       "       2, 2, 2, 4, 5, 6, 3, 4, 6, 2, 4, 6, 6, 1, 5, 7, 5, 1, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 6, 4, 4, 3, 3, 6, 2, 2, 3, 1, 6, 5, 3, 4, 1, 5, 7, 6,\n",
       "       3, 6, 7, 4, 4, 7, 5, 1, 7, 6, 5, 2, 6, 6, 6, 2, 7, 4, 1, 7, 3, 1,\n",
       "       4, 4, 3, 7, 1, 3, 3, 4, 5, 6, 6, 3, 6, 4, 5, 1, 3, 2, 3, 5, 3, 6,\n",
       "       5, 5, 7, 4, 7, 1, 6, 6, 1, 5, 2, 6, 5, 2, 2, 6, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 2, 7, 6, 1, 4, 3, 6, 7, 2, 1, 3, 3, 5, 3, 4, 3, 7,\n",
       "       5, 7, 5, 3, 6, 5, 1, 2, 1, 3, 4, 1, 4, 4, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 1, 4, 7, 4, 7, 4, 3, 4, 2, 2, 4, 3, 4, 6, 3, 7, 4, 4, 1, 4, 6,\n",
       "       4, 3, 1, 5, 7, 3, 1, 6, 6, 4, 6, 5, 5, 4, 4, 7, 7, 6, 7, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 1, 3, 3, 4, 1, 5, 6, 7, 7, 3, 6, 3, 6, 3, 3,\n",
       "       6, 3, 3, 3, 7, 7, 1, 5, 2, 3, 4, 3, 6, 6, 3, 5, 1, 2, 1, 2, 6, 1,\n",
       "       5, 4, 4, 5, 1, 3, 3, 6, 6, 7, 4, 7, 3, 3, 3, 6, 6, 2, 6, 6, 5, 3,\n",
       "       2, 4, 2, 1, 2, 6, 5, 4, 5, 1, 3, 2, 5, 4, 2, 4, 2, 3, 5, 6, 2, 2,\n",
       "       3, 6, 7, 3, 4, 4, 7, 5, 2, 2, 1, 3, 1, 3, 2, 1, 3, 6, 3, 5, 5, 2,\n",
       "       6, 6, 1, 5, 2, 3, 3, 6, 6, 6, 3, 2, 3, 1, 1, 6, 3, 1, 2, 6, 7, 5,\n",
       "       3, 4, 4, 5, 3, 4, 2, 5, 7, 6, 2, 5, 6, 6, 7, 6, 4, 4, 5, 2, 2, 3,\n",
       "       1, 5, 2, 3, 7, 4, 5, 5, 7, 4, 1, 6, 2, 2, 2, 3, 2, 3, 6, 4, 3, 3,\n",
       "       7, 4, 2, 5, 6, 1, 2, 6, 6, 6, 4, 7, 4, 3, 5, 7, 6, 5, 1, 6, 7, 7,\n",
       "       1, 6, 7, 1, 6, 4, 1, 4, 6, 4, 4, 1, 6, 1, 5, 5, 7, 6, 5, 3, 7, 1,\n",
       "       7, 1, 6, 6, 2, 7, 2, 4, 6, 3, 6, 6, 1, 3, 2, 4, 1, 7, 7, 6, 3, 1,\n",
       "       1, 6, 6, 2, 2, 7, 7, 5, 7, 2, 1, 5, 6, 1, 3, 6, 3, 2, 4, 5, 7, 7,\n",
       "       2, 4, 4, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 6, 7, 5, 6, 7, 1, 2, 6,\n",
       "       5, 5, 2, 3, 4, 7, 7, 3, 1, 6, 4, 4, 6, 7, 1, 3, 7, 1, 1, 5, 5, 2,\n",
       "       4, 5, 7, 1, 6, 7, 6, 2, 5, 6, 2, 6, 2, 6, 1, 2, 3, 7, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 4, 3, 2, 2, 7, 7, 6, 1, 3, 3, 6, 7, 4, 7, 2, 6, 7, 5,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 5, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 7, 3, 3, 4, 7, 2, 2, 2, 5, 6, 2, 6,\n",
       "       5, 5, 2, 4, 6, 6, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 4, 6, 3, 2, 6, 2,\n",
       "       7, 1, 3, 7, 7, 7, 7, 7, 3, 6, 5, 2, 1, 4, 7, 1, 6, 6, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 4, 1, 6, 4, 6, 1, 1, 1, 4, 6, 6, 1, 6, 6, 6, 6, 6, 7,\n",
       "       4, 6, 7, 4, 6, 6, 3, 4, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_pred_tf2 = svm_n.predict(X_test_tf2)\n",
    "svm_pred_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " SVM(LINEAR)  Accuracy is: 0.7724489795918368\n",
      " SVM(LINEAR) f1 score is : 0.7732338012552898\n",
      "SVM(LINEAR) recall score is : 0.7736984716524092\n",
      "SVM(LINEAR) precison score is : 0.7794806376066427\n",
      "SVM(LINEAR) precison score is : 0.7794806376066427\n",
      "SVM(LINEAR) matthews_corrcoef score is : 0.7357219868364955\n"
     ]
    }
   ],
   "source": [
    "print(\" SVM(LINEAR)  Accuracy is:\",metrics.accuracy_score(y_test_tf2, svm_pred_tf2))\n",
    "print(\" SVM(LINEAR) f1 score is :\",f1_score(y_test_tf2, svm_pred_tf2, average='macro'))\n",
    "print(\"SVM(LINEAR) recall score is :\",recall_score(y_test_tf2, svm_pred_tf2, average='macro'))\n",
    "print(\"SVM(LINEAR) precison score is :\",precision_score(y_test_tf2, svm_pred_tf2, average='macro'))\n",
    "print(\"SVM(LINEAR) precison score is :\",precision_score(y_test_tf2, svm_pred_tf2, average='macro'))\n",
    "print(\"SVM(LINEAR) matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, svm_pred_tf2))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM POLY KERNAL USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='poly',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using count vectorizer\n",
    "from sklearn.svm import SVC\n",
    "Psvm_n = SVC(kernel = 'poly', random_state=0)\n",
    "Psvm_n.fit(X_train_cv2,y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_psvm_tf2 = cross_val_score(estimator=svm_n, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_psvm_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 3, 1, 1, 3, 3, 3, 1, 3, 1, 3, 3, 5, 3, 5, 3, 1, 5, 1, 3, 3, 2,\n",
       "       2, 3, 3, 1, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 7, 3, 1, 3, 6, 3, 3,\n",
       "       3, 3, 3, 3, 1, 5, 2, 3, 3, 3, 3, 3, 1, 1, 7, 1, 1, 3, 3, 3, 3, 5,\n",
       "       3, 1, 3, 3, 5, 3, 3, 3, 3, 2, 1, 2, 1, 3, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       1, 3, 3, 5, 2, 2, 3, 3, 1, 2, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 5, 1,\n",
       "       5, 3, 1, 3, 5, 3, 5, 1, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 3,\n",
       "       7, 3, 3, 3, 3, 1, 3, 7, 2, 4, 3, 2, 3, 3, 3, 3, 1, 5, 7, 3, 3, 3,\n",
       "       3, 2, 1, 3, 1, 1, 3, 5, 3, 3, 2, 5, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3,\n",
       "       2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 4, 1, 1, 7, 3, 7, 1, 3, 3, 3,\n",
       "       3, 4, 1, 1, 3, 1, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 4,\n",
       "       2, 7, 7, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 2, 5, 3, 3, 3, 3, 3, 3, 7,\n",
       "       1, 3, 7, 3, 1, 1, 3, 3, 2, 2, 2, 3, 3, 3, 1, 1, 4, 3, 3, 2, 3, 3,\n",
       "       3, 1, 3, 5, 3, 5, 5, 3, 3, 3, 3, 7, 2, 3, 3, 3, 3, 3, 3, 3, 3, 5,\n",
       "       3, 3, 2, 3, 1, 3, 3, 1, 3, 1, 3, 3, 7, 3, 5, 5, 3, 2, 4, 5, 3, 3,\n",
       "       3, 3, 3, 3, 1, 5, 3, 3, 3, 3, 5, 3, 3, 1, 5, 3, 5, 5, 3, 1, 3, 3,\n",
       "       1, 7, 3, 3, 2, 3, 4, 3, 3, 3, 2, 3, 3, 1, 3, 5, 3, 3, 1, 5, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 5, 3, 3, 3, 3, 2, 3, 3, 1, 7, 3, 1,\n",
       "       3, 4, 3, 3, 3, 3, 3, 3, 5, 7, 3, 3, 3, 5, 1, 1, 3, 2, 3, 5, 3, 3,\n",
       "       1, 3, 7, 4, 7, 2, 3, 3, 3, 1, 2, 2, 1, 2, 3, 3, 3, 1, 5, 3, 3, 7,\n",
       "       1, 4, 1, 3, 3, 2, 3, 3, 1, 3, 3, 2, 3, 5, 3, 3, 3, 1, 3, 2, 3, 7,\n",
       "       1, 7, 3, 3, 3, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 2, 3, 2, 3, 3, 1,\n",
       "       3, 2, 3, 3, 3, 7, 3, 3, 5, 5, 3, 4, 3, 3, 3, 3, 3, 3, 3, 1, 5, 3,\n",
       "       3, 3, 1, 1, 3, 3, 1, 3, 3, 3, 3, 1, 5, 3, 3, 3, 7, 3, 3, 3, 3, 1,\n",
       "       1, 7, 3, 5, 2, 3, 3, 2, 3, 3, 3, 1, 5, 3, 3, 7, 3, 3, 3, 3, 3, 3,\n",
       "       3, 2, 3, 3, 3, 7, 1, 1, 3, 3, 3, 3, 3, 4, 3, 1, 1, 3, 1, 2, 2, 2,\n",
       "       1, 3, 3, 2, 1, 3, 3, 3, 3, 7, 3, 3, 3, 3, 3, 3, 6, 2, 3, 3, 3, 3,\n",
       "       3, 2, 3, 5, 3, 3, 3, 4, 1, 1, 3, 2, 5, 4, 3, 3, 3, 3, 5, 3, 3, 2,\n",
       "       3, 3, 3, 3, 4, 3, 3, 5, 3, 2, 1, 3, 3, 3, 3, 1, 3, 2, 3, 5, 1, 2,\n",
       "       6, 3, 1, 1, 3, 3, 3, 2, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 2, 3, 3, 5,\n",
       "       3, 3, 3, 3, 3, 3, 3, 1, 7, 3, 2, 2, 3, 3, 7, 3, 3, 3, 1, 2, 3, 3,\n",
       "       3, 1, 2, 3, 7, 4, 1, 3, 7, 4, 1, 3, 2, 2, 3, 3, 2, 3, 3, 3, 3, 3,\n",
       "       7, 4, 2, 5, 3, 1, 2, 3, 3, 3, 3, 3, 2, 3, 1, 7, 4, 6, 5, 3, 3, 3,\n",
       "       1, 3, 3, 1, 2, 3, 1, 3, 3, 3, 3, 1, 3, 1, 5, 5, 7, 5, 2, 3, 3, 1,\n",
       "       7, 1, 3, 5, 3, 7, 3, 4, 3, 3, 3, 3, 1, 3, 2, 4, 5, 7, 3, 4, 3, 1,\n",
       "       1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 4, 3, 1, 3, 2, 3, 3, 3, 1, 3, 7,\n",
       "       3, 2, 3, 3, 1, 4, 3, 1, 3, 4, 3, 3, 2, 3, 3, 2, 5, 3, 7, 1, 3, 3,\n",
       "       1, 5, 2, 3, 4, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 7, 5, 1, 3, 5, 3,\n",
       "       3, 1, 7, 3, 3, 7, 3, 3, 1, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 2, 3, 3,\n",
       "       3, 3, 2, 7, 3, 3, 3, 2, 7, 2, 3, 1, 3, 3, 3, 1, 3, 7, 3, 3, 3, 5,\n",
       "       3, 1, 3, 7, 1, 3, 7, 3, 3, 6, 3, 3, 3, 3, 3, 3, 1, 3, 3, 7, 3, 3,\n",
       "       3, 3, 1, 3, 3, 3, 3, 3, 3, 7, 3, 3, 3, 4, 7, 3, 3, 3, 5, 3, 3, 3,\n",
       "       3, 5, 2, 3, 3, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 2, 5,\n",
       "       1, 1, 3, 7, 3, 7, 7, 3, 3, 3, 3, 2, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3,\n",
       "       1, 7, 4, 3, 3, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 7,\n",
       "       3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psvm_pred_cv2 = Psvm_n.predict(X_test_cv2)\n",
    "psvm_pred_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.4030612244897959\n",
      "SVM(POLY) f1 score is : 0.37179213825551\n",
      "SVM(POLY) recall score is : 0.40135821954625717\n",
      "SVM(POLY) precison score is : 0.5783709467155164\n",
      "SVM(POLY) precison score is : 0.5783709467155164\n",
      "SVM(POLY) matthews_corrcoef score is : 0.35812398181937827\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_cv2, psvm_pred_cv2))\n",
    "print(\"SVM(POLY) f1 score is :\",f1_score(y_test_cv2, psvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(POLY) recall score is :\",recall_score(y_test_cv2, psvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_cv2, psvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_cv2, psvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(POLY) matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, psvm_pred_cv2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM POLY KERNAL USING TFIDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='poly',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using tfidf  vectorizer\n",
    "from sklearn.svm import SVC\n",
    "Psvm_n = SVC(kernel = 'poly', random_state=0)\n",
    "Psvm_n.fit(X_train_tf2,y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_psvm_tf2 = cross_val_score(estimator=rsvm_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_psvm_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 6, 1, 4, 7, 3, 4, 5, 6, 6, 3, 6, 5, 6, 5, 6, 1, 5, 1, 4, 7, 6,\n",
       "       6, 5, 6, 5, 3, 4, 7, 6, 6, 6, 7, 4, 2, 3, 4, 7, 3, 6, 4, 6, 3, 6,\n",
       "       6, 6, 6, 6, 1, 5, 6, 3, 3, 6, 6, 3, 6, 5, 6, 1, 1, 3, 6, 4, 6, 4,\n",
       "       2, 1, 5, 2, 5, 3, 7, 6, 7, 6, 5, 5, 1, 4, 3, 6, 1, 7, 3, 7, 1, 1,\n",
       "       4, 6, 6, 6, 2, 4, 6, 7, 1, 6, 4, 6, 6, 2, 4, 2, 5, 6, 6, 4, 4, 6,\n",
       "       6, 6, 1, 6, 6, 6, 6, 5, 7, 3, 6, 3, 5, 4, 2, 6, 6, 2, 6, 2, 3, 6,\n",
       "       7, 4, 3, 2, 4, 5, 6, 7, 2, 4, 6, 4, 6, 2, 7, 6, 5, 4, 7, 2, 6, 6,\n",
       "       2, 2, 1, 7, 1, 6, 7, 5, 6, 7, 2, 5, 4, 7, 2, 6, 5, 6, 6, 6, 4, 6,\n",
       "       4, 6, 3, 2, 5, 6, 7, 6, 1, 6, 4, 7, 4, 1, 5, 7, 4, 7, 5, 6, 3, 4,\n",
       "       6, 4, 6, 1, 3, 6, 6, 2, 3, 4, 6, 3, 7, 3, 6, 6, 7, 5, 6, 1, 5, 6,\n",
       "       5, 7, 7, 3, 3, 6, 2, 6, 6, 1, 5, 7, 2, 6, 5, 3, 3, 6, 2, 6, 6, 7,\n",
       "       2, 6, 6, 3, 1, 6, 4, 2, 6, 2, 2, 6, 6, 6, 1, 6, 4, 6, 3, 6, 4, 3,\n",
       "       7, 5, 6, 5, 5, 6, 5, 6, 4, 4, 6, 7, 7, 6, 6, 3, 3, 2, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 6, 7, 3, 6, 7, 6, 3, 4, 6, 7, 5, 6, 6, 6, 6, 6, 3, 6,\n",
       "       2, 2, 2, 2, 4, 6, 3, 4, 6, 2, 6, 6, 7, 1, 6, 7, 5, 6, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 6, 4, 4, 3, 3, 6, 2, 2, 6, 6, 6, 5, 3, 4, 6, 6, 7, 6,\n",
       "       3, 5, 7, 6, 4, 6, 6, 5, 6, 6, 5, 2, 6, 6, 6, 2, 7, 6, 1, 6, 3, 1,\n",
       "       4, 6, 3, 6, 1, 3, 3, 4, 5, 6, 6, 6, 6, 4, 5, 6, 3, 2, 6, 5, 6, 6,\n",
       "       6, 3, 7, 4, 7, 1, 6, 6, 1, 6, 2, 6, 5, 2, 5, 6, 6, 2, 5, 6, 3, 7,\n",
       "       1, 4, 6, 3, 4, 2, 7, 6, 1, 6, 4, 6, 7, 6, 1, 3, 3, 1, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 6, 1, 3, 1, 3, 4, 1, 4, 6, 3, 6, 5, 6, 6, 6, 6, 1,\n",
       "       3, 6, 6, 7, 4, 7, 4, 3, 4, 5, 6, 6, 3, 4, 6, 3, 6, 4, 6, 1, 5, 6,\n",
       "       4, 3, 1, 6, 6, 3, 6, 6, 6, 4, 6, 5, 6, 4, 4, 7, 7, 6, 7, 6, 3, 5,\n",
       "       6, 7, 6, 5, 2, 2, 7, 6, 3, 3, 4, 1, 6, 6, 7, 7, 3, 6, 3, 6, 3, 6,\n",
       "       6, 4, 6, 3, 7, 6, 1, 6, 2, 3, 4, 3, 6, 6, 3, 5, 6, 6, 6, 2, 6, 5,\n",
       "       5, 4, 6, 5, 6, 3, 3, 6, 6, 7, 4, 7, 4, 3, 3, 6, 6, 2, 6, 6, 5, 3,\n",
       "       6, 4, 2, 5, 2, 6, 6, 4, 1, 1, 3, 2, 6, 4, 2, 6, 2, 3, 6, 6, 2, 2,\n",
       "       3, 2, 7, 3, 4, 6, 6, 6, 5, 6, 1, 3, 1, 3, 6, 4, 3, 6, 3, 6, 5, 4,\n",
       "       6, 6, 5, 5, 2, 3, 2, 6, 6, 6, 3, 6, 3, 6, 1, 6, 2, 6, 3, 6, 7, 5,\n",
       "       3, 4, 4, 5, 3, 4, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 4, 5, 2, 4, 3,\n",
       "       1, 5, 5, 3, 7, 6, 5, 5, 7, 6, 5, 6, 2, 2, 2, 3, 2, 6, 7, 4, 2, 3,\n",
       "       7, 4, 6, 1, 6, 1, 6, 6, 6, 6, 4, 7, 6, 3, 5, 7, 6, 6, 6, 6, 6, 7,\n",
       "       6, 6, 7, 1, 6, 4, 1, 4, 6, 4, 6, 1, 6, 6, 5, 5, 7, 6, 2, 3, 7, 6,\n",
       "       7, 1, 7, 6, 2, 7, 2, 4, 2, 3, 6, 6, 6, 3, 2, 6, 6, 7, 7, 6, 6, 1,\n",
       "       6, 6, 6, 3, 2, 7, 7, 2, 7, 2, 1, 6, 6, 6, 3, 6, 6, 2, 4, 6, 7, 6,\n",
       "       2, 5, 6, 6, 6, 4, 3, 1, 3, 4, 2, 7, 4, 6, 6, 7, 5, 6, 7, 5, 2, 1,\n",
       "       2, 5, 2, 6, 4, 7, 6, 3, 1, 6, 6, 4, 6, 7, 1, 3, 7, 6, 1, 6, 6, 6,\n",
       "       4, 5, 7, 6, 6, 7, 6, 6, 5, 6, 2, 6, 2, 6, 4, 2, 6, 7, 2, 5, 3, 6,\n",
       "       6, 6, 6, 7, 6, 3, 2, 6, 7, 7, 6, 6, 6, 3, 6, 7, 4, 7, 2, 6, 7, 6,\n",
       "       2, 5, 6, 7, 1, 6, 7, 1, 6, 6, 6, 3, 6, 5, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 7, 6, 3, 4, 7, 6, 2, 2, 5, 6, 2, 7,\n",
       "       5, 5, 6, 4, 6, 6, 5, 2, 4, 1, 1, 2, 3, 3, 6, 3, 6, 6, 3, 2, 6, 6,\n",
       "       7, 1, 3, 6, 6, 7, 7, 7, 3, 6, 5, 5, 1, 4, 7, 5, 6, 6, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 2, 1, 6, 4, 6, 6, 4, 1, 4, 6, 6, 6, 6, 7, 6, 6, 6, 7,\n",
       "       2, 6, 6, 4, 6, 6, 5, 6, 7, 6, 3, 4])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psvm_pred_tf2 = Psvm_n.predict(X_test_tf2)\n",
    "psvm_pred_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.6224489795918368\n",
      "SVM(POLY) f1 score is : 0.6387060762385384\n",
      "SVM(POLY) recall score is : 0.6221467343752831\n",
      "SVM(POLY) precison score is : 0.7228488296816372\n",
      "SVM(POLY) precison score is : 0.7228488296816372\n",
      "SVM(POLY) matthews_corrcoef score is : 0.5802738368341996\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_tf2, psvm_pred_tf2))\n",
    "print(\"SVM(POLY) f1 score is :\",f1_score(y_test_tf2, psvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(POLY) recall score is :\",recall_score(y_test_tf2, psvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_tf2, psvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(POLY) precison score is :\",precision_score(y_test_tf2, psvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(POLY) matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, psvm_pred_tf2))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM GAUSSIAN USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using count vectorizer\n",
    "from sklearn.svm import SVC\n",
    "rsvm_n = SVC(kernel = 'rbf', random_state=0)\n",
    "rsvm_n.fit(X_train_cv2,y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_rsvm_tf2 = cross_val_score(estimator=rsvm_n, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_rsvm_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 7, 3, 6, 5, 4, 7, 5, 2, 5, 6, 5, 6, 1, 7, 1, 4, 7, 2,\n",
       "       2, 5, 6, 5, 3, 4, 7, 4, 2, 6, 7, 4, 2, 3, 4, 7, 3, 5, 3, 6, 3, 6,\n",
       "       2, 6, 6, 6, 1, 5, 4, 3, 3, 6, 6, 3, 1, 1, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 6, 5, 3, 7, 6, 7, 2, 1, 5, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 5, 2, 4, 2, 7, 1, 5, 4, 6, 6, 2, 4, 2, 5, 4, 7, 4, 5, 5,\n",
       "       5, 6, 1, 4, 7, 6, 5, 5, 6, 3, 5, 3, 2, 4, 6, 2, 6, 2, 7, 2, 3, 6,\n",
       "       7, 4, 3, 6, 2, 1, 4, 7, 2, 4, 7, 7, 6, 2, 7, 3, 5, 5, 7, 2, 7, 7,\n",
       "       2, 2, 1, 7, 1, 1, 6, 5, 6, 7, 2, 5, 4, 7, 2, 1, 1, 6, 2, 6, 4, 4,\n",
       "       4, 6, 3, 2, 4, 2, 7, 3, 1, 7, 4, 7, 4, 1, 5, 7, 4, 7, 5, 6, 3, 2,\n",
       "       6, 4, 5, 1, 3, 1, 2, 2, 3, 4, 7, 3, 6, 3, 7, 6, 6, 4, 4, 1, 5, 7,\n",
       "       5, 7, 7, 3, 3, 7, 2, 6, 2, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 7, 3, 1, 7, 4, 2, 2, 2, 2, 6, 6, 6, 1, 7, 4, 7, 4, 7, 4, 3,\n",
       "       7, 5, 6, 5, 2, 5, 5, 7, 1, 4, 2, 7, 7, 6, 4, 3, 3, 6, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 5, 6, 3, 7, 7, 1, 3, 6, 7, 7, 5, 7, 2, 7, 4, 7, 3, 6,\n",
       "       2, 2, 2, 4, 5, 7, 3, 6, 6, 2, 7, 6, 6, 1, 5, 7, 5, 7, 3, 1, 3, 6,\n",
       "       1, 7, 7, 3, 7, 3, 4, 3, 3, 6, 2, 2, 3, 1, 6, 5, 3, 4, 1, 5, 7, 6,\n",
       "       3, 6, 7, 4, 4, 7, 5, 1, 7, 6, 5, 2, 6, 7, 6, 2, 7, 4, 1, 7, 3, 1,\n",
       "       4, 4, 3, 6, 1, 3, 3, 4, 5, 7, 6, 3, 6, 7, 5, 1, 3, 2, 3, 5, 3, 6,\n",
       "       5, 1, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 5, 2, 2, 7, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 2, 6, 6, 1, 4, 3, 6, 7, 7, 6, 3, 3, 5, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 1, 1, 4, 1, 3, 4, 1, 4, 4, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 1, 3, 7, 4, 7, 4, 3, 7, 5, 2, 7, 6, 4, 7, 3, 7, 4, 4, 1, 7, 7,\n",
       "       3, 3, 1, 5, 7, 3, 5, 6, 6, 4, 7, 5, 5, 4, 4, 7, 7, 7, 3, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 2, 3, 3, 7, 1, 7, 6, 7, 7, 3, 6, 3, 6, 3, 3,\n",
       "       6, 5, 3, 3, 7, 7, 5, 5, 2, 3, 4, 3, 6, 7, 3, 5, 1, 6, 1, 2, 6, 5,\n",
       "       5, 4, 6, 4, 5, 3, 3, 6, 6, 7, 4, 6, 3, 3, 3, 6, 7, 2, 7, 6, 5, 3,\n",
       "       2, 4, 2, 5, 2, 7, 5, 4, 5, 1, 3, 2, 5, 7, 2, 4, 2, 6, 5, 6, 2, 2,\n",
       "       3, 6, 7, 3, 4, 4, 7, 7, 2, 5, 1, 3, 5, 3, 2, 1, 3, 2, 3, 7, 5, 5,\n",
       "       7, 6, 1, 5, 2, 3, 3, 7, 6, 6, 3, 2, 3, 1, 1, 6, 4, 7, 2, 6, 6, 5,\n",
       "       3, 4, 4, 1, 3, 4, 6, 5, 7, 6, 2, 6, 4, 6, 7, 6, 7, 4, 1, 2, 2, 3,\n",
       "       6, 5, 2, 3, 7, 7, 5, 5, 7, 6, 1, 6, 2, 2, 2, 3, 2, 3, 2, 4, 3, 3,\n",
       "       7, 4, 2, 5, 6, 1, 5, 6, 6, 6, 4, 7, 4, 3, 5, 7, 5, 7, 5, 6, 7, 7,\n",
       "       1, 6, 7, 1, 6, 4, 1, 4, 6, 4, 6, 1, 6, 1, 5, 5, 7, 7, 5, 3, 7, 1,\n",
       "       7, 1, 7, 7, 2, 7, 6, 4, 6, 3, 6, 6, 1, 3, 2, 5, 7, 7, 7, 6, 6, 1,\n",
       "       5, 6, 6, 2, 2, 7, 7, 5, 7, 2, 1, 5, 6, 1, 3, 6, 3, 2, 3, 1, 7, 7,\n",
       "       2, 4, 6, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 6, 6, 5, 6, 7, 1, 3, 6,\n",
       "       5, 5, 2, 3, 4, 7, 7, 3, 1, 6, 4, 6, 6, 7, 1, 3, 7, 7, 1, 5, 7, 7,\n",
       "       4, 5, 7, 1, 6, 7, 6, 6, 5, 6, 2, 2, 2, 6, 7, 2, 3, 7, 2, 4, 3, 4,\n",
       "       4, 3, 7, 7, 4, 3, 2, 2, 7, 7, 6, 1, 3, 3, 6, 7, 4, 7, 3, 6, 7, 7,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 3, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 7, 3, 3, 4, 7, 2, 2, 3, 5, 6, 2, 2,\n",
       "       2, 5, 2, 4, 7, 2, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 5,\n",
       "       1, 5, 3, 7, 7, 7, 7, 7, 3, 6, 2, 2, 1, 2, 7, 1, 6, 6, 6, 4, 2, 7,\n",
       "       1, 7, 6, 3, 4, 1, 6, 4, 6, 1, 1, 1, 4, 6, 6, 1, 6, 6, 6, 7, 6, 7,\n",
       "       4, 7, 7, 2, 6, 6, 3, 1, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rsvm_pred_cv2 = rsvm_n.predict(X_test_cv2)\n",
    "rsvm_pred_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.7183673469387755\n",
      "SVM(GAUSSIAN) f1 score is : 0.7196516068431353\n",
      "SVM(GAUSSIAN) recall score is : 0.719417879175691\n",
      "SVM(GAUSSIAN) precison score is : 0.735169632246185\n",
      "SVM(GAUSSIAN) precison score is : 0.735169632246185\n",
      "SVM(GAUSSIAN) matthews_corrcoef score is : 0.6740480772028755\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_cv2, rsvm_pred_cv2))\n",
    "print(\"SVM(GAUSSIAN) f1 score is :\",f1_score(y_test_cv2, rsvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) recall score is :\",recall_score(y_test_cv2, rsvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_cv2, rsvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_cv2, rsvm_pred_cv2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, rsvm_pred_cv2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM GAUSSIAN USING TFIDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting svm using tfidf  vectorizer\n",
    "from sklearn.svm import SVC\n",
    "rsvm_n = SVC(kernel = 'rbf', random_state=0)\n",
    "rsvm_n.fit(X_train_tf2,y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation test\n",
    "cross_rsvm_tf2 = cross_val_score(estimator=rsvm_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_rsvm_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 6, 1, 1, 7, 3, 4, 5, 4, 4, 3, 6, 5, 6, 5, 6, 1, 5, 1, 4, 7, 5,\n",
       "       4, 5, 6, 5, 3, 4, 7, 4, 6, 6, 7, 4, 2, 3, 4, 7, 3, 5, 4, 6, 3, 6,\n",
       "       6, 6, 6, 6, 1, 5, 6, 3, 3, 6, 6, 3, 1, 5, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       2, 1, 4, 2, 5, 3, 7, 6, 6, 2, 1, 5, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 2, 2, 4, 2, 7, 1, 2, 4, 6, 6, 2, 4, 2, 5, 4, 6, 4, 5, 4,\n",
       "       5, 4, 1, 4, 5, 6, 5, 5, 7, 3, 5, 3, 5, 4, 2, 2, 7, 2, 6, 2, 3, 6,\n",
       "       7, 4, 3, 2, 2, 5, 4, 7, 2, 4, 7, 4, 6, 2, 7, 2, 5, 4, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 6, 6, 5, 6, 7, 2, 5, 4, 7, 2, 1, 1, 6, 2, 6, 4, 6,\n",
       "       4, 6, 3, 2, 2, 2, 7, 6, 1, 6, 4, 7, 4, 1, 5, 7, 4, 7, 5, 6, 3, 2,\n",
       "       6, 4, 1, 1, 3, 1, 2, 2, 3, 4, 7, 3, 7, 3, 7, 6, 6, 4, 4, 1, 5, 4,\n",
       "       5, 7, 7, 3, 3, 6, 2, 6, 7, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 2, 2, 2, 6, 6, 6, 1, 1, 4, 6, 4, 6, 4, 3,\n",
       "       7, 5, 6, 5, 2, 6, 5, 6, 4, 4, 2, 7, 7, 6, 6, 3, 3, 2, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 5, 7, 3, 6, 7, 1, 3, 4, 7, 7, 5, 5, 6, 6, 4, 5, 3, 6,\n",
       "       2, 2, 2, 2, 4, 6, 3, 4, 6, 2, 4, 6, 6, 1, 5, 7, 1, 1, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 6, 4, 4, 3, 3, 6, 2, 2, 2, 1, 6, 5, 3, 4, 6, 5, 7, 6,\n",
       "       3, 6, 7, 6, 4, 7, 5, 1, 7, 6, 5, 2, 6, 6, 6, 2, 7, 4, 1, 7, 3, 1,\n",
       "       4, 4, 3, 6, 1, 3, 3, 4, 5, 6, 6, 3, 6, 4, 5, 1, 3, 2, 3, 5, 3, 6,\n",
       "       5, 5, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 5, 2, 4, 6, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 2, 7, 6, 1, 6, 3, 6, 7, 2, 1, 3, 3, 1, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 1, 1, 3, 1, 3, 4, 1, 4, 4, 3, 5, 5, 6, 2, 2, 7, 1,\n",
       "       3, 1, 4, 7, 4, 7, 4, 3, 4, 5, 2, 4, 3, 4, 6, 3, 7, 4, 4, 1, 4, 6,\n",
       "       4, 3, 1, 5, 6, 3, 1, 6, 6, 4, 6, 5, 5, 4, 4, 7, 7, 6, 7, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 1, 3, 3, 4, 1, 5, 6, 7, 7, 3, 6, 3, 6, 3, 6,\n",
       "       6, 3, 4, 3, 7, 6, 1, 5, 2, 3, 4, 3, 6, 6, 3, 5, 1, 2, 1, 2, 6, 5,\n",
       "       5, 4, 6, 4, 1, 3, 3, 6, 6, 7, 4, 7, 3, 3, 3, 6, 6, 2, 6, 6, 5, 3,\n",
       "       2, 4, 2, 5, 2, 6, 5, 4, 5, 1, 3, 2, 5, 4, 2, 4, 2, 3, 5, 6, 2, 2,\n",
       "       3, 2, 7, 3, 4, 4, 7, 5, 2, 2, 1, 3, 1, 3, 2, 5, 3, 6, 3, 5, 5, 5,\n",
       "       6, 6, 1, 5, 2, 3, 2, 6, 6, 6, 3, 6, 3, 1, 1, 6, 4, 1, 2, 6, 7, 5,\n",
       "       3, 4, 4, 5, 3, 4, 2, 5, 6, 6, 2, 5, 6, 6, 7, 6, 6, 4, 5, 2, 2, 3,\n",
       "       1, 5, 2, 3, 7, 4, 5, 5, 7, 4, 5, 6, 2, 2, 2, 3, 2, 4, 6, 4, 2, 3,\n",
       "       7, 4, 2, 5, 6, 1, 2, 6, 6, 6, 4, 7, 4, 3, 5, 7, 6, 6, 5, 6, 6, 7,\n",
       "       1, 6, 7, 1, 6, 4, 1, 4, 6, 4, 4, 1, 6, 1, 5, 5, 7, 6, 2, 3, 7, 1,\n",
       "       7, 1, 7, 6, 2, 7, 2, 4, 2, 3, 6, 6, 1, 3, 2, 4, 5, 7, 7, 6, 4, 1,\n",
       "       1, 6, 6, 2, 2, 7, 7, 5, 7, 2, 1, 5, 6, 1, 3, 6, 3, 2, 4, 5, 7, 7,\n",
       "       2, 4, 6, 6, 1, 4, 3, 1, 3, 4, 2, 7, 4, 6, 6, 7, 5, 6, 7, 1, 2, 6,\n",
       "       5, 5, 2, 2, 4, 7, 7, 3, 1, 6, 6, 4, 6, 7, 1, 3, 7, 1, 1, 5, 6, 6,\n",
       "       4, 5, 7, 6, 6, 7, 6, 4, 5, 6, 2, 6, 2, 6, 4, 2, 3, 7, 2, 5, 3, 4,\n",
       "       4, 4, 6, 7, 4, 3, 2, 2, 7, 7, 6, 1, 2, 3, 6, 7, 4, 7, 2, 6, 6, 5,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 5, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 7, 2, 3, 4, 7, 2, 2, 2, 5, 6, 2, 6,\n",
       "       2, 5, 2, 4, 6, 6, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 4, 6, 3, 2, 6, 2,\n",
       "       7, 1, 3, 7, 7, 7, 7, 7, 3, 6, 5, 2, 1, 4, 7, 1, 6, 6, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 4, 1, 6, 4, 6, 1, 1, 1, 4, 6, 6, 1, 6, 6, 6, 6, 6, 7,\n",
       "       2, 6, 6, 4, 6, 6, 6, 6, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rsvm_pred_tf2 = rsvm_n.predict(X_test_tf2)\n",
    "rsvm_pred_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy is: 0.7408163265306122\n",
      "SVM(GAUSSIAN) f1 score is : 0.7445808160133142\n",
      "SVM(GAUSSIAN) recall score is : 0.7420163406446986\n",
      "SVM(GAUSSIAN) precison score is : 0.7604537712931209\n",
      "SVM(GAUSSIAN) precison score is : 0.7604537712931209\n",
      "SVM(GAUSSIAN) matthews_corrcoef score is : 0.7003934922986773\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"SVM Accuracy is:\",metrics.accuracy_score(y_test_tf2, rsvm_pred_tf2))\n",
    "print(\"SVM(GAUSSIAN) f1 score is :\",f1_score(y_test_tf2, rsvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) recall score is :\",recall_score(y_test_tf2, rsvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_tf2, rsvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) precison score is :\",precision_score(y_test_tf2, rsvm_pred_tf2, average='macro'))\n",
    "print(\"SVM(GAUSSIAN) matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, rsvm_pred_tf2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random forest classifier using count vectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=None, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=200,\n",
       "                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting random forest classifier using count vectorizer\n",
    "rf_n = RandomForestClassifier(n_estimators=200, random_state=0)\n",
    "rf_n.fit(X_train_cv2, y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_rf_cv2 = cross_val_score(estimator=_rf_n, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_rf_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 1, 1, 7, 3, 3, 5, 4, 1, 3, 3, 5, 6, 5, 2, 1, 1, 1, 4, 7, 6,\n",
       "       2, 5, 6, 5, 3, 4, 7, 4, 2, 6, 7, 4, 2, 3, 4, 7, 3, 5, 3, 6, 3, 6,\n",
       "       3, 3, 6, 6, 1, 5, 2, 3, 3, 7, 6, 3, 1, 1, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 2, 4, 3, 7, 6, 6, 2, 1, 2, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       4, 7, 6, 5, 2, 2, 2, 7, 1, 2, 4, 6, 6, 2, 4, 2, 5, 4, 6, 4, 5, 5,\n",
       "       1, 4, 1, 4, 5, 6, 5, 5, 7, 3, 5, 3, 2, 5, 2, 2, 6, 2, 6, 2, 3, 3,\n",
       "       7, 5, 3, 2, 3, 1, 4, 7, 2, 4, 6, 6, 6, 3, 7, 3, 5, 5, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 5, 6, 5, 6, 7, 5, 5, 3, 7, 3, 1, 5, 6, 2, 6, 6, 3,\n",
       "       4, 6, 3, 2, 4, 5, 7, 3, 1, 4, 3, 7, 4, 1, 5, 7, 4, 7, 1, 6, 3, 2,\n",
       "       6, 4, 1, 1, 3, 1, 2, 2, 3, 4, 7, 3, 7, 3, 7, 3, 6, 4, 6, 1, 5, 4,\n",
       "       5, 7, 7, 3, 3, 7, 2, 6, 2, 1, 4, 7, 5, 7, 5, 3, 3, 1, 3, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 2, 2, 2, 6, 6, 6, 1, 1, 4, 7, 4, 2, 6, 3,\n",
       "       7, 1, 6, 5, 5, 5, 5, 6, 4, 4, 2, 7, 7, 3, 6, 3, 3, 3, 3, 3, 2, 5,\n",
       "       7, 6, 4, 3, 5, 7, 3, 5, 7, 1, 3, 4, 7, 7, 5, 5, 2, 7, 4, 5, 3, 6,\n",
       "       2, 2, 3, 2, 5, 5, 3, 6, 3, 2, 1, 6, 6, 5, 5, 7, 5, 5, 3, 1, 3, 6,\n",
       "       1, 7, 7, 3, 7, 3, 4, 3, 3, 3, 2, 2, 3, 1, 3, 5, 3, 4, 1, 5, 7, 2,\n",
       "       3, 3, 7, 4, 4, 6, 2, 1, 7, 3, 5, 2, 3, 6, 6, 2, 7, 3, 1, 7, 3, 1,\n",
       "       4, 4, 3, 2, 1, 3, 3, 4, 5, 7, 6, 3, 6, 5, 5, 1, 3, 2, 3, 1, 3, 2,\n",
       "       5, 1, 7, 4, 7, 1, 3, 6, 1, 1, 2, 6, 1, 2, 2, 6, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 1, 3, 4, 5, 7, 6, 1, 4, 4, 6, 7, 2, 1, 3, 3, 5, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 1, 1, 2, 1, 4, 4, 1, 6, 4, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 5, 3, 7, 4, 7, 4, 3, 4, 5, 2, 4, 3, 4, 7, 3, 6, 4, 4, 1, 4, 6,\n",
       "       3, 3, 1, 5, 7, 3, 5, 6, 6, 3, 6, 5, 5, 4, 4, 7, 7, 6, 7, 4, 3, 4,\n",
       "       1, 7, 5, 5, 2, 2, 7, 2, 3, 3, 7, 1, 4, 6, 7, 7, 3, 6, 3, 6, 3, 3,\n",
       "       6, 5, 3, 3, 7, 6, 1, 5, 2, 3, 4, 3, 6, 4, 3, 5, 1, 3, 1, 2, 6, 2,\n",
       "       5, 4, 6, 6, 1, 3, 3, 2, 6, 7, 4, 7, 3, 3, 3, 6, 6, 2, 4, 6, 5, 3,\n",
       "       2, 2, 2, 5, 2, 6, 1, 4, 5, 1, 3, 2, 5, 4, 2, 6, 2, 3, 5, 3, 2, 2,\n",
       "       3, 6, 7, 3, 4, 4, 7, 5, 2, 2, 1, 3, 5, 3, 2, 1, 3, 2, 3, 6, 1, 5,\n",
       "       6, 6, 5, 5, 2, 3, 3, 6, 6, 6, 3, 2, 3, 1, 1, 6, 2, 1, 2, 6, 6, 5,\n",
       "       3, 4, 4, 5, 3, 4, 2, 5, 7, 6, 2, 6, 4, 6, 7, 3, 6, 4, 1, 2, 2, 3,\n",
       "       1, 1, 2, 3, 7, 4, 5, 2, 7, 4, 1, 6, 2, 2, 2, 3, 2, 3, 2, 4, 3, 3,\n",
       "       7, 4, 2, 1, 6, 1, 2, 6, 6, 6, 2, 7, 2, 3, 5, 7, 5, 6, 5, 6, 7, 7,\n",
       "       1, 6, 7, 1, 2, 4, 1, 4, 6, 4, 1, 1, 6, 1, 5, 5, 7, 6, 2, 3, 7, 1,\n",
       "       7, 1, 7, 6, 2, 7, 6, 4, 3, 3, 6, 6, 1, 3, 2, 4, 5, 7, 2, 6, 3, 1,\n",
       "       1, 2, 6, 2, 2, 7, 7, 5, 7, 2, 1, 4, 4, 1, 3, 2, 3, 2, 3, 1, 6, 7,\n",
       "       2, 5, 6, 3, 1, 4, 3, 1, 3, 4, 2, 7, 4, 3, 6, 7, 5, 6, 7, 1, 2, 6,\n",
       "       5, 5, 2, 3, 4, 7, 7, 3, 1, 6, 4, 3, 3, 7, 1, 3, 7, 5, 1, 5, 5, 2,\n",
       "       4, 5, 7, 1, 4, 7, 3, 6, 1, 6, 2, 3, 3, 6, 4, 2, 3, 2, 2, 2, 3, 4,\n",
       "       7, 3, 6, 7, 4, 3, 2, 2, 7, 7, 2, 1, 3, 3, 6, 1, 4, 7, 3, 3, 6, 5,\n",
       "       2, 1, 4, 7, 1, 6, 7, 1, 3, 7, 6, 3, 2, 3, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 3, 3, 6, 7, 7, 3, 3, 4, 7, 2, 2, 2, 5, 3, 2, 2,\n",
       "       2, 5, 2, 4, 6, 2, 5, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 5,\n",
       "       1, 1, 3, 7, 7, 7, 7, 6, 3, 6, 2, 2, 1, 4, 7, 1, 6, 3, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 2, 1, 6, 4, 3, 1, 1, 1, 4, 6, 3, 1, 6, 3, 6, 6, 3, 7,\n",
       "       2, 1, 6, 2, 6, 6, 3, 1, 7, 6, 3, 4])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rf_pred_cv2 = rf_n.predict(X_test_cv2)\n",
    "rf_pred_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random forest Accuracy is: 0.6989795918367347\n",
      "random forest f1 score is : 0.6958680560050804\n",
      "random forest recall score is : 0.7005065118584203\n",
      "random forest precison score is : 0.7030309906509595\n",
      "random forest precison score is : 0.7030309906509595\n",
      "random forest matthews_corrcoef score is : 0.6507482088470792\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"random forest Accuracy is:\",metrics.accuracy_score(y_test_cv2, rf_pred_cv2))\n",
    "print(\"random forest f1 score is :\",f1_score(y_test_cv2, rf_pred_cv2, average='macro'))\n",
    "print(\"random forest recall score is :\",recall_score(y_test_cv2, rf_pred_cv2, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_cv2, rf_pred_cv2, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_cv2, rf_pred_cv2, average='macro'))\n",
    "print(\"random forest matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, rf_pred_cv2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random forest classifier using TFIDF vectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=None, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=200,\n",
       "                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting random forest classifier using count vectorizer\n",
    "rf_n = RandomForestClassifier(n_estimators=200, random_state=0)\n",
    "rf_n.fit(X_train_tf2, y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_rf_df2 = cross_val_score(estimator=rf_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_rf_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 7, 3, 3, 1, 4, 1, 3, 3, 3, 6, 1, 2, 1, 1, 1, 4, 6, 2,\n",
       "       2, 3, 6, 5, 3, 4, 7, 4, 2, 3, 7, 4, 2, 3, 4, 7, 3, 5, 3, 6, 3, 6,\n",
       "       3, 6, 6, 6, 1, 1, 4, 3, 3, 6, 6, 3, 1, 1, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 6, 5, 3, 7, 6, 6, 2, 1, 3, 1, 3, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       4, 7, 6, 5, 2, 2, 2, 7, 1, 2, 4, 6, 6, 2, 4, 3, 3, 4, 6, 6, 1, 5,\n",
       "       1, 4, 1, 6, 6, 2, 5, 1, 7, 3, 1, 3, 2, 3, 2, 2, 6, 2, 5, 3, 3, 3,\n",
       "       7, 3, 3, 2, 3, 1, 2, 7, 3, 4, 6, 6, 1, 3, 7, 3, 1, 5, 7, 2, 6, 6,\n",
       "       3, 2, 1, 7, 1, 5, 6, 1, 6, 7, 3, 5, 3, 7, 3, 1, 1, 6, 3, 2, 6, 3,\n",
       "       2, 3, 3, 2, 4, 3, 6, 3, 1, 4, 3, 7, 4, 1, 5, 7, 4, 7, 1, 6, 3, 2,\n",
       "       6, 3, 1, 1, 3, 1, 2, 2, 3, 4, 7, 3, 7, 3, 7, 6, 6, 4, 6, 1, 3, 3,\n",
       "       2, 7, 6, 3, 3, 6, 3, 6, 2, 1, 6, 7, 2, 7, 1, 3, 3, 1, 3, 6, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 2, 3, 2, 6, 6, 6, 1, 1, 4, 6, 4, 2, 6, 3,\n",
       "       7, 1, 6, 1, 3, 1, 3, 6, 4, 4, 3, 7, 7, 6, 6, 3, 3, 3, 3, 3, 2, 1,\n",
       "       7, 6, 4, 6, 5, 7, 3, 3, 7, 1, 3, 4, 3, 7, 3, 5, 2, 2, 4, 5, 3, 6,\n",
       "       2, 3, 3, 2, 1, 5, 3, 6, 6, 3, 1, 6, 6, 1, 1, 7, 5, 5, 3, 1, 3, 2,\n",
       "       1, 7, 6, 3, 6, 3, 6, 3, 3, 6, 2, 2, 3, 1, 6, 5, 3, 4, 1, 5, 7, 2,\n",
       "       3, 3, 7, 4, 4, 6, 2, 1, 6, 6, 3, 2, 6, 6, 2, 3, 7, 3, 1, 7, 3, 1,\n",
       "       4, 4, 3, 2, 6, 3, 3, 4, 3, 3, 6, 3, 6, 3, 1, 1, 3, 2, 3, 1, 3, 6,\n",
       "       5, 1, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 1, 2, 2, 6, 6, 1, 1, 4, 3, 7,\n",
       "       1, 4, 1, 3, 4, 3, 7, 6, 1, 4, 6, 6, 6, 2, 6, 3, 3, 3, 3, 4, 3, 7,\n",
       "       3, 7, 1, 3, 6, 1, 1, 2, 1, 6, 4, 1, 6, 3, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 6, 3, 7, 3, 7, 4, 3, 6, 5, 2, 4, 6, 4, 6, 3, 6, 4, 4, 1, 4, 6,\n",
       "       3, 3, 1, 1, 7, 3, 1, 6, 6, 3, 6, 4, 5, 3, 4, 7, 7, 6, 7, 4, 3, 4,\n",
       "       1, 7, 3, 1, 3, 2, 7, 2, 3, 3, 7, 1, 6, 6, 6, 7, 3, 6, 3, 6, 3, 3,\n",
       "       6, 3, 3, 3, 7, 6, 1, 1, 2, 3, 4, 3, 6, 6, 3, 5, 1, 2, 1, 3, 6, 3,\n",
       "       5, 4, 6, 6, 1, 3, 3, 2, 6, 7, 4, 7, 3, 3, 3, 6, 6, 2, 4, 6, 1, 3,\n",
       "       2, 2, 2, 5, 2, 6, 1, 4, 3, 1, 3, 2, 5, 4, 2, 6, 2, 3, 1, 6, 2, 2,\n",
       "       3, 2, 7, 3, 4, 4, 6, 1, 2, 2, 1, 3, 3, 3, 2, 1, 3, 2, 3, 6, 1, 3,\n",
       "       6, 6, 1, 1, 2, 3, 3, 6, 6, 6, 3, 2, 3, 1, 1, 6, 3, 1, 3, 6, 6, 1,\n",
       "       3, 3, 4, 3, 3, 4, 2, 5, 7, 3, 3, 2, 4, 6, 7, 3, 6, 3, 1, 2, 2, 3,\n",
       "       6, 1, 3, 3, 7, 4, 1, 2, 7, 4, 1, 6, 3, 2, 3, 3, 2, 3, 2, 4, 3, 3,\n",
       "       7, 4, 3, 3, 6, 1, 2, 6, 6, 2, 2, 7, 2, 3, 1, 7, 5, 6, 1, 6, 7, 7,\n",
       "       1, 6, 7, 1, 2, 4, 1, 4, 6, 4, 1, 1, 6, 1, 1, 3, 7, 6, 2, 3, 7, 5,\n",
       "       7, 1, 6, 6, 2, 7, 6, 4, 6, 3, 6, 6, 1, 3, 3, 4, 1, 7, 3, 6, 3, 1,\n",
       "       1, 2, 6, 2, 2, 7, 7, 1, 7, 3, 1, 6, 4, 1, 3, 2, 3, 3, 3, 1, 6, 7,\n",
       "       2, 3, 4, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 6, 6, 1, 6, 7, 1, 3, 6,\n",
       "       1, 5, 3, 3, 4, 7, 6, 3, 1, 6, 3, 6, 6, 7, 1, 3, 7, 1, 1, 3, 5, 2,\n",
       "       4, 1, 7, 1, 4, 7, 6, 4, 1, 6, 2, 3, 3, 6, 4, 2, 3, 2, 2, 2, 3, 4,\n",
       "       7, 3, 6, 7, 4, 3, 2, 3, 7, 7, 2, 1, 3, 3, 6, 1, 4, 7, 3, 3, 6, 5,\n",
       "       2, 1, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 3, 3, 6, 1, 6, 3, 7, 4, 3,\n",
       "       2, 3, 1, 2, 2, 4, 6, 3, 6, 7, 6, 3, 3, 4, 7, 3, 2, 3, 1, 3, 3, 2,\n",
       "       2, 1, 3, 4, 6, 2, 2, 2, 6, 1, 1, 2, 3, 3, 6, 3, 5, 6, 3, 2, 6, 5,\n",
       "       1, 1, 3, 7, 7, 7, 7, 6, 3, 6, 2, 2, 1, 3, 7, 1, 6, 6, 6, 4, 2, 7,\n",
       "       1, 7, 6, 3, 6, 1, 6, 3, 6, 1, 1, 1, 4, 6, 3, 1, 2, 6, 6, 6, 6, 7,\n",
       "       6, 6, 7, 2, 6, 6, 3, 3, 7, 6, 3, 4])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "rf_pred_tf2 = rf_n.predict(X_test_cv2)\n",
    "rf_pred_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random forest Accuracy is: 0.6122448979591837\n",
      "random forest f1 score is : 0.5942109823467926\n",
      "random forest recall score is : 0.612229324798556\n",
      "random forest precison score is : 0.6461609688454512\n",
      "random forest precison score is : 0.6461609688454512\n",
      "random forest matthews_corrcoef score is : 0.5570815362776147\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"random forest Accuracy is:\",metrics.accuracy_score(y_test_tf2, rf_pred_tf2))\n",
    "print(\"random forest f1 score is :\",f1_score(y_test_tf2, rf_pred_tf2, average='macro'))\n",
    "print(\"random forest recall score is :\",recall_score(y_test_tf2, rf_pred_tf2, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_tf2, rf_pred_tf2, average='macro'))\n",
    "print(\"random forest precison score is :\",precision_score(y_test_tf2, rf_pred_tf2, average='macro'))\n",
    "print(\"random forest matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, rf_pred_tf2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DECESSION TREE CLASSIFIER USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting decession tree using count vectorizer \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt_n = DecisionTreeClassifier()\n",
    "dt_n.fit(X_train_cv2,y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_dt_cv2 = cross_val_score(estimator=dt_n, X=X_train_cv2, y=y_train_cv2, cv=10)\n",
    "cross_dt_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 5, 3, 3, 5, 4, 1, 3, 3, 5, 6, 1, 2, 1, 1, 1, 4, 7, 2,\n",
       "       2, 5, 6, 1, 3, 6, 7, 4, 2, 6, 6, 4, 2, 3, 3, 7, 3, 6, 4, 7, 3, 6,\n",
       "       3, 6, 6, 1, 1, 1, 4, 3, 3, 3, 6, 3, 1, 1, 7, 1, 1, 3, 6, 4, 4, 1,\n",
       "       3, 1, 4, 2, 5, 3, 7, 6, 7, 2, 1, 5, 1, 4, 3, 4, 1, 7, 3, 6, 1, 1,\n",
       "       4, 7, 3, 5, 2, 2, 2, 7, 1, 2, 4, 6, 6, 2, 4, 2, 5, 4, 7, 4, 1, 1,\n",
       "       1, 4, 1, 4, 5, 6, 1, 5, 7, 3, 5, 3, 2, 5, 2, 6, 6, 2, 5, 2, 3, 3,\n",
       "       7, 5, 3, 2, 2, 1, 5, 7, 2, 4, 6, 4, 1, 3, 7, 3, 1, 5, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 5, 6, 1, 6, 7, 5, 5, 3, 7, 3, 1, 5, 6, 2, 6, 5, 2,\n",
       "       4, 6, 3, 2, 4, 5, 7, 3, 1, 4, 3, 6, 4, 1, 5, 7, 4, 7, 1, 5, 3, 2,\n",
       "       6, 4, 5, 1, 3, 1, 2, 2, 3, 4, 7, 3, 4, 3, 7, 6, 6, 4, 4, 1, 5, 2,\n",
       "       5, 7, 6, 3, 3, 7, 4, 6, 2, 1, 4, 7, 5, 7, 4, 3, 3, 6, 3, 7, 6, 7,\n",
       "       5, 6, 1, 3, 1, 5, 4, 2, 2, 2, 2, 6, 6, 6, 5, 5, 4, 7, 4, 2, 5, 3,\n",
       "       7, 1, 4, 5, 5, 1, 5, 6, 4, 4, 2, 7, 7, 6, 5, 3, 3, 3, 3, 3, 2, 5,\n",
       "       7, 6, 4, 6, 5, 6, 3, 1, 7, 5, 3, 2, 7, 7, 5, 5, 2, 2, 5, 1, 3, 6,\n",
       "       2, 2, 3, 2, 5, 1, 3, 4, 6, 2, 5, 6, 6, 5, 1, 7, 5, 5, 3, 1, 3, 6,\n",
       "       1, 7, 6, 3, 6, 3, 6, 3, 3, 6, 6, 2, 3, 1, 6, 5, 3, 4, 5, 5, 7, 2,\n",
       "       3, 3, 7, 4, 4, 6, 2, 1, 7, 6, 1, 2, 6, 4, 6, 2, 7, 3, 1, 2, 3, 1,\n",
       "       4, 4, 3, 7, 1, 3, 3, 4, 5, 5, 6, 3, 4, 5, 5, 1, 3, 2, 3, 5, 3, 2,\n",
       "       5, 5, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 5, 2, 2, 7, 7, 5, 1, 4, 3, 7,\n",
       "       1, 4, 1, 3, 4, 5, 7, 6, 1, 4, 4, 6, 7, 4, 1, 3, 3, 1, 3, 4, 3, 7,\n",
       "       5, 7, 4, 3, 6, 1, 1, 2, 1, 3, 4, 1, 6, 3, 3, 5, 5, 6, 2, 2, 7, 1,\n",
       "       3, 1, 4, 2, 4, 7, 4, 3, 6, 5, 2, 4, 6, 4, 7, 3, 7, 4, 6, 1, 4, 6,\n",
       "       3, 3, 1, 5, 7, 3, 5, 6, 6, 4, 6, 5, 5, 4, 4, 7, 7, 6, 7, 4, 3, 4,\n",
       "       1, 7, 5, 1, 2, 2, 7, 2, 3, 3, 7, 1, 7, 6, 2, 7, 3, 6, 3, 3, 3, 3,\n",
       "       6, 5, 3, 3, 7, 7, 1, 5, 2, 3, 4, 3, 6, 4, 3, 5, 1, 6, 1, 2, 3, 5,\n",
       "       5, 4, 6, 6, 1, 3, 3, 2, 6, 7, 4, 7, 3, 3, 3, 6, 2, 2, 4, 6, 5, 3,\n",
       "       2, 2, 2, 5, 2, 7, 1, 4, 5, 1, 3, 2, 1, 4, 2, 2, 2, 3, 4, 6, 2, 2,\n",
       "       3, 6, 7, 3, 4, 4, 6, 5, 2, 2, 1, 3, 1, 3, 2, 4, 3, 2, 3, 3, 1, 2,\n",
       "       7, 6, 5, 5, 2, 3, 3, 7, 6, 4, 3, 2, 3, 1, 1, 4, 3, 5, 2, 7, 6, 5,\n",
       "       3, 4, 4, 5, 3, 4, 2, 5, 7, 3, 2, 6, 4, 6, 7, 3, 6, 4, 1, 2, 6, 3,\n",
       "       1, 5, 2, 3, 6, 4, 5, 2, 7, 4, 1, 4, 2, 2, 2, 3, 5, 3, 2, 4, 3, 3,\n",
       "       7, 4, 2, 1, 7, 1, 2, 6, 6, 6, 6, 7, 2, 3, 5, 7, 4, 1, 1, 6, 7, 7,\n",
       "       1, 4, 7, 1, 2, 4, 1, 4, 6, 4, 6, 1, 7, 1, 1, 5, 7, 5, 5, 3, 7, 1,\n",
       "       7, 1, 6, 6, 2, 7, 2, 4, 6, 3, 6, 7, 1, 3, 2, 4, 4, 7, 2, 6, 4, 1,\n",
       "       1, 2, 6, 2, 2, 6, 2, 5, 7, 2, 1, 4, 6, 5, 3, 2, 3, 2, 3, 1, 7, 7,\n",
       "       2, 5, 4, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 6, 7, 5, 3, 7, 1, 2, 6,\n",
       "       1, 5, 2, 3, 4, 7, 6, 3, 1, 6, 4, 4, 6, 7, 1, 3, 7, 5, 1, 5, 1, 2,\n",
       "       4, 5, 7, 1, 6, 7, 6, 6, 1, 6, 2, 3, 6, 6, 4, 2, 3, 2, 2, 2, 3, 4,\n",
       "       7, 3, 6, 7, 4, 3, 2, 2, 7, 7, 2, 1, 3, 3, 4, 5, 4, 7, 3, 4, 7, 5,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 7, 3, 2, 3, 3, 7, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 5, 3, 3, 4, 5, 2, 2, 2, 5, 3, 2, 2,\n",
       "       2, 5, 2, 4, 6, 2, 5, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 5,\n",
       "       6, 1, 3, 6, 7, 7, 7, 6, 3, 6, 2, 2, 1, 4, 7, 1, 6, 6, 7, 4, 2, 7,\n",
       "       1, 7, 4, 3, 2, 1, 6, 4, 6, 1, 1, 1, 4, 6, 3, 1, 6, 6, 6, 7, 6, 7,\n",
       "       2, 6, 3, 2, 6, 6, 3, 4, 7, 6, 3, 4])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "dt_pred_cv2 = dt_n.predict(X_test_cv2)\n",
    "dt_pred_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "decison tree Accuracy is: 0.673469387755102\n",
      "decison tree f1 score is : 0.67023866344529\n",
      "decison tree recall score is : 0.6747894484346284\n",
      "decison tree precison score is : 0.6717283515891455\n",
      "decison tree precison score is : 0.6717283515891455\n",
      "decison tree matthews_corrcoef score is : 0.6199743803072449\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"decison tree Accuracy is:\",metrics.accuracy_score(y_test_cv2, dt_pred_cv2))\n",
    "print(\"decison tree f1 score is :\",f1_score(y_test_cv2, dt_pred_cv2, average='macro'))\n",
    "print(\"decison tree recall score is :\",recall_score(y_test_cv2, dt_pred_cv2, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_cv2, dt_pred_cv2, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_cv2, dt_pred_cv2, average='macro'))\n",
    "print(\"decison tree matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, dt_pred_cv2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DECESSION TREE CLASSIFIER USING TFIDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting decession tree using tfidf vectorizer \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt_n = DecisionTreeClassifier()\n",
    "dt_n.fit(X_train_tf2,y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_dt_cv2 = cross_val_score(estimator=dt_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_st_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 6, 1, 1, 7, 3, 3, 1, 4, 1, 3, 2, 5, 6, 5, 2, 1, 5, 1, 4, 6, 4,\n",
       "       4, 5, 6, 5, 3, 4, 7, 4, 4, 6, 7, 4, 2, 3, 4, 7, 3, 1, 2, 6, 3, 6,\n",
       "       6, 6, 2, 1, 1, 5, 4, 3, 3, 6, 4, 3, 1, 5, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       6, 1, 4, 2, 2, 2, 7, 6, 7, 4, 1, 2, 1, 3, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 5, 2, 4, 2, 7, 1, 2, 4, 6, 3, 2, 4, 2, 5, 4, 7, 4, 1, 1,\n",
       "       1, 5, 5, 4, 6, 6, 1, 5, 7, 3, 5, 3, 2, 4, 2, 2, 6, 2, 5, 2, 3, 3,\n",
       "       7, 4, 3, 2, 4, 1, 4, 7, 2, 4, 6, 6, 6, 2, 7, 3, 5, 5, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 1, 6, 5, 6, 7, 5, 5, 2, 7, 3, 1, 5, 6, 2, 6, 4, 7,\n",
       "       6, 6, 3, 2, 5, 2, 7, 3, 1, 6, 2, 6, 4, 1, 5, 7, 4, 7, 5, 4, 3, 2,\n",
       "       6, 2, 1, 1, 3, 5, 2, 2, 3, 4, 7, 3, 7, 3, 7, 6, 6, 4, 4, 1, 1, 6,\n",
       "       5, 7, 6, 3, 2, 6, 2, 6, 2, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 1, 3, 1, 5, 4, 2, 2, 2, 2, 6, 2, 1, 1, 1, 5, 7, 4, 4, 4, 3,\n",
       "       7, 5, 4, 5, 5, 1, 5, 5, 5, 4, 2, 7, 7, 6, 4, 3, 3, 3, 3, 3, 6, 1,\n",
       "       7, 6, 4, 6, 5, 6, 3, 1, 7, 1, 2, 4, 4, 7, 1, 5, 2, 7, 4, 1, 3, 6,\n",
       "       2, 3, 2, 2, 5, 5, 3, 1, 6, 2, 1, 4, 6, 1, 1, 7, 5, 1, 3, 1, 3, 6,\n",
       "       1, 7, 6, 3, 4, 2, 4, 3, 3, 6, 2, 2, 3, 1, 6, 5, 3, 4, 5, 5, 7, 4,\n",
       "       3, 4, 7, 4, 4, 6, 2, 1, 7, 6, 5, 2, 6, 4, 6, 1, 7, 2, 1, 4, 3, 1,\n",
       "       4, 4, 3, 2, 1, 3, 3, 4, 5, 6, 2, 3, 4, 4, 1, 1, 3, 2, 4, 5, 3, 6,\n",
       "       1, 1, 7, 4, 7, 5, 6, 6, 1, 1, 2, 6, 5, 2, 4, 7, 6, 5, 1, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 5, 6, 6, 1, 4, 4, 6, 7, 4, 1, 3, 3, 1, 3, 4, 3, 7,\n",
       "       5, 7, 4, 3, 6, 1, 1, 3, 1, 3, 4, 1, 6, 4, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 5, 3, 6, 4, 6, 4, 3, 5, 5, 2, 1, 6, 4, 6, 3, 7, 4, 5, 1, 6, 6,\n",
       "       2, 3, 1, 5, 7, 3, 1, 6, 6, 4, 6, 5, 5, 4, 4, 7, 7, 6, 7, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 6, 3, 3, 7, 1, 1, 7, 7, 7, 3, 6, 3, 4, 3, 4,\n",
       "       6, 2, 2, 3, 7, 7, 1, 5, 2, 3, 4, 3, 6, 6, 3, 5, 5, 2, 1, 2, 4, 1,\n",
       "       5, 4, 6, 1, 1, 3, 3, 2, 6, 7, 4, 7, 2, 3, 3, 6, 6, 2, 4, 6, 5, 3,\n",
       "       2, 6, 2, 1, 2, 7, 1, 4, 5, 1, 3, 2, 5, 4, 2, 4, 2, 3, 1, 6, 2, 2,\n",
       "       3, 6, 7, 3, 5, 6, 6, 5, 3, 2, 1, 3, 1, 3, 2, 4, 3, 6, 3, 7, 5, 2,\n",
       "       7, 4, 1, 5, 2, 3, 6, 6, 6, 2, 3, 1, 3, 5, 1, 2, 3, 5, 2, 6, 2, 5,\n",
       "       3, 3, 4, 5, 3, 4, 2, 5, 6, 3, 2, 6, 6, 6, 7, 6, 2, 2, 5, 5, 6, 3,\n",
       "       1, 5, 5, 3, 7, 4, 5, 5, 7, 5, 5, 4, 2, 2, 2, 3, 5, 2, 6, 4, 2, 3,\n",
       "       7, 4, 3, 1, 7, 1, 6, 6, 6, 7, 6, 7, 4, 3, 5, 7, 6, 1, 5, 6, 7, 7,\n",
       "       1, 4, 7, 1, 2, 4, 1, 4, 6, 4, 6, 1, 6, 1, 5, 5, 7, 3, 2, 3, 7, 5,\n",
       "       7, 1, 6, 6, 2, 7, 6, 4, 6, 3, 6, 6, 1, 3, 2, 4, 4, 7, 4, 4, 3, 1,\n",
       "       5, 7, 6, 2, 2, 6, 7, 5, 6, 2, 1, 5, 6, 6, 3, 6, 2, 2, 2, 1, 7, 7,\n",
       "       2, 5, 4, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 7, 7, 5, 6, 7, 1, 2, 6,\n",
       "       5, 5, 2, 3, 4, 7, 6, 3, 1, 6, 4, 2, 6, 7, 1, 3, 7, 1, 1, 5, 5, 6,\n",
       "       4, 5, 7, 1, 6, 7, 6, 6, 5, 6, 2, 2, 4, 7, 4, 2, 3, 2, 2, 4, 3, 6,\n",
       "       7, 5, 6, 7, 4, 3, 2, 2, 7, 7, 4, 1, 4, 3, 4, 1, 4, 7, 3, 6, 7, 5,\n",
       "       2, 5, 6, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 5, 4, 7, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 5, 3, 3, 4, 7, 2, 2, 2, 5, 6, 2, 7,\n",
       "       2, 5, 5, 4, 6, 1, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 5,\n",
       "       5, 5, 3, 4, 7, 7, 7, 6, 3, 6, 2, 2, 1, 2, 7, 1, 6, 6, 7, 4, 2, 7,\n",
       "       1, 7, 5, 3, 2, 1, 6, 3, 6, 1, 1, 1, 4, 6, 6, 1, 6, 6, 4, 7, 6, 7,\n",
       "       2, 7, 7, 2, 6, 6, 3, 1, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "dt_pred_tf2 = dt_n.predict(X_test_tf2)\n",
    "dt_pred_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "decison tree Accuracy is: 0.6663265306122449\n",
      "decison tree f1 score is : 0.6671628641684618\n",
      "decison tree recall score is : 0.6674119260489599\n",
      "decison tree precison score is : 0.6696961263232828\n",
      "decison tree precison score is : 0.6696961263232828\n",
      "decison tree matthews_corrcoef score is : 0.6111665287077429\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"decison tree Accuracy is:\",metrics.accuracy_score(y_test_tf2, dt_pred_tf2))\n",
    "print(\"decison tree f1 score is :\",f1_score(y_test_tf2, dt_pred_tf2, average='macro'))\n",
    "print(\"decison tree recall score is :\",recall_score(y_test_tf2, dt_pred_tf2, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_tf2, dt_pred_tf2, average='macro'))\n",
    "print(\"decison tree precison score is :\",precision_score(y_test_tf2, dt_pred_tf2, average='macro'))\n",
    "print(\"decison tree matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, dt_pred_tf2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LOGESTIC REGRESSION USING COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr_n = LogisticRegression(random_state=0,solver='lbfgs')\n",
    "lr_n.fit(X_train_cv2,y_train_cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_lr_cv2 = cross_val_score(estimator=lr_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_lr_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 7, 3, 3, 4, 4, 1, 3, 3, 5, 6, 5, 2, 1, 5, 1, 4, 7, 2,\n",
       "       6, 5, 6, 5, 3, 4, 7, 4, 2, 6, 7, 4, 2, 3, 4, 7, 3, 5, 4, 6, 3, 6,\n",
       "       3, 6, 6, 1, 1, 5, 4, 3, 3, 6, 6, 3, 1, 5, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 6, 5, 3, 7, 2, 6, 2, 1, 5, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 5, 2, 4, 2, 7, 1, 5, 4, 6, 6, 2, 4, 2, 5, 4, 7, 4, 5, 1,\n",
       "       1, 4, 1, 4, 5, 6, 5, 5, 6, 3, 5, 3, 2, 4, 2, 2, 7, 2, 5, 2, 3, 6,\n",
       "       7, 4, 3, 2, 2, 1, 4, 7, 2, 4, 6, 4, 1, 2, 7, 3, 5, 4, 7, 6, 6, 7,\n",
       "       2, 2, 1, 7, 1, 1, 6, 5, 6, 7, 2, 5, 4, 7, 2, 1, 1, 6, 2, 6, 4, 3,\n",
       "       2, 4, 3, 2, 2, 2, 7, 3, 1, 4, 4, 7, 4, 1, 5, 7, 4, 7, 5, 6, 3, 2,\n",
       "       6, 4, 5, 1, 3, 1, 2, 2, 3, 4, 7, 4, 7, 3, 7, 6, 6, 4, 4, 1, 5, 4,\n",
       "       5, 7, 7, 3, 3, 6, 2, 6, 6, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 2, 2, 2, 6, 6, 6, 1, 1, 4, 6, 4, 2, 4, 3,\n",
       "       7, 5, 4, 5, 2, 1, 5, 7, 4, 4, 2, 7, 7, 6, 4, 3, 3, 3, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 5, 7, 3, 1, 7, 1, 3, 6, 7, 6, 5, 5, 2, 2, 4, 5, 3, 6,\n",
       "       2, 2, 2, 2, 5, 6, 3, 4, 6, 2, 1, 6, 6, 1, 5, 7, 5, 1, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 7, 3, 4, 3, 3, 6, 6, 2, 3, 1, 6, 5, 3, 4, 1, 5, 7, 2,\n",
       "       3, 4, 7, 4, 4, 6, 5, 5, 7, 6, 5, 2, 6, 6, 6, 2, 7, 3, 1, 7, 3, 1,\n",
       "       4, 4, 3, 6, 1, 3, 3, 4, 5, 5, 6, 3, 6, 5, 5, 1, 3, 2, 3, 5, 3, 6,\n",
       "       5, 5, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 5, 2, 4, 6, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 2, 7, 6, 1, 4, 4, 6, 7, 5, 1, 3, 3, 5, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 1, 1, 2, 1, 3, 4, 1, 4, 4, 3, 5, 2, 6, 2, 2, 7, 1,\n",
       "       3, 1, 3, 7, 4, 7, 4, 3, 4, 5, 2, 4, 6, 4, 7, 3, 7, 4, 4, 1, 4, 6,\n",
       "       3, 3, 1, 5, 7, 3, 1, 4, 6, 4, 6, 5, 5, 4, 4, 7, 7, 7, 7, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 1, 3, 3, 7, 1, 5, 6, 7, 7, 3, 6, 3, 6, 3, 3,\n",
       "       6, 5, 3, 3, 2, 7, 1, 5, 2, 3, 4, 3, 6, 6, 3, 5, 1, 3, 1, 2, 4, 2,\n",
       "       5, 4, 6, 4, 1, 3, 3, 2, 6, 7, 4, 7, 3, 3, 3, 6, 6, 2, 6, 6, 5, 3,\n",
       "       2, 4, 2, 1, 2, 6, 1, 4, 5, 1, 3, 2, 5, 4, 2, 4, 2, 3, 5, 6, 2, 2,\n",
       "       3, 2, 7, 3, 4, 4, 7, 5, 2, 2, 1, 3, 5, 3, 2, 1, 3, 2, 3, 5, 5, 5,\n",
       "       6, 6, 1, 5, 2, 3, 3, 6, 6, 6, 3, 6, 3, 1, 1, 6, 3, 1, 2, 6, 6, 5,\n",
       "       3, 4, 4, 3, 3, 4, 6, 5, 7, 6, 2, 6, 4, 6, 7, 6, 6, 3, 1, 2, 2, 3,\n",
       "       1, 5, 2, 3, 7, 4, 5, 5, 7, 4, 1, 6, 2, 2, 2, 3, 2, 3, 2, 4, 3, 3,\n",
       "       7, 4, 2, 5, 7, 1, 2, 6, 7, 6, 4, 7, 4, 3, 5, 7, 6, 6, 5, 6, 7, 7,\n",
       "       1, 6, 7, 1, 6, 4, 1, 4, 6, 4, 4, 1, 6, 1, 5, 5, 7, 6, 5, 3, 7, 1,\n",
       "       7, 1, 6, 2, 2, 7, 2, 4, 6, 3, 6, 6, 1, 3, 2, 4, 5, 7, 7, 6, 6, 1,\n",
       "       1, 6, 6, 2, 2, 7, 7, 1, 7, 2, 1, 5, 6, 1, 3, 6, 3, 2, 3, 1, 7, 7,\n",
       "       2, 4, 4, 6, 1, 4, 3, 1, 3, 4, 2, 6, 4, 6, 6, 7, 5, 2, 7, 1, 3, 6,\n",
       "       5, 5, 2, 3, 4, 7, 6, 3, 1, 6, 4, 4, 6, 7, 1, 3, 7, 1, 1, 5, 5, 2,\n",
       "       4, 5, 7, 1, 6, 7, 6, 2, 5, 6, 2, 3, 2, 6, 4, 2, 3, 7, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 4, 4, 2, 2, 7, 7, 2, 1, 3, 3, 6, 7, 4, 7, 3, 6, 7, 5,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 3, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 5, 3, 3, 4, 7, 2, 2, 3, 5, 3, 2, 2,\n",
       "       5, 5, 2, 4, 7, 2, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 5,\n",
       "       1, 5, 3, 7, 7, 7, 7, 7, 3, 6, 5, 2, 1, 3, 7, 1, 6, 6, 6, 4, 2, 7,\n",
       "       1, 7, 6, 3, 4, 1, 6, 4, 6, 1, 1, 1, 4, 6, 6, 1, 2, 6, 4, 6, 6, 7,\n",
       "       4, 6, 7, 4, 6, 7, 3, 1, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "lr_pred_cv2 = lr_n.predict(X_test_cv2)\n",
    "lr_pred_cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logistic regression Accuracy is: 0.7673469387755102\n",
      "logistic regreesion score is : 0.7681950034201481\n",
      "logistic regreesion score is : 0.7684522812741478\n",
      "logistic regreesion score is : 0.7726398997345302\n",
      "logistic regreesion score is : 0.7726398997345302\n",
      "logistic regreesion matthews_corrcoef score is : 0.7293009854701492\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"logistic regression Accuracy is:\",metrics.accuracy_score(y_test_cv2, lr_pred_cv2))\n",
    "print(\"logistic regreesion score is :\",f1_score(y_test_cv2, lr_pred_cv2, average='macro'))\n",
    "print(\"logistic regreesion score is :\",recall_score(y_test_cv2, lr_pred_cv2, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_cv2, lr_pred_cv2, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_cv2, lr_pred_cv2, average='macro'))\n",
    "print(\"logistic regreesion matthews_corrcoef score is :\",matthews_corrcoef(y_test_cv2, lr_pred_cv2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LOGISTIC VECTORIZER USING TFIDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the model\n",
    "lr_n.fit(X_train_tf2,y_train_tf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cross validation on training set\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_lr_tf2 = cross_val_score(estimator=lr_n, X=X_train_tf2, y=y_train_tf2, cv=10)\n",
    "cross_lr_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 6, 1, 1, 7, 3, 4, 4, 4, 4, 3, 3, 5, 6, 5, 6, 1, 5, 1, 4, 7, 5,\n",
       "       4, 5, 6, 5, 3, 4, 7, 4, 6, 6, 7, 4, 2, 3, 4, 7, 3, 5, 4, 6, 3, 6,\n",
       "       2, 6, 6, 6, 1, 5, 6, 3, 3, 6, 6, 3, 1, 5, 7, 1, 1, 3, 6, 4, 4, 5,\n",
       "       3, 1, 4, 6, 5, 3, 7, 6, 6, 2, 1, 5, 1, 4, 3, 2, 1, 7, 3, 7, 1, 1,\n",
       "       5, 7, 4, 5, 2, 4, 2, 7, 1, 2, 4, 6, 6, 2, 4, 2, 5, 4, 6, 4, 5, 4,\n",
       "       5, 4, 1, 4, 6, 6, 5, 5, 7, 3, 5, 3, 2, 4, 6, 2, 7, 2, 5, 2, 3, 6,\n",
       "       7, 4, 3, 2, 2, 5, 4, 7, 2, 4, 7, 4, 1, 2, 7, 3, 5, 4, 7, 2, 6, 7,\n",
       "       2, 2, 1, 7, 1, 6, 6, 5, 6, 7, 2, 5, 4, 7, 2, 1, 1, 6, 2, 6, 4, 3,\n",
       "       4, 6, 3, 2, 2, 2, 7, 3, 1, 4, 4, 7, 4, 1, 5, 7, 4, 7, 5, 6, 3, 5,\n",
       "       6, 4, 1, 1, 3, 1, 2, 2, 3, 4, 7, 4, 7, 3, 7, 6, 6, 4, 4, 1, 5, 4,\n",
       "       2, 7, 7, 3, 3, 6, 2, 6, 7, 1, 4, 7, 5, 7, 5, 3, 3, 6, 2, 7, 6, 7,\n",
       "       5, 6, 6, 3, 1, 1, 4, 2, 2, 2, 2, 6, 6, 6, 1, 1, 4, 6, 4, 2, 4, 3,\n",
       "       7, 5, 4, 5, 2, 1, 5, 6, 4, 4, 2, 7, 7, 6, 6, 3, 3, 6, 3, 3, 6, 5,\n",
       "       7, 6, 4, 6, 5, 7, 3, 1, 7, 1, 3, 6, 7, 7, 5, 5, 2, 6, 4, 5, 3, 6,\n",
       "       2, 2, 2, 2, 5, 6, 3, 4, 6, 2, 5, 6, 6, 1, 5, 7, 1, 1, 3, 1, 3, 2,\n",
       "       1, 7, 7, 3, 6, 4, 4, 3, 3, 6, 2, 2, 3, 1, 6, 5, 3, 4, 1, 5, 7, 6,\n",
       "       3, 6, 7, 4, 4, 6, 5, 1, 7, 6, 5, 2, 6, 6, 6, 2, 7, 4, 1, 7, 3, 1,\n",
       "       4, 4, 3, 7, 1, 3, 3, 4, 5, 6, 6, 3, 6, 4, 5, 1, 3, 2, 3, 5, 3, 6,\n",
       "       1, 1, 7, 4, 7, 1, 6, 6, 1, 1, 2, 6, 1, 2, 4, 6, 6, 5, 5, 4, 3, 7,\n",
       "       1, 4, 5, 3, 4, 2, 7, 6, 1, 4, 3, 6, 7, 2, 1, 3, 3, 5, 3, 4, 3, 7,\n",
       "       5, 7, 1, 3, 6, 1, 1, 3, 1, 3, 4, 1, 4, 4, 3, 5, 5, 7, 2, 2, 7, 1,\n",
       "       3, 1, 3, 7, 4, 7, 4, 3, 4, 2, 2, 4, 6, 4, 6, 3, 7, 4, 4, 1, 4, 6,\n",
       "       4, 3, 1, 5, 7, 3, 1, 6, 6, 4, 6, 5, 5, 4, 4, 7, 7, 7, 7, 4, 3, 5,\n",
       "       1, 7, 5, 5, 2, 2, 7, 1, 3, 3, 7, 1, 5, 6, 7, 7, 3, 6, 3, 6, 3, 3,\n",
       "       6, 3, 3, 3, 7, 6, 1, 5, 5, 3, 4, 3, 6, 6, 3, 5, 1, 6, 1, 2, 6, 2,\n",
       "       5, 4, 6, 5, 1, 3, 3, 2, 6, 7, 4, 7, 3, 3, 3, 6, 6, 2, 6, 6, 5, 3,\n",
       "       2, 4, 2, 1, 2, 6, 5, 4, 5, 1, 3, 2, 5, 4, 2, 4, 2, 6, 5, 6, 2, 2,\n",
       "       3, 2, 7, 3, 4, 4, 7, 1, 2, 2, 1, 3, 1, 3, 2, 5, 3, 2, 3, 5, 5, 5,\n",
       "       6, 6, 5, 5, 2, 3, 3, 6, 6, 6, 3, 6, 4, 1, 1, 6, 3, 1, 2, 6, 7, 5,\n",
       "       3, 4, 4, 5, 3, 4, 6, 5, 7, 6, 2, 5, 6, 6, 7, 6, 6, 3, 1, 2, 2, 3,\n",
       "       1, 5, 2, 3, 7, 4, 5, 5, 7, 4, 5, 6, 2, 2, 2, 3, 2, 3, 6, 4, 3, 3,\n",
       "       7, 4, 2, 5, 6, 1, 2, 6, 6, 6, 4, 7, 4, 3, 5, 7, 6, 5, 1, 6, 7, 7,\n",
       "       1, 6, 7, 1, 6, 4, 1, 4, 6, 4, 4, 1, 6, 1, 5, 5, 7, 6, 2, 3, 7, 1,\n",
       "       7, 1, 7, 6, 2, 7, 6, 4, 6, 3, 6, 6, 1, 3, 2, 4, 5, 7, 7, 6, 6, 1,\n",
       "       1, 6, 6, 2, 2, 7, 7, 5, 7, 2, 1, 5, 6, 1, 3, 6, 3, 2, 4, 5, 7, 7,\n",
       "       2, 4, 4, 6, 1, 4, 3, 1, 3, 4, 2, 7, 4, 6, 6, 7, 5, 6, 7, 1, 2, 6,\n",
       "       5, 5, 2, 3, 4, 7, 7, 3, 1, 6, 4, 4, 6, 7, 1, 3, 7, 1, 1, 5, 6, 6,\n",
       "       4, 5, 7, 1, 6, 7, 6, 4, 5, 6, 2, 6, 2, 6, 4, 2, 3, 7, 2, 5, 3, 4,\n",
       "       4, 3, 6, 7, 4, 4, 2, 2, 7, 7, 2, 1, 3, 4, 6, 7, 4, 7, 3, 6, 6, 5,\n",
       "       2, 5, 4, 7, 1, 6, 7, 1, 6, 7, 6, 3, 2, 5, 6, 6, 1, 6, 3, 7, 4, 3,\n",
       "       6, 3, 1, 2, 2, 4, 6, 3, 6, 7, 7, 3, 3, 4, 7, 2, 2, 3, 5, 6, 2, 2,\n",
       "       2, 5, 2, 4, 6, 2, 2, 2, 4, 1, 1, 2, 3, 3, 1, 3, 5, 6, 3, 2, 6, 2,\n",
       "       1, 1, 3, 7, 7, 7, 7, 7, 3, 6, 2, 2, 1, 4, 7, 1, 6, 6, 7, 4, 2, 7,\n",
       "       1, 7, 6, 3, 4, 1, 6, 4, 6, 1, 1, 1, 4, 6, 6, 1, 6, 6, 6, 6, 6, 7,\n",
       "       4, 6, 7, 4, 6, 6, 3, 4, 7, 4, 3, 4])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction test\n",
    "lr_pred_tf2 = lr_n.predict(X_test_tf2)\n",
    "lr_pred_tf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logistic regression Accuracy is: 0.7673469387755102\n",
      "logistic regreesion score is : 0.7495144687017662\n",
      "logistic regreesion score is : 0.7499955792740627\n",
      "logistic regreesion score is : 0.7570905725724024\n",
      "logistic regreesion score is : 0.7570905725724024\n",
      "logistic regreesion matthews_corrcoef score is : 0.7086511411686914\n"
     ]
    }
   ],
   "source": [
    "#validation test\n",
    "print(\"logistic regression Accuracy is:\",metrics.accuracy_score(y_test_tf2, lr_pred_cv2))\n",
    "print(\"logistic regreesion score is :\",f1_score(y_test_tf2, lr_pred_tf2, average='macro'))\n",
    "print(\"logistic regreesion score is :\",recall_score(y_test_tf2, lr_pred_tf2, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_tf2, lr_pred_tf2, average='macro'))\n",
    "print(\"logistic regreesion score is :\",precision_score(y_test_tf2, lr_pred_tf2, average='macro'))\n",
    "print(\"logistic regreesion matthews_corrcoef score is :\",matthews_corrcoef(y_test_tf2, lr_pred_tf2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualizing the accuracies of Nisha  kitchen data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We impletement bar graph using plypot from matplot library for visualization\n",
    "# Here the visualization shows the accuracies of the machine learning model applied with both count vectorizer and tfidf vectorizer\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10,8))\n",
    "X= ['CV','TF']\n",
    "X= np.arange(8)\n",
    "ACCURACY = [[47.4,63.3,76.4,40.3,71.8,69.8,67.3,76.7],[45.6,62.5,74.2,62.5,74.0,61.2,66.6,70.8]]\n",
    "plt.bar(X+0.00,ACCURACY[0], color='r',width=0.25,label=\"CV\")\n",
    "plt.bar(X+0.25,ACCURACY[1], color='b',width=0.25,label=\"TF\")\n",
    "plt.xticks(X,[\"NB-G\",\"NB-B\",\"SVM-L\",\"SVM-P\",\"SVM-R\",\"RF\",\"DT\",\"LG\"])\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.title(\"Accuracy of Nisha kitchen dataset\",{\"size\":15,\"color\":\"blue\"})\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
